
GIRO_NIVEL_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c0d4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fe0  0800c2a8  0800c2a8  0001c2a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d288  0800d288  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d288  0800d288  0001d288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d290  0800d290  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d290  0800d290  0001d290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d294  0800d294  0001d294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800d298  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  200001f8  0800d490  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ec  0800d490  000203ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019c49  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bd9  00000000  00000000  00039e71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001528  00000000  00000000  0003ca50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001440  00000000  00000000  0003df78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000241f7  00000000  00000000  0003f3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018557  00000000  00000000  000635af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d8871  00000000  00000000  0007bb06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00154377  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006cc4  00000000  00000000  001543cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f8 	.word	0x200001f8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c28c 	.word	0x0800c28c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001fc 	.word	0x200001fc
 800020c:	0800c28c 	.word	0x0800c28c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96e 	b.w	8000f7c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468c      	mov	ip, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8083 	bne.w	8000dce <__udivmoddi4+0x116>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d947      	bls.n	8000d5e <__udivmoddi4+0xa6>
 8000cce:	fab2 f282 	clz	r2, r2
 8000cd2:	b142      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	f1c2 0020 	rsb	r0, r2, #32
 8000cd8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cdc:	4091      	lsls	r1, r2
 8000cde:	4097      	lsls	r7, r2
 8000ce0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbbc f6f8 	udiv	r6, ip, r8
 8000cf0:	fa1f fe87 	uxth.w	lr, r7
 8000cf4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfc:	fb06 f10e 	mul.w	r1, r6, lr
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18fb      	adds	r3, r7, r3
 8000d06:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0a:	f080 8119 	bcs.w	8000f40 <__udivmoddi4+0x288>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8116 	bls.w	8000f40 <__udivmoddi4+0x288>
 8000d14:	3e02      	subs	r6, #2
 8000d16:	443b      	add	r3, r7
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d20:	fb08 3310 	mls	r3, r8, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d2c:	45a6      	cmp	lr, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	193c      	adds	r4, r7, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8105 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d3a:	45a6      	cmp	lr, r4
 8000d3c:	f240 8102 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d40:	3802      	subs	r0, #2
 8000d42:	443c      	add	r4, r7
 8000d44:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d48:	eba4 040e 	sub.w	r4, r4, lr
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	b11d      	cbz	r5, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c5 4300 	strd	r4, r3, [r5]
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	b902      	cbnz	r2, 8000d62 <__udivmoddi4+0xaa>
 8000d60:	deff      	udf	#255	; 0xff
 8000d62:	fab2 f282 	clz	r2, r2
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	d150      	bne.n	8000e0c <__udivmoddi4+0x154>
 8000d6a:	1bcb      	subs	r3, r1, r7
 8000d6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d70:	fa1f f887 	uxth.w	r8, r7
 8000d74:	2601      	movs	r6, #1
 8000d76:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d7a:	0c21      	lsrs	r1, r4, #16
 8000d7c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb08 f30c 	mul.w	r3, r8, ip
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0xe2>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	f200 80e9 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1ac9      	subs	r1, r1, r3
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000da8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x10c>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x10a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80d9 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e7bf      	b.n	8000d4e <__udivmoddi4+0x96>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0x12e>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80b1 	beq.w	8000f3a <__udivmoddi4+0x282>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x1cc>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0x140>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80b8 	bhi.w	8000f68 <__udivmoddi4+0x2b0>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0103 	sbc.w	r1, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	468c      	mov	ip, r1
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0a8      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000e06:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e0a:	e7a5      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f603 	lsr.w	r6, r0, r3
 8000e14:	4097      	lsls	r7, r2
 8000e16:	fa01 f002 	lsl.w	r0, r1, r2
 8000e1a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1e:	40d9      	lsrs	r1, r3
 8000e20:	4330      	orrs	r0, r6
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e28:	fa1f f887 	uxth.w	r8, r7
 8000e2c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e34:	fb06 f108 	mul.w	r1, r6, r8
 8000e38:	4299      	cmp	r1, r3
 8000e3a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e3e:	d909      	bls.n	8000e54 <__udivmoddi4+0x19c>
 8000e40:	18fb      	adds	r3, r7, r3
 8000e42:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e46:	f080 808d 	bcs.w	8000f64 <__udivmoddi4+0x2ac>
 8000e4a:	4299      	cmp	r1, r3
 8000e4c:	f240 808a 	bls.w	8000f64 <__udivmoddi4+0x2ac>
 8000e50:	3e02      	subs	r6, #2
 8000e52:	443b      	add	r3, r7
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b281      	uxth	r1, r0
 8000e58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e64:	fb00 f308 	mul.w	r3, r0, r8
 8000e68:	428b      	cmp	r3, r1
 8000e6a:	d907      	bls.n	8000e7c <__udivmoddi4+0x1c4>
 8000e6c:	1879      	adds	r1, r7, r1
 8000e6e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e72:	d273      	bcs.n	8000f5c <__udivmoddi4+0x2a4>
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d971      	bls.n	8000f5c <__udivmoddi4+0x2a4>
 8000e78:	3802      	subs	r0, #2
 8000e7a:	4439      	add	r1, r7
 8000e7c:	1acb      	subs	r3, r1, r3
 8000e7e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e82:	e778      	b.n	8000d76 <__udivmoddi4+0xbe>
 8000e84:	f1c6 0c20 	rsb	ip, r6, #32
 8000e88:	fa03 f406 	lsl.w	r4, r3, r6
 8000e8c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e90:	431c      	orrs	r4, r3
 8000e92:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e9e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ea2:	431f      	orrs	r7, r3
 8000ea4:	0c3b      	lsrs	r3, r7, #16
 8000ea6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eaa:	fa1f f884 	uxth.w	r8, r4
 8000eae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eb2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000eb6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eba:	458a      	cmp	sl, r1
 8000ebc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x220>
 8000ec6:	1861      	adds	r1, r4, r1
 8000ec8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ecc:	d248      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000ece:	458a      	cmp	sl, r1
 8000ed0:	d946      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000ed2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ed6:	4421      	add	r1, r4
 8000ed8:	eba1 010a 	sub.w	r1, r1, sl
 8000edc:	b2bf      	uxth	r7, r7
 8000ede:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ee2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ee6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eea:	fb00 f808 	mul.w	r8, r0, r8
 8000eee:	45b8      	cmp	r8, r7
 8000ef0:	d907      	bls.n	8000f02 <__udivmoddi4+0x24a>
 8000ef2:	19e7      	adds	r7, r4, r7
 8000ef4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ef8:	d22e      	bcs.n	8000f58 <__udivmoddi4+0x2a0>
 8000efa:	45b8      	cmp	r8, r7
 8000efc:	d92c      	bls.n	8000f58 <__udivmoddi4+0x2a0>
 8000efe:	3802      	subs	r0, #2
 8000f00:	4427      	add	r7, r4
 8000f02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f06:	eba7 0708 	sub.w	r7, r7, r8
 8000f0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f0e:	454f      	cmp	r7, r9
 8000f10:	46c6      	mov	lr, r8
 8000f12:	4649      	mov	r1, r9
 8000f14:	d31a      	bcc.n	8000f4c <__udivmoddi4+0x294>
 8000f16:	d017      	beq.n	8000f48 <__udivmoddi4+0x290>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x27a>
 8000f1a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f1e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f22:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f26:	40f2      	lsrs	r2, r6
 8000f28:	ea4c 0202 	orr.w	r2, ip, r2
 8000f2c:	40f7      	lsrs	r7, r6
 8000f2e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f32:	2600      	movs	r6, #0
 8000f34:	4631      	mov	r1, r6
 8000f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e70b      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6fd      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f48:	4543      	cmp	r3, r8
 8000f4a:	d2e5      	bcs.n	8000f18 <__udivmoddi4+0x260>
 8000f4c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f50:	eb69 0104 	sbc.w	r1, r9, r4
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7df      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e7d2      	b.n	8000f02 <__udivmoddi4+0x24a>
 8000f5c:	4660      	mov	r0, ip
 8000f5e:	e78d      	b.n	8000e7c <__udivmoddi4+0x1c4>
 8000f60:	4681      	mov	r9, r0
 8000f62:	e7b9      	b.n	8000ed8 <__udivmoddi4+0x220>
 8000f64:	4666      	mov	r6, ip
 8000f66:	e775      	b.n	8000e54 <__udivmoddi4+0x19c>
 8000f68:	4630      	mov	r0, r6
 8000f6a:	e74a      	b.n	8000e02 <__udivmoddi4+0x14a>
 8000f6c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f70:	4439      	add	r1, r7
 8000f72:	e713      	b.n	8000d9c <__udivmoddi4+0xe4>
 8000f74:	3802      	subs	r0, #2
 8000f76:	443c      	add	r4, r7
 8000f78:	e724      	b.n	8000dc4 <__udivmoddi4+0x10c>
 8000f7a:	bf00      	nop

08000f7c <__aeabi_idiv0>:
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <MPU6050_init>:
#include <math.h>
//#include "Arduino.h"

//MPU6050::MPU6050(TwoWire &w){
void MPU6050_init(I2C_HandleTypeDef *hi2c)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  //wire = &w;
  HI2C = hi2c;
 8000f88:	4a07      	ldr	r2, [pc, #28]	; (8000fa8 <MPU6050_init+0x28>)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6013      	str	r3, [r2, #0]
  accCoef = 1.0-DEFAULT_GYRO_COEFF;
 8000f8e:	4b07      	ldr	r3, [pc, #28]	; (8000fac <MPU6050_init+0x2c>)
 8000f90:	4a07      	ldr	r2, [pc, #28]	; (8000fb0 <MPU6050_init+0x30>)
 8000f92:	601a      	str	r2, [r3, #0]
  gyroCoef = DEFAULT_GYRO_COEFF;
 8000f94:	4b07      	ldr	r3, [pc, #28]	; (8000fb4 <MPU6050_init+0x34>)
 8000f96:	4a08      	ldr	r2, [pc, #32]	; (8000fb8 <MPU6050_init+0x38>)
 8000f98:	601a      	str	r2, [r3, #0]

  MPU6050_begin();
 8000f9a:	f000 f80f 	bl	8000fbc <MPU6050_begin>
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	2000023c 	.word	0x2000023c
 8000fac:	20000244 	.word	0x20000244
 8000fb0:	3ca3d70a 	.word	0x3ca3d70a
 8000fb4:	20000254 	.word	0x20000254
 8000fb8:	3f7ae148 	.word	0x3f7ae148

08000fbc <MPU6050_begin>:
  MPU6050_begin();
}

//void MPU6050::begin(){
void MPU6050_begin()
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  writeMPU6050(MPU6050_SMPLRT_DIV, 0x00);
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	2019      	movs	r0, #25
 8000fc4:	f000 f82e 	bl	8001024 <writeMPU6050>
  writeMPU6050(MPU6050_CONFIG, 0x00);
 8000fc8:	2100      	movs	r1, #0
 8000fca:	201a      	movs	r0, #26
 8000fcc:	f000 f82a 	bl	8001024 <writeMPU6050>
  writeMPU6050(MPU6050_GYRO_CONFIG, 0x08);
 8000fd0:	2108      	movs	r1, #8
 8000fd2:	201b      	movs	r0, #27
 8000fd4:	f000 f826 	bl	8001024 <writeMPU6050>
  writeMPU6050(MPU6050_ACCEL_CONFIG, 0x00);
 8000fd8:	2100      	movs	r1, #0
 8000fda:	201c      	movs	r0, #28
 8000fdc:	f000 f822 	bl	8001024 <writeMPU6050>
  writeMPU6050(MPU6050_PWR_MGMT_1, 0x01);
 8000fe0:	2101      	movs	r1, #1
 8000fe2:	206b      	movs	r0, #107	; 0x6b
 8000fe4:	f000 f81e 	bl	8001024 <writeMPU6050>
  MPU6050_update();
 8000fe8:	f000 f8fe 	bl	80011e8 <MPU6050_update>
  angleX = MPU6050_getAccAngleX();
 8000fec:	f000 fb74 	bl	80016d8 <MPU6050_getAccAngleX>
 8000ff0:	eef0 7a40 	vmov.f32	s15, s0
 8000ff4:	4b08      	ldr	r3, [pc, #32]	; (8001018 <MPU6050_begin+0x5c>)
 8000ff6:	edc3 7a00 	vstr	s15, [r3]
  angleY = MPU6050_getAccAngleY();
 8000ffa:	f000 fb7b 	bl	80016f4 <MPU6050_getAccAngleY>
 8000ffe:	eef0 7a40 	vmov.f32	s15, s0
 8001002:	4b06      	ldr	r3, [pc, #24]	; (800101c <MPU6050_begin+0x60>)
 8001004:	edc3 7a00 	vstr	s15, [r3]
  preInterval = HAL_GetTick();
 8001008:	f005 fa2c 	bl	8006464 <HAL_GetTick>
 800100c:	4603      	mov	r3, r0
 800100e:	461a      	mov	r2, r3
 8001010:	4b03      	ldr	r3, [pc, #12]	; (8001020 <MPU6050_begin+0x64>)
 8001012:	601a      	str	r2, [r3, #0]
  /*this->update();
  angleX = this->getAccAngleX();
  angleY = this->getAccAngleY();
  preInterval = millis();*/
}
 8001014:	bf00      	nop
 8001016:	bd80      	pop	{r7, pc}
 8001018:	2000024c 	.word	0x2000024c
 800101c:	20000268 	.word	0x20000268
 8001020:	20000228 	.word	0x20000228

08001024 <writeMPU6050>:

//void MPU6050::writeMPU6050(byte reg, byte data){
void writeMPU6050(uint8_t reg, uint8_t data)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af02      	add	r7, sp, #8
 800102a:	4603      	mov	r3, r0
 800102c:	460a      	mov	r2, r1
 800102e:	71fb      	strb	r3, [r7, #7]
 8001030:	4613      	mov	r3, r2
 8001032:	71bb      	strb	r3, [r7, #6]
	uint8_t pacote[2];
	pacote[0] = reg;
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	733b      	strb	r3, [r7, #12]
	pacote[1] = data;
 8001038:	79bb      	ldrb	r3, [r7, #6]
 800103a:	737b      	strb	r3, [r7, #13]
	//HAL_I2C_Master_Transmit(hi2c, DevAddress, pData, Size, Timeout)
	if(HAL_I2C_Master_Transmit(HI2C, MPU6050_ADDR<<1, pacote, 2, 5) == HAL_ERROR)
 800103c:	4b09      	ldr	r3, [pc, #36]	; (8001064 <writeMPU6050+0x40>)
 800103e:	6818      	ldr	r0, [r3, #0]
 8001040:	f107 020c 	add.w	r2, r7, #12
 8001044:	2305      	movs	r3, #5
 8001046:	9300      	str	r3, [sp, #0]
 8001048:	2302      	movs	r3, #2
 800104a:	21d0      	movs	r1, #208	; 0xd0
 800104c:	f005 fe2c 	bl	8006ca8 <HAL_I2C_Master_Transmit>
 8001050:	4603      	mov	r3, r0
 8001052:	2b01      	cmp	r3, #1
 8001054:	d101      	bne.n	800105a <writeMPU6050+0x36>
	{
		error_led();
 8001056:	f000 fb17 	bl	8001688 <error_led>
	}
//HAL_Delay(1); //Estava no código original, mas se mostrou desnecessário
}
 800105a:	bf00      	nop
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	2000023c 	.word	0x2000023c

08001068 <readMPU6050_n>:
  wire->requestFrom(MPU6050_ADDR, 1);
  byte data =  wire->read();
  return data;*/

uint8_t readMPU6050_n(uint8_t reg, uint8_t *data, uint8_t size)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af02      	add	r7, sp, #8
 800106e:	4603      	mov	r3, r0
 8001070:	6039      	str	r1, [r7, #0]
 8001072:	71fb      	strb	r3, [r7, #7]
 8001074:	4613      	mov	r3, r2
 8001076:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(HI2C, (MPU6050_ADDR<<1)|1, &reg, 1, 5);
 8001078:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <readMPU6050_n+0x4c>)
 800107a:	6818      	ldr	r0, [r3, #0]
 800107c:	1dfa      	adds	r2, r7, #7
 800107e:	2305      	movs	r3, #5
 8001080:	9300      	str	r3, [sp, #0]
 8001082:	2301      	movs	r3, #1
 8001084:	21d1      	movs	r1, #209	; 0xd1
 8001086:	f005 fe0f 	bl	8006ca8 <HAL_I2C_Master_Transmit>
	if(HAL_I2C_Master_Receive(HI2C, (MPU6050_ADDR<<1)|1, data, size, 5) == HAL_ERROR)
 800108a:	4b0a      	ldr	r3, [pc, #40]	; (80010b4 <readMPU6050_n+0x4c>)
 800108c:	6818      	ldr	r0, [r3, #0]
 800108e:	79bb      	ldrb	r3, [r7, #6]
 8001090:	b29b      	uxth	r3, r3
 8001092:	2205      	movs	r2, #5
 8001094:	9200      	str	r2, [sp, #0]
 8001096:	683a      	ldr	r2, [r7, #0]
 8001098:	21d1      	movs	r1, #209	; 0xd1
 800109a:	f005 ff03 	bl	8006ea4 <HAL_I2C_Master_Receive>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d101      	bne.n	80010a8 <readMPU6050_n+0x40>
	error_led();
 80010a4:	f000 faf0 	bl	8001688 <error_led>
	return 0;
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	2000023c 	.word	0x2000023c

080010b8 <MPU6050_calcGyroOffsets>:
  gyroZoffset = z;
}

//void MPU6050::calcGyroOffsets(){
void MPU6050_calcGyroOffsets()
{
 80010b8:	b5b0      	push	{r4, r5, r7, lr}
 80010ba:	b088      	sub	sp, #32
 80010bc:	af00      	add	r7, sp, #0
  float xyz[3] = {0,0,0};
 80010be:	f04f 0300 	mov.w	r3, #0
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	f04f 0300 	mov.w	r3, #0
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	f04f 0300 	mov.w	r3, #0
 80010ce:	613b      	str	r3, [r7, #16]
  int8_t offset[6];
  int16_t b;
  
  for(int i = 0; i < GYRO_OFFSET_NB_MES; i++)
 80010d0:	2300      	movs	r3, #0
 80010d2:	61fb      	str	r3, [r7, #28]
 80010d4:	e055      	b.n	8001182 <MPU6050_calcGyroOffsets+0xca>
  {
	  readMPU6050_n(0x43, offset, 6);
 80010d6:	463b      	mov	r3, r7
 80010d8:	2206      	movs	r2, #6
 80010da:	4619      	mov	r1, r3
 80010dc:	2043      	movs	r0, #67	; 0x43
 80010de:	f7ff ffc3 	bl	8001068 <readMPU6050_n>

	  for(int j=0;j<3;j++)
 80010e2:	2300      	movs	r3, #0
 80010e4:	61bb      	str	r3, [r7, #24]
 80010e6:	e046      	b.n	8001176 <MPU6050_calcGyroOffsets+0xbe>
  	  {
		  b = offset[j*2] << 8;
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	f107 0220 	add.w	r2, r7, #32
 80010f0:	4413      	add	r3, r2
 80010f2:	f913 3c20 	ldrsb.w	r3, [r3, #-32]
 80010f6:	021b      	lsls	r3, r3, #8
 80010f8:	82fb      	strh	r3, [r7, #22]
		  b |= offset[j*2+1];
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	3301      	adds	r3, #1
 8001100:	f107 0220 	add.w	r2, r7, #32
 8001104:	4413      	add	r3, r2
 8001106:	f913 3c20 	ldrsb.w	r3, [r3, #-32]
 800110a:	b21a      	sxth	r2, r3
 800110c:	8afb      	ldrh	r3, [r7, #22]
 800110e:	4313      	orrs	r3, r2
 8001110:	82fb      	strh	r3, [r7, #22]
		  xyz[j] += ((float)b) / GYRO_LSB_2_DEGSEC;
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	f107 0220 	add.w	r2, r7, #32
 800111a:	4413      	add	r3, r2
 800111c:	3b18      	subs	r3, #24
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff fa31 	bl	8000588 <__aeabi_f2d>
 8001126:	4604      	mov	r4, r0
 8001128:	460d      	mov	r5, r1
 800112a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800112e:	ee07 3a90 	vmov	s15, r3
 8001132:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001136:	ee17 0a90 	vmov	r0, s15
 800113a:	f7ff fa25 	bl	8000588 <__aeabi_f2d>
 800113e:	a328      	add	r3, pc, #160	; (adr r3, 80011e0 <MPU6050_calcGyroOffsets+0x128>)
 8001140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001144:	f7ff fba2 	bl	800088c <__aeabi_ddiv>
 8001148:	4602      	mov	r2, r0
 800114a:	460b      	mov	r3, r1
 800114c:	4620      	mov	r0, r4
 800114e:	4629      	mov	r1, r5
 8001150:	f7ff f8bc 	bl	80002cc <__adddf3>
 8001154:	4602      	mov	r2, r0
 8001156:	460b      	mov	r3, r1
 8001158:	4610      	mov	r0, r2
 800115a:	4619      	mov	r1, r3
 800115c:	f7ff fd44 	bl	8000be8 <__aeabi_d2f>
 8001160:	4602      	mov	r2, r0
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	f107 0120 	add.w	r1, r7, #32
 800116a:	440b      	add	r3, r1
 800116c:	3b18      	subs	r3, #24
 800116e:	601a      	str	r2, [r3, #0]
	  for(int j=0;j<3;j++)
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	3301      	adds	r3, #1
 8001174:	61bb      	str	r3, [r7, #24]
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	2b02      	cmp	r3, #2
 800117a:	ddb5      	ble.n	80010e8 <MPU6050_calcGyroOffsets+0x30>
  for(int i = 0; i < GYRO_OFFSET_NB_MES; i++)
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	3301      	adds	r3, #1
 8001180:	61fb      	str	r3, [r7, #28]
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001188:	4293      	cmp	r3, r2
 800118a:	dda4      	ble.n	80010d6 <MPU6050_calcGyroOffsets+0x1e>
  	  }
   }
  gyroXoffset = xyz[0] / GYRO_OFFSET_NB_MES;
 800118c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001190:	eddf 6a0f 	vldr	s13, [pc, #60]	; 80011d0 <MPU6050_calcGyroOffsets+0x118>
 8001194:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001198:	4b0e      	ldr	r3, [pc, #56]	; (80011d4 <MPU6050_calcGyroOffsets+0x11c>)
 800119a:	edc3 7a00 	vstr	s15, [r3]
  gyroYoffset = xyz[1] / GYRO_OFFSET_NB_MES;
 800119e:	ed97 7a03 	vldr	s14, [r7, #12]
 80011a2:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80011d0 <MPU6050_calcGyroOffsets+0x118>
 80011a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011aa:	4b0b      	ldr	r3, [pc, #44]	; (80011d8 <MPU6050_calcGyroOffsets+0x120>)
 80011ac:	edc3 7a00 	vstr	s15, [r3]
  gyroZoffset = xyz[2] / GYRO_OFFSET_NB_MES;
 80011b0:	ed97 7a04 	vldr	s14, [r7, #16]
 80011b4:	eddf 6a06 	vldr	s13, [pc, #24]	; 80011d0 <MPU6050_calcGyroOffsets+0x118>
 80011b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011bc:	4b07      	ldr	r3, [pc, #28]	; (80011dc <MPU6050_calcGyroOffsets+0x124>)
 80011be:	edc3 7a00 	vstr	s15, [r3]
		b  = wire->read() << 8;
		b |= wire->read();
		xyz[j] += ((float)b) / GYRO_LSB_2_DEGSEC;
	}
  }*/
}
 80011c2:	bf00      	nop
 80011c4:	3720      	adds	r7, #32
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bdb0      	pop	{r4, r5, r7, pc}
 80011ca:	bf00      	nop
 80011cc:	f3af 8000 	nop.w
 80011d0:	453b8000 	.word	0x453b8000
 80011d4:	20000270 	.word	0x20000270
 80011d8:	20000240 	.word	0x20000240
 80011dc:	2000022c 	.word	0x2000022c
 80011e0:	00000000 	.word	0x00000000
 80011e4:	40506000 	.word	0x40506000

080011e8 <MPU6050_update>:

//void MPU6050::update(){
void MPU6050_update()
{
 80011e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80011ec:	b08c      	sub	sp, #48	; 0x30
 80011ee:	af00      	add	r7, sp, #0

  uint8_t raw[14];
  int16_t rawData[7]; // [ax,ay,az,temp,gx,gy,gz]

  //Lê todos os parâmetros byte a byte
  readMPU6050_n(0x3B, raw, 14);// 0x3B é o endereço do ACCEL_XOUT_H, os demais parâmetros vem na
 80011f0:	f107 0310 	add.w	r3, r7, #16
 80011f4:	220e      	movs	r2, #14
 80011f6:	4619      	mov	r1, r3
 80011f8:	203b      	movs	r0, #59	; 0x3b
 80011fa:	f7ff ff35 	bl	8001068 <readMPU6050_n>

  //Combina o LSB com o MSB, todos os valores são de 16 bits
  for(int i=0;i<7;i++)
 80011fe:	2300      	movs	r3, #0
 8001200:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001202:	e02b      	b.n	800125c <MPU6050_update+0x74>
  {
	rawData[i]  = raw[i*2] << 8;
 8001204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800120c:	4413      	add	r3, r2
 800120e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001212:	021b      	lsls	r3, r3, #8
 8001214:	b21a      	sxth	r2, r3
 8001216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800121e:	440b      	add	r3, r1
 8001220:	f823 2c30 	strh.w	r2, [r3, #-48]
    rawData[i] |= raw[i*2+1];
 8001224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800122c:	4413      	add	r3, r2
 800122e:	f933 2c30 	ldrsh.w	r2, [r3, #-48]
 8001232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	3301      	adds	r3, #1
 8001238:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800123c:	440b      	add	r3, r1
 800123e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001242:	b21b      	sxth	r3, r3
 8001244:	4313      	orrs	r3, r2
 8001246:	b21a      	sxth	r2, r3
 8001248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001250:	440b      	add	r3, r1
 8001252:	f823 2c30 	strh.w	r2, [r3, #-48]
  for(int i=0;i<7;i++)
 8001256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001258:	3301      	adds	r3, #1
 800125a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800125c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800125e:	2b06      	cmp	r3, #6
 8001260:	ddd0      	ble.n	8001204 <MPU6050_update+0x1c>
  }

  accX = ((float)rawData[0]) / ACC_LSB_2_G;
 8001262:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001266:	ee07 3a90 	vmov	s15, r3
 800126a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800126e:	eddf 6ad6 	vldr	s13, [pc, #856]	; 80015c8 <MPU6050_update+0x3e0>
 8001272:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001276:	4bd5      	ldr	r3, [pc, #852]	; (80015cc <MPU6050_update+0x3e4>)
 8001278:	edc3 7a00 	vstr	s15, [r3]
  accY = ((float)rawData[1]) / ACC_LSB_2_G;
 800127c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001280:	ee07 3a90 	vmov	s15, r3
 8001284:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001288:	eddf 6acf 	vldr	s13, [pc, #828]	; 80015c8 <MPU6050_update+0x3e0>
 800128c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001290:	4bcf      	ldr	r3, [pc, #828]	; (80015d0 <MPU6050_update+0x3e8>)
 8001292:	edc3 7a00 	vstr	s15, [r3]
  accZ = ((float)rawData[2]) / ACC_LSB_2_G;
 8001296:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800129a:	ee07 3a90 	vmov	s15, r3
 800129e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012a2:	eddf 6ac9 	vldr	s13, [pc, #804]	; 80015c8 <MPU6050_update+0x3e0>
 80012a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012aa:	4bca      	ldr	r3, [pc, #808]	; (80015d4 <MPU6050_update+0x3ec>)
 80012ac:	edc3 7a00 	vstr	s15, [r3]
  temp = (rawData[3] + TEMP_LSB_OFFSET) / TEMP_LSB_2_DEGREE;
 80012b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff f955 	bl	8000564 <__aeabi_i2d>
 80012ba:	a3bb      	add	r3, pc, #748	; (adr r3, 80015a8 <MPU6050_update+0x3c0>)
 80012bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c0:	f7ff f804 	bl	80002cc <__adddf3>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	4610      	mov	r0, r2
 80012ca:	4619      	mov	r1, r3
 80012cc:	f04f 0200 	mov.w	r2, #0
 80012d0:	4bc1      	ldr	r3, [pc, #772]	; (80015d8 <MPU6050_update+0x3f0>)
 80012d2:	f7ff fadb 	bl	800088c <__aeabi_ddiv>
 80012d6:	4602      	mov	r2, r0
 80012d8:	460b      	mov	r3, r1
 80012da:	4610      	mov	r0, r2
 80012dc:	4619      	mov	r1, r3
 80012de:	f7ff fc83 	bl	8000be8 <__aeabi_d2f>
 80012e2:	4603      	mov	r3, r0
 80012e4:	4abd      	ldr	r2, [pc, #756]	; (80015dc <MPU6050_update+0x3f4>)
 80012e6:	6013      	str	r3, [r2, #0]
  gyroX = ((float)rawData[4]) / GYRO_LSB_2_DEGSEC - gyroXoffset;
 80012e8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80012ec:	ee07 3a90 	vmov	s15, r3
 80012f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012f4:	ee17 0a90 	vmov	r0, s15
 80012f8:	f7ff f946 	bl	8000588 <__aeabi_f2d>
 80012fc:	a3ac      	add	r3, pc, #688	; (adr r3, 80015b0 <MPU6050_update+0x3c8>)
 80012fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001302:	f7ff fac3 	bl	800088c <__aeabi_ddiv>
 8001306:	4602      	mov	r2, r0
 8001308:	460b      	mov	r3, r1
 800130a:	4690      	mov	r8, r2
 800130c:	4699      	mov	r9, r3
 800130e:	4bb4      	ldr	r3, [pc, #720]	; (80015e0 <MPU6050_update+0x3f8>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff f938 	bl	8000588 <__aeabi_f2d>
 8001318:	4602      	mov	r2, r0
 800131a:	460b      	mov	r3, r1
 800131c:	4640      	mov	r0, r8
 800131e:	4649      	mov	r1, r9
 8001320:	f7fe ffd2 	bl	80002c8 <__aeabi_dsub>
 8001324:	4602      	mov	r2, r0
 8001326:	460b      	mov	r3, r1
 8001328:	4610      	mov	r0, r2
 800132a:	4619      	mov	r1, r3
 800132c:	f7ff fc5c 	bl	8000be8 <__aeabi_d2f>
 8001330:	4603      	mov	r3, r0
 8001332:	4aac      	ldr	r2, [pc, #688]	; (80015e4 <MPU6050_update+0x3fc>)
 8001334:	6013      	str	r3, [r2, #0]
  gyroY = ((float)rawData[5]) / GYRO_LSB_2_DEGSEC - gyroYoffset;
 8001336:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800133a:	ee07 3a90 	vmov	s15, r3
 800133e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001342:	ee17 0a90 	vmov	r0, s15
 8001346:	f7ff f91f 	bl	8000588 <__aeabi_f2d>
 800134a:	a399      	add	r3, pc, #612	; (adr r3, 80015b0 <MPU6050_update+0x3c8>)
 800134c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001350:	f7ff fa9c 	bl	800088c <__aeabi_ddiv>
 8001354:	4602      	mov	r2, r0
 8001356:	460b      	mov	r3, r1
 8001358:	4690      	mov	r8, r2
 800135a:	4699      	mov	r9, r3
 800135c:	4ba2      	ldr	r3, [pc, #648]	; (80015e8 <MPU6050_update+0x400>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff f911 	bl	8000588 <__aeabi_f2d>
 8001366:	4602      	mov	r2, r0
 8001368:	460b      	mov	r3, r1
 800136a:	4640      	mov	r0, r8
 800136c:	4649      	mov	r1, r9
 800136e:	f7fe ffab 	bl	80002c8 <__aeabi_dsub>
 8001372:	4602      	mov	r2, r0
 8001374:	460b      	mov	r3, r1
 8001376:	4610      	mov	r0, r2
 8001378:	4619      	mov	r1, r3
 800137a:	f7ff fc35 	bl	8000be8 <__aeabi_d2f>
 800137e:	4603      	mov	r3, r0
 8001380:	4a9a      	ldr	r2, [pc, #616]	; (80015ec <MPU6050_update+0x404>)
 8001382:	6013      	str	r3, [r2, #0]
  gyroZ = ((float)rawData[6]) / GYRO_LSB_2_DEGSEC - gyroZoffset;
 8001384:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001388:	ee07 3a90 	vmov	s15, r3
 800138c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001390:	ee17 0a90 	vmov	r0, s15
 8001394:	f7ff f8f8 	bl	8000588 <__aeabi_f2d>
 8001398:	a385      	add	r3, pc, #532	; (adr r3, 80015b0 <MPU6050_update+0x3c8>)
 800139a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800139e:	f7ff fa75 	bl	800088c <__aeabi_ddiv>
 80013a2:	4602      	mov	r2, r0
 80013a4:	460b      	mov	r3, r1
 80013a6:	4690      	mov	r8, r2
 80013a8:	4699      	mov	r9, r3
 80013aa:	4b91      	ldr	r3, [pc, #580]	; (80015f0 <MPU6050_update+0x408>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff f8ea 	bl	8000588 <__aeabi_f2d>
 80013b4:	4602      	mov	r2, r0
 80013b6:	460b      	mov	r3, r1
 80013b8:	4640      	mov	r0, r8
 80013ba:	4649      	mov	r1, r9
 80013bc:	f7fe ff84 	bl	80002c8 <__aeabi_dsub>
 80013c0:	4602      	mov	r2, r0
 80013c2:	460b      	mov	r3, r1
 80013c4:	4610      	mov	r0, r2
 80013c6:	4619      	mov	r1, r3
 80013c8:	f7ff fc0e 	bl	8000be8 <__aeabi_d2f>
 80013cc:	4603      	mov	r3, r0
 80013ce:	4a89      	ldr	r2, [pc, #548]	; (80015f4 <MPU6050_update+0x40c>)
 80013d0:	6013      	str	r3, [r2, #0]
  
  float sgZ = (accZ>=0)-(accZ<0);
 80013d2:	4b80      	ldr	r3, [pc, #512]	; (80015d4 <MPU6050_update+0x3ec>)
 80013d4:	edd3 7a00 	vldr	s15, [r3]
 80013d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e0:	bfac      	ite	ge
 80013e2:	2301      	movge	r3, #1
 80013e4:	2300      	movlt	r3, #0
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	461a      	mov	r2, r3
 80013ea:	4b7a      	ldr	r3, [pc, #488]	; (80015d4 <MPU6050_update+0x3ec>)
 80013ec:	edd3 7a00 	vldr	s15, [r3]
 80013f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f8:	bf4c      	ite	mi
 80013fa:	2301      	movmi	r3, #1
 80013fc:	2300      	movpl	r3, #0
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	ee07 3a90 	vmov	s15, r3
 8001406:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800140a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  angleAccX = atan2(accY, sgZ*sqrt(accZ*accZ + accX*accX)) * RAD_2_DEG;
 800140e:	4b70      	ldr	r3, [pc, #448]	; (80015d0 <MPU6050_update+0x3e8>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff f8b8 	bl	8000588 <__aeabi_f2d>
 8001418:	4682      	mov	sl, r0
 800141a:	468b      	mov	fp, r1
 800141c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800141e:	f7ff f8b3 	bl	8000588 <__aeabi_f2d>
 8001422:	4680      	mov	r8, r0
 8001424:	4689      	mov	r9, r1
 8001426:	4b6b      	ldr	r3, [pc, #428]	; (80015d4 <MPU6050_update+0x3ec>)
 8001428:	ed93 7a00 	vldr	s14, [r3]
 800142c:	4b69      	ldr	r3, [pc, #420]	; (80015d4 <MPU6050_update+0x3ec>)
 800142e:	edd3 7a00 	vldr	s15, [r3]
 8001432:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001436:	4b65      	ldr	r3, [pc, #404]	; (80015cc <MPU6050_update+0x3e4>)
 8001438:	edd3 6a00 	vldr	s13, [r3]
 800143c:	4b63      	ldr	r3, [pc, #396]	; (80015cc <MPU6050_update+0x3e4>)
 800143e:	edd3 7a00 	vldr	s15, [r3]
 8001442:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001446:	ee77 7a27 	vadd.f32	s15, s14, s15
 800144a:	ee17 0a90 	vmov	r0, s15
 800144e:	f7ff f89b 	bl	8000588 <__aeabi_f2d>
 8001452:	4602      	mov	r2, r0
 8001454:	460b      	mov	r3, r1
 8001456:	ec43 2b10 	vmov	d0, r2, r3
 800145a:	f00a fbb9 	bl	800bbd0 <sqrt>
 800145e:	ec53 2b10 	vmov	r2, r3, d0
 8001462:	4640      	mov	r0, r8
 8001464:	4649      	mov	r1, r9
 8001466:	f7ff f8e7 	bl	8000638 <__aeabi_dmul>
 800146a:	4602      	mov	r2, r0
 800146c:	460b      	mov	r3, r1
 800146e:	ec43 2b17 	vmov	d7, r2, r3
 8001472:	eeb0 1a47 	vmov.f32	s2, s14
 8001476:	eef0 1a67 	vmov.f32	s3, s15
 800147a:	ec4b ab10 	vmov	d0, sl, fp
 800147e:	f00a fba5 	bl	800bbcc <atan2>
 8001482:	ec51 0b10 	vmov	r0, r1, d0
 8001486:	a34c      	add	r3, pc, #304	; (adr r3, 80015b8 <MPU6050_update+0x3d0>)
 8001488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800148c:	f7ff f8d4 	bl	8000638 <__aeabi_dmul>
 8001490:	4602      	mov	r2, r0
 8001492:	460b      	mov	r3, r1
 8001494:	4610      	mov	r0, r2
 8001496:	4619      	mov	r1, r3
 8001498:	f7ff fba6 	bl	8000be8 <__aeabi_d2f>
 800149c:	4603      	mov	r3, r0
 800149e:	4a56      	ldr	r2, [pc, #344]	; (80015f8 <MPU6050_update+0x410>)
 80014a0:	6013      	str	r3, [r2, #0]
  angleAccY = - atan2(accX, sqrt(accZ*accZ + accY*accY)) * RAD_2_DEG;
 80014a2:	4b4a      	ldr	r3, [pc, #296]	; (80015cc <MPU6050_update+0x3e4>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff f86e 	bl	8000588 <__aeabi_f2d>
 80014ac:	4680      	mov	r8, r0
 80014ae:	4689      	mov	r9, r1
 80014b0:	4b48      	ldr	r3, [pc, #288]	; (80015d4 <MPU6050_update+0x3ec>)
 80014b2:	ed93 7a00 	vldr	s14, [r3]
 80014b6:	4b47      	ldr	r3, [pc, #284]	; (80015d4 <MPU6050_update+0x3ec>)
 80014b8:	edd3 7a00 	vldr	s15, [r3]
 80014bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014c0:	4b43      	ldr	r3, [pc, #268]	; (80015d0 <MPU6050_update+0x3e8>)
 80014c2:	edd3 6a00 	vldr	s13, [r3]
 80014c6:	4b42      	ldr	r3, [pc, #264]	; (80015d0 <MPU6050_update+0x3e8>)
 80014c8:	edd3 7a00 	vldr	s15, [r3]
 80014cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014d4:	ee17 0a90 	vmov	r0, s15
 80014d8:	f7ff f856 	bl	8000588 <__aeabi_f2d>
 80014dc:	4602      	mov	r2, r0
 80014de:	460b      	mov	r3, r1
 80014e0:	ec43 2b10 	vmov	d0, r2, r3
 80014e4:	f00a fb74 	bl	800bbd0 <sqrt>
 80014e8:	eeb0 7a40 	vmov.f32	s14, s0
 80014ec:	eef0 7a60 	vmov.f32	s15, s1
 80014f0:	eeb0 1a47 	vmov.f32	s2, s14
 80014f4:	eef0 1a67 	vmov.f32	s3, s15
 80014f8:	ec49 8b10 	vmov	d0, r8, r9
 80014fc:	f00a fb66 	bl	800bbcc <atan2>
 8001500:	ec53 2b10 	vmov	r2, r3, d0
 8001504:	4614      	mov	r4, r2
 8001506:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800150a:	a32b      	add	r3, pc, #172	; (adr r3, 80015b8 <MPU6050_update+0x3d0>)
 800150c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001510:	4620      	mov	r0, r4
 8001512:	4629      	mov	r1, r5
 8001514:	f7ff f890 	bl	8000638 <__aeabi_dmul>
 8001518:	4602      	mov	r2, r0
 800151a:	460b      	mov	r3, r1
 800151c:	4610      	mov	r0, r2
 800151e:	4619      	mov	r1, r3
 8001520:	f7ff fb62 	bl	8000be8 <__aeabi_d2f>
 8001524:	4603      	mov	r3, r0
 8001526:	4a35      	ldr	r2, [pc, #212]	; (80015fc <MPU6050_update+0x414>)
 8001528:	6013      	str	r3, [r2, #0]

  unsigned long Tnew = HAL_GetTick();
 800152a:	f004 ff9b 	bl	8006464 <HAL_GetTick>
 800152e:	6278      	str	r0, [r7, #36]	; 0x24
  float dt = (Tnew - preInterval) * 1e-3;
 8001530:	4b33      	ldr	r3, [pc, #204]	; (8001600 <MPU6050_update+0x418>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	461a      	mov	r2, r3
 8001536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001538:	1a9b      	subs	r3, r3, r2
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff f802 	bl	8000544 <__aeabi_ui2d>
 8001540:	a31f      	add	r3, pc, #124	; (adr r3, 80015c0 <MPU6050_update+0x3d8>)
 8001542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001546:	f7ff f877 	bl	8000638 <__aeabi_dmul>
 800154a:	4602      	mov	r2, r0
 800154c:	460b      	mov	r3, r1
 800154e:	4610      	mov	r0, r2
 8001550:	4619      	mov	r1, r3
 8001552:	f7ff fb49 	bl	8000be8 <__aeabi_d2f>
 8001556:	4603      	mov	r3, r0
 8001558:	623b      	str	r3, [r7, #32]
  preInterval = Tnew;
 800155a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155c:	4a28      	ldr	r2, [pc, #160]	; (8001600 <MPU6050_update+0x418>)
 800155e:	6013      	str	r3, [r2, #0]

  angleX = (gyroCoef * (angleX + gyroX*dt)) + (accCoef * angleAccX);
 8001560:	4b20      	ldr	r3, [pc, #128]	; (80015e4 <MPU6050_update+0x3fc>)
 8001562:	ed93 7a00 	vldr	s14, [r3]
 8001566:	edd7 7a08 	vldr	s15, [r7, #32]
 800156a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800156e:	4b25      	ldr	r3, [pc, #148]	; (8001604 <MPU6050_update+0x41c>)
 8001570:	edd3 7a00 	vldr	s15, [r3]
 8001574:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001578:	4b23      	ldr	r3, [pc, #140]	; (8001608 <MPU6050_update+0x420>)
 800157a:	edd3 7a00 	vldr	s15, [r3]
 800157e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001582:	4b22      	ldr	r3, [pc, #136]	; (800160c <MPU6050_update+0x424>)
 8001584:	edd3 6a00 	vldr	s13, [r3]
 8001588:	4b1b      	ldr	r3, [pc, #108]	; (80015f8 <MPU6050_update+0x410>)
 800158a:	edd3 7a00 	vldr	s15, [r3]
 800158e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001592:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001596:	4b1b      	ldr	r3, [pc, #108]	; (8001604 <MPU6050_update+0x41c>)
 8001598:	edc3 7a00 	vstr	s15, [r3]
  angleY = (gyroCoef * (angleY + gyroY*dt)) + (accCoef * angleAccY);
 800159c:	4b13      	ldr	r3, [pc, #76]	; (80015ec <MPU6050_update+0x404>)
 800159e:	ed93 7a00 	vldr	s14, [r3]
 80015a2:	e035      	b.n	8001610 <MPU6050_update+0x428>
 80015a4:	f3af 8000 	nop.w
 80015a8:	00000000 	.word	0x00000000
 80015ac:	40c83e00 	.word	0x40c83e00
 80015b0:	00000000 	.word	0x00000000
 80015b4:	40506000 	.word	0x40506000
 80015b8:	1e7967cb 	.word	0x1e7967cb
 80015bc:	404ca5dc 	.word	0x404ca5dc
 80015c0:	d2f1a9fc 	.word	0xd2f1a9fc
 80015c4:	3f50624d 	.word	0x3f50624d
 80015c8:	46800000 	.word	0x46800000
 80015cc:	2000026c 	.word	0x2000026c
 80015d0:	20000264 	.word	0x20000264
 80015d4:	20000234 	.word	0x20000234
 80015d8:	40754000 	.word	0x40754000
 80015dc:	20000238 	.word	0x20000238
 80015e0:	20000270 	.word	0x20000270
 80015e4:	20000230 	.word	0x20000230
 80015e8:	20000240 	.word	0x20000240
 80015ec:	2000025c 	.word	0x2000025c
 80015f0:	2000022c 	.word	0x2000022c
 80015f4:	20000248 	.word	0x20000248
 80015f8:	20000260 	.word	0x20000260
 80015fc:	20000250 	.word	0x20000250
 8001600:	20000228 	.word	0x20000228
 8001604:	2000024c 	.word	0x2000024c
 8001608:	20000254 	.word	0x20000254
 800160c:	20000244 	.word	0x20000244
 8001610:	edd7 7a08 	vldr	s15, [r7, #32]
 8001614:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001618:	4b15      	ldr	r3, [pc, #84]	; (8001670 <MPU6050_update+0x488>)
 800161a:	edd3 7a00 	vldr	s15, [r3]
 800161e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001622:	4b14      	ldr	r3, [pc, #80]	; (8001674 <MPU6050_update+0x48c>)
 8001624:	edd3 7a00 	vldr	s15, [r3]
 8001628:	ee27 7a27 	vmul.f32	s14, s14, s15
 800162c:	4b12      	ldr	r3, [pc, #72]	; (8001678 <MPU6050_update+0x490>)
 800162e:	edd3 6a00 	vldr	s13, [r3]
 8001632:	4b12      	ldr	r3, [pc, #72]	; (800167c <MPU6050_update+0x494>)
 8001634:	edd3 7a00 	vldr	s15, [r3]
 8001638:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800163c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001640:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <MPU6050_update+0x488>)
 8001642:	edc3 7a00 	vstr	s15, [r3]
  angleZ += gyroZ*dt;
 8001646:	4b0e      	ldr	r3, [pc, #56]	; (8001680 <MPU6050_update+0x498>)
 8001648:	ed93 7a00 	vldr	s14, [r3]
 800164c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001650:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001654:	4b0b      	ldr	r3, [pc, #44]	; (8001684 <MPU6050_update+0x49c>)
 8001656:	edd3 7a00 	vldr	s15, [r3]
 800165a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800165e:	4b09      	ldr	r3, [pc, #36]	; (8001684 <MPU6050_update+0x49c>)
 8001660:	edc3 7a00 	vstr	s15, [r3]

}
 8001664:	bf00      	nop
 8001666:	3730      	adds	r7, #48	; 0x30
 8001668:	46bd      	mov	sp, r7
 800166a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800166e:	bf00      	nop
 8001670:	20000268 	.word	0x20000268
 8001674:	20000254 	.word	0x20000254
 8001678:	20000244 	.word	0x20000244
 800167c:	20000250 	.word	0x20000250
 8001680:	20000248 	.word	0x20000248
 8001684:	20000258 	.word	0x20000258

08001688 <error_led>:

void error_led(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
while (1)
{
//Espera por um reset
HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800168c:	2120      	movs	r1, #32
 800168e:	4803      	ldr	r0, [pc, #12]	; (800169c <error_led+0x14>)
 8001690:	f005 f9ab 	bl	80069ea <HAL_GPIO_TogglePin>
HAL_Delay(100);
 8001694:	2064      	movs	r0, #100	; 0x64
 8001696:	f004 fef1 	bl	800647c <HAL_Delay>
HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800169a:	e7f7      	b.n	800168c <error_led+0x4>
 800169c:	40020000 	.word	0x40020000

080016a0 <MPU6050_getAngleX>:

float MPU6050_getGyroX(){ return gyroX; };
float MPU6050_getGyroY(){ return gyroY; };
float MPU6050_getGyroZ(){ return gyroZ; };

float MPU6050_getAngleX()	{return angleX;};
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	4b04      	ldr	r3, [pc, #16]	; (80016b8 <MPU6050_getAngleX+0x18>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	ee07 3a90 	vmov	s15, r3
 80016ac:	eeb0 0a67 	vmov.f32	s0, s15
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	2000024c 	.word	0x2000024c

080016bc <MPU6050_getAngleY>:
float MPU6050_getAngleY()	{return angleY;};
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
 80016c0:	4b04      	ldr	r3, [pc, #16]	; (80016d4 <MPU6050_getAngleY+0x18>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	ee07 3a90 	vmov	s15, r3
 80016c8:	eeb0 0a67 	vmov.f32	s0, s15
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	20000268 	.word	0x20000268

080016d8 <MPU6050_getAccAngleX>:
float MPU6050_getAngleZ()	{return angleZ;};

//void calcGyroOffsets();

float MPU6050_getAccAngleX(){return angleAccX;};
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
 80016dc:	4b04      	ldr	r3, [pc, #16]	; (80016f0 <MPU6050_getAccAngleX+0x18>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	ee07 3a90 	vmov	s15, r3
 80016e4:	eeb0 0a67 	vmov.f32	s0, s15
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	20000260 	.word	0x20000260

080016f4 <MPU6050_getAccAngleY>:
float MPU6050_getAccAngleY(){return angleAccY;};
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	4b04      	ldr	r3, [pc, #16]	; (800170c <MPU6050_getAccAngleY+0x18>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	ee07 3a90 	vmov	s15, r3
 8001700:	eeb0 0a67 	vmov.f32	s0, s15
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	20000250 	.word	0x20000250

08001710 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001716:	f004 fe3f 	bl	8006398 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800171a:	f000 f935 	bl	8001988 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800171e:	f000 fa7f 	bl	8001c20 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001722:	f000 fa53 	bl	8001bcc <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001726:	f000 fa01 	bl	8001b2c <MX_TIM1_Init>
  MX_I2C1_Init();
 800172a:	f000 f99b 	bl	8001a64 <MX_I2C1_Init>
  MX_SPI2_Init();
 800172e:	f000 f9c7 	bl	8001ac0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  tft_gpio_init(); 				// Inicializa os GPIOs conectados ao LCD;
 8001732:	f004 fd95 	bl	8006260 <tft_gpio_init>
  HAL_TIM_Base_Start(&htim1); 	// Inicializa o Timer1;
 8001736:	4888      	ldr	r0, [pc, #544]	; (8001958 <main+0x248>)
 8001738:	f006 ff4a 	bl	80085d0 <HAL_TIM_Base_Start>
  uint16_t ID = tft_readID(); 	// Lê o ID do LCD, que é "37697";
 800173c:	f002 f994 	bl	8003a68 <readID>
 8001740:	4603      	mov	r3, r0
 8001742:	80fb      	strh	r3, [r7, #6]
  tft_init(ID);					// Inicializa o LCD de acordo com o ID;
 8001744:	88fb      	ldrh	r3, [r7, #6]
 8001746:	4618      	mov	r0, r3
 8001748:	f001 fe08 	bl	800335c <tft_init>
  setRotation(1);				// Coloca e rotação como PAISAGEM;
 800174c:	2001      	movs	r0, #1
 800174e:	f003 f8bb 	bl	80048c8 <setRotation>
  HAL_Delay(100);				// Delay para evitar aquele erro de não preencher a tela corretamente;
 8001752:	2064      	movs	r0, #100	; 0x64
 8001754:	f004 fe92 	bl	800647c <HAL_Delay>
  fillScreen(BLACK);			// Nome já diz tudo;
 8001758:	2000      	movs	r0, #0
 800175a:	f003 fe8b 	bl	8005474 <fillScreen>

   //Inicia o MPU6050
   MPU6050_init(&hi2c1);
 800175e:	487f      	ldr	r0, [pc, #508]	; (800195c <main+0x24c>)
 8001760:	f7ff fc0e 	bl	8000f80 <MPU6050_init>
   printnewtstr(50, YELLOW, &mono9x7, 1, (uint8_t *)"Do not move MPU6050");
 8001764:	4b7e      	ldr	r3, [pc, #504]	; (8001960 <main+0x250>)
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	2301      	movs	r3, #1
 800176a:	4a7e      	ldr	r2, [pc, #504]	; (8001964 <main+0x254>)
 800176c:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 8001770:	2032      	movs	r0, #50	; 0x32
 8001772:	f004 fd0f 	bl	8006194 <printnewtstr>
   MPU6050_calcGyroOffsets();
 8001776:	f7ff fc9f 	bl	80010b8 <MPU6050_calcGyroOffsets>
   HAL_Delay(1000);
 800177a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800177e:	f004 fe7d 	bl	800647c <HAL_Delay>
   printnewtstr(50, BLACK, &mono9x7, 1, (uint8_t *)"Do not move MPU6050");
 8001782:	4b77      	ldr	r3, [pc, #476]	; (8001960 <main+0x250>)
 8001784:	9300      	str	r3, [sp, #0]
 8001786:	2301      	movs	r3, #1
 8001788:	4a76      	ldr	r2, [pc, #472]	; (8001964 <main+0x254>)
 800178a:	2100      	movs	r1, #0
 800178c:	2032      	movs	r0, #50	; 0x32
 800178e:	f004 fd01 	bl	8006194 <printnewtstr>
   printnewtstr(120, GREEN, &mono9x7, 1, (uint8_t *)"Done!");
 8001792:	4b75      	ldr	r3, [pc, #468]	; (8001968 <main+0x258>)
 8001794:	9300      	str	r3, [sp, #0]
 8001796:	2301      	movs	r3, #1
 8001798:	4a72      	ldr	r2, [pc, #456]	; (8001964 <main+0x254>)
 800179a:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 800179e:	2078      	movs	r0, #120	; 0x78
 80017a0:	f004 fcf8 	bl	8006194 <printnewtstr>

   //Desenha o dois círculos do nivel bolha
    fillCircle(xOutCirc, yOutCirc, OutRad, WHITE);
 80017a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017a8:	226e      	movs	r2, #110	; 0x6e
 80017aa:	2178      	movs	r1, #120	; 0x78
 80017ac:	20a0      	movs	r0, #160	; 0xa0
 80017ae:	f004 f841 	bl	8005834 <fillCircle>
    fillCircle(xInCirc, yInCirc, InRad , RED);
 80017b2:	4b6e      	ldr	r3, [pc, #440]	; (800196c <main+0x25c>)
 80017b4:	881b      	ldrh	r3, [r3, #0]
 80017b6:	b218      	sxth	r0, r3
 80017b8:	4b6d      	ldr	r3, [pc, #436]	; (8001970 <main+0x260>)
 80017ba:	881b      	ldrh	r3, [r3, #0]
 80017bc:	b219      	sxth	r1, r3
 80017be:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80017c2:	220a      	movs	r2, #10
 80017c4:	f004 f836 	bl	8005834 <fillCircle>
    drawCircle(160, 120, (InRad+10) , BLACK);
 80017c8:	2300      	movs	r3, #0
 80017ca:	2214      	movs	r2, #20
 80017cc:	2178      	movs	r1, #120	; 0x78
 80017ce:	20a0      	movs	r0, #160	; 0xa0
 80017d0:	f003 ff44 	bl	800565c <drawCircle>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	   if (	(PosX != xInCirc) || (PosY != yInCirc) )	// Caso a posição em X ou em Y tenha sido atualizada, desenha a bolha na nova posição.
 80017d4:	4b67      	ldr	r3, [pc, #412]	; (8001974 <main+0x264>)
 80017d6:	881a      	ldrh	r2, [r3, #0]
 80017d8:	4b64      	ldr	r3, [pc, #400]	; (800196c <main+0x25c>)
 80017da:	881b      	ldrh	r3, [r3, #0]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d105      	bne.n	80017ec <main+0xdc>
 80017e0:	4b65      	ldr	r3, [pc, #404]	; (8001978 <main+0x268>)
 80017e2:	881a      	ldrh	r2, [r3, #0]
 80017e4:	4b62      	ldr	r3, [pc, #392]	; (8001970 <main+0x260>)
 80017e6:	881b      	ldrh	r3, [r3, #0]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d026      	beq.n	800183a <main+0x12a>
	  {
		  fillCircle(PosX, PosY, InRad , WHITE);
 80017ec:	4b61      	ldr	r3, [pc, #388]	; (8001974 <main+0x264>)
 80017ee:	881b      	ldrh	r3, [r3, #0]
 80017f0:	b218      	sxth	r0, r3
 80017f2:	4b61      	ldr	r3, [pc, #388]	; (8001978 <main+0x268>)
 80017f4:	881b      	ldrh	r3, [r3, #0]
 80017f6:	b219      	sxth	r1, r3
 80017f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017fc:	220a      	movs	r2, #10
 80017fe:	f004 f819 	bl	8005834 <fillCircle>
		  fillCircle(xInCirc, yInCirc, InRad , RED);
 8001802:	4b5a      	ldr	r3, [pc, #360]	; (800196c <main+0x25c>)
 8001804:	881b      	ldrh	r3, [r3, #0]
 8001806:	b218      	sxth	r0, r3
 8001808:	4b59      	ldr	r3, [pc, #356]	; (8001970 <main+0x260>)
 800180a:	881b      	ldrh	r3, [r3, #0]
 800180c:	b219      	sxth	r1, r3
 800180e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001812:	220a      	movs	r2, #10
 8001814:	f004 f80e 	bl	8005834 <fillCircle>
		  drawCircle(160, 120, (InRad+10) , BLACK);
 8001818:	2300      	movs	r3, #0
 800181a:	2214      	movs	r2, #20
 800181c:	2178      	movs	r1, #120	; 0x78
 800181e:	20a0      	movs	r0, #160	; 0xa0
 8001820:	f003 ff1c 	bl	800565c <drawCircle>

		  PosX = xInCirc;
 8001824:	4b51      	ldr	r3, [pc, #324]	; (800196c <main+0x25c>)
 8001826:	881a      	ldrh	r2, [r3, #0]
 8001828:	4b52      	ldr	r3, [pc, #328]	; (8001974 <main+0x264>)
 800182a:	801a      	strh	r2, [r3, #0]
		  PosY = yInCirc;
 800182c:	4b50      	ldr	r3, [pc, #320]	; (8001970 <main+0x260>)
 800182e:	881a      	ldrh	r2, [r3, #0]
 8001830:	4b51      	ldr	r3, [pc, #324]	; (8001978 <main+0x268>)
 8001832:	801a      	strh	r2, [r3, #0]
		  HAL_Delay(10);
 8001834:	200a      	movs	r0, #10
 8001836:	f004 fe21 	bl	800647c <HAL_Delay>
	  }

	   MPU6050_update();
 800183a:	f7ff fcd5 	bl	80011e8 <MPU6050_update>

	   if (   (MPU6050_getAngleX() < (PrevAngleX - Offset) ) && (yInCirc < 200)   )		// Caso o angulo atual seja menor que (ang. anterior - offset)...
 800183e:	f7ff ff2f 	bl	80016a0 <MPU6050_getAngleX>
 8001842:	eef0 6a40 	vmov.f32	s13, s0
 8001846:	4b4d      	ldr	r3, [pc, #308]	; (800197c <main+0x26c>)
 8001848:	ed93 7a00 	vldr	s14, [r3]
 800184c:	4b4c      	ldr	r3, [pc, #304]	; (8001980 <main+0x270>)
 800184e:	edd3 7a00 	vldr	s15, [r3]
 8001852:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001856:	eef4 6ae7 	vcmpe.f32	s13, s15
 800185a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800185e:	d511      	bpl.n	8001884 <main+0x174>
 8001860:	4b43      	ldr	r3, [pc, #268]	; (8001970 <main+0x260>)
 8001862:	881b      	ldrh	r3, [r3, #0]
 8001864:	2bc7      	cmp	r3, #199	; 0xc7
 8001866:	d80d      	bhi.n	8001884 <main+0x174>
	   	   {	yInCirc +=5;	PrevAngleX = MPU6050_getAngleX();	}					//desloca o eixo Y usando a variável respectiva ao eixo Y...
 8001868:	4b41      	ldr	r3, [pc, #260]	; (8001970 <main+0x260>)
 800186a:	881b      	ldrh	r3, [r3, #0]
 800186c:	3305      	adds	r3, #5
 800186e:	b29a      	uxth	r2, r3
 8001870:	4b3f      	ldr	r3, [pc, #252]	; (8001970 <main+0x260>)
 8001872:	801a      	strh	r2, [r3, #0]
 8001874:	f7ff ff14 	bl	80016a0 <MPU6050_getAngleX>
 8001878:	eef0 7a40 	vmov.f32	s15, s0
 800187c:	4b3f      	ldr	r3, [pc, #252]	; (800197c <main+0x26c>)
 800187e:	edc3 7a00 	vstr	s15, [r3]
 8001882:	e021      	b.n	80018c8 <main+0x1b8>

	   else if (   (MPU6050_getAngleX() > (PrevAngleX + Offset) ) && (yInCirc > 60)   ) //Senão, caso o angulo atual seja maior que (ang. anterior + offset)...
 8001884:	f7ff ff0c 	bl	80016a0 <MPU6050_getAngleX>
 8001888:	eef0 6a40 	vmov.f32	s13, s0
 800188c:	4b3b      	ldr	r3, [pc, #236]	; (800197c <main+0x26c>)
 800188e:	ed93 7a00 	vldr	s14, [r3]
 8001892:	4b3b      	ldr	r3, [pc, #236]	; (8001980 <main+0x270>)
 8001894:	edd3 7a00 	vldr	s15, [r3]
 8001898:	ee77 7a27 	vadd.f32	s15, s14, s15
 800189c:	eef4 6ae7 	vcmpe.f32	s13, s15
 80018a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018a4:	dd10      	ble.n	80018c8 <main+0x1b8>
 80018a6:	4b32      	ldr	r3, [pc, #200]	; (8001970 <main+0x260>)
 80018a8:	881b      	ldrh	r3, [r3, #0]
 80018aa:	2b3c      	cmp	r3, #60	; 0x3c
 80018ac:	d90c      	bls.n	80018c8 <main+0x1b8>
	   {	yInCirc -=5;	PrevAngleX = MPU6050_getAngleX();	}						//desloca o eixo Y usando a variável respectiva ao eixo Y...
 80018ae:	4b30      	ldr	r3, [pc, #192]	; (8001970 <main+0x260>)
 80018b0:	881b      	ldrh	r3, [r3, #0]
 80018b2:	3b05      	subs	r3, #5
 80018b4:	b29a      	uxth	r2, r3
 80018b6:	4b2e      	ldr	r3, [pc, #184]	; (8001970 <main+0x260>)
 80018b8:	801a      	strh	r2, [r3, #0]
 80018ba:	f7ff fef1 	bl	80016a0 <MPU6050_getAngleX>
 80018be:	eef0 7a40 	vmov.f32	s15, s0
 80018c2:	4b2e      	ldr	r3, [pc, #184]	; (800197c <main+0x26c>)
 80018c4:	edc3 7a00 	vstr	s15, [r3]


	   if (   ((MPU6050_getAngleY() < (PrevAngleY - Offset)) && (xInCirc < 230)   ) )	// Caso o angulo atual seja menor que o (ang. anterior - offset)...
 80018c8:	f7ff fef8 	bl	80016bc <MPU6050_getAngleY>
 80018cc:	eef0 6a40 	vmov.f32	s13, s0
 80018d0:	4b2c      	ldr	r3, [pc, #176]	; (8001984 <main+0x274>)
 80018d2:	ed93 7a00 	vldr	s14, [r3]
 80018d6:	4b2a      	ldr	r3, [pc, #168]	; (8001980 <main+0x270>)
 80018d8:	edd3 7a00 	vldr	s15, [r3]
 80018dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018e0:	eef4 6ae7 	vcmpe.f32	s13, s15
 80018e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e8:	d511      	bpl.n	800190e <main+0x1fe>
 80018ea:	4b20      	ldr	r3, [pc, #128]	; (800196c <main+0x25c>)
 80018ec:	881b      	ldrh	r3, [r3, #0]
 80018ee:	2be5      	cmp	r3, #229	; 0xe5
 80018f0:	d80d      	bhi.n	800190e <main+0x1fe>
	   	   {	xInCirc +=5;	PrevAngleY = MPU6050_getAngleY();	}					//desloca o eixo X  usando a variável respectiva ao eixo X...
 80018f2:	4b1e      	ldr	r3, [pc, #120]	; (800196c <main+0x25c>)
 80018f4:	881b      	ldrh	r3, [r3, #0]
 80018f6:	3305      	adds	r3, #5
 80018f8:	b29a      	uxth	r2, r3
 80018fa:	4b1c      	ldr	r3, [pc, #112]	; (800196c <main+0x25c>)
 80018fc:	801a      	strh	r2, [r3, #0]
 80018fe:	f7ff fedd 	bl	80016bc <MPU6050_getAngleY>
 8001902:	eef0 7a40 	vmov.f32	s15, s0
 8001906:	4b1f      	ldr	r3, [pc, #124]	; (8001984 <main+0x274>)
 8001908:	edc3 7a00 	vstr	s15, [r3]
 800190c:	e022      	b.n	8001954 <main+0x244>

	   else if (   ((MPU6050_getAngleY() > (PrevAngleY + Offset))) && (xInCirc > 80)   ) //Senão, caso o angulo atual seja maior que (ang. anterior + offset)...
 800190e:	f7ff fed5 	bl	80016bc <MPU6050_getAngleY>
 8001912:	eef0 6a40 	vmov.f32	s13, s0
 8001916:	4b1b      	ldr	r3, [pc, #108]	; (8001984 <main+0x274>)
 8001918:	ed93 7a00 	vldr	s14, [r3]
 800191c:	4b18      	ldr	r3, [pc, #96]	; (8001980 <main+0x270>)
 800191e:	edd3 7a00 	vldr	s15, [r3]
 8001922:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001926:	eef4 6ae7 	vcmpe.f32	s13, s15
 800192a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800192e:	dd11      	ble.n	8001954 <main+0x244>
 8001930:	4b0e      	ldr	r3, [pc, #56]	; (800196c <main+0x25c>)
 8001932:	881b      	ldrh	r3, [r3, #0]
 8001934:	2b50      	cmp	r3, #80	; 0x50
 8001936:	f67f af4d 	bls.w	80017d4 <main+0xc4>
	   	   {	xInCirc -=5;	PrevAngleY = MPU6050_getAngleY();	}					 //desloca o eixo X  usando a variável respectiva ao eixo X...
 800193a:	4b0c      	ldr	r3, [pc, #48]	; (800196c <main+0x25c>)
 800193c:	881b      	ldrh	r3, [r3, #0]
 800193e:	3b05      	subs	r3, #5
 8001940:	b29a      	uxth	r2, r3
 8001942:	4b0a      	ldr	r3, [pc, #40]	; (800196c <main+0x25c>)
 8001944:	801a      	strh	r2, [r3, #0]
 8001946:	f7ff feb9 	bl	80016bc <MPU6050_getAngleY>
 800194a:	eef0 7a40 	vmov.f32	s15, s0
 800194e:	4b0d      	ldr	r3, [pc, #52]	; (8001984 <main+0x274>)
 8001950:	edc3 7a00 	vstr	s15, [r3]
	   if (	(PosX != xInCirc) || (PosY != yInCirc) )	// Caso a posição em X ou em Y tenha sido atualizada, desenha a bolha na nova posição.
 8001954:	e73e      	b.n	80017d4 <main+0xc4>
 8001956:	bf00      	nop
 8001958:	20000330 	.word	0x20000330
 800195c:	200002d4 	.word	0x200002d4
 8001960:	0800c2a8 	.word	0x0800c2a8
 8001964:	0800c90c 	.word	0x0800c90c
 8001968:	0800c2bc 	.word	0x0800c2bc
 800196c:	20000000 	.word	0x20000000
 8001970:	20000002 	.word	0x20000002
 8001974:	20000004 	.word	0x20000004
 8001978:	20000006 	.word	0x20000006
 800197c:	20000328 	.word	0x20000328
 8001980:	20000008 	.word	0x20000008
 8001984:	2000032c 	.word	0x2000032c

08001988 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b094      	sub	sp, #80	; 0x50
 800198c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800198e:	f107 031c 	add.w	r3, r7, #28
 8001992:	2234      	movs	r2, #52	; 0x34
 8001994:	2100      	movs	r1, #0
 8001996:	4618      	mov	r0, r3
 8001998:	f007 fc40 	bl	800921c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800199c:	f107 0308 	add.w	r3, r7, #8
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	605a      	str	r2, [r3, #4]
 80019a6:	609a      	str	r2, [r3, #8]
 80019a8:	60da      	str	r2, [r3, #12]
 80019aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ac:	2300      	movs	r3, #0
 80019ae:	607b      	str	r3, [r7, #4]
 80019b0:	4b2a      	ldr	r3, [pc, #168]	; (8001a5c <SystemClock_Config+0xd4>)
 80019b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b4:	4a29      	ldr	r2, [pc, #164]	; (8001a5c <SystemClock_Config+0xd4>)
 80019b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ba:	6413      	str	r3, [r2, #64]	; 0x40
 80019bc:	4b27      	ldr	r3, [pc, #156]	; (8001a5c <SystemClock_Config+0xd4>)
 80019be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c4:	607b      	str	r3, [r7, #4]
 80019c6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80019c8:	2300      	movs	r3, #0
 80019ca:	603b      	str	r3, [r7, #0]
 80019cc:	4b24      	ldr	r3, [pc, #144]	; (8001a60 <SystemClock_Config+0xd8>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80019d4:	4a22      	ldr	r2, [pc, #136]	; (8001a60 <SystemClock_Config+0xd8>)
 80019d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019da:	6013      	str	r3, [r2, #0]
 80019dc:	4b20      	ldr	r3, [pc, #128]	; (8001a60 <SystemClock_Config+0xd8>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019e4:	603b      	str	r3, [r7, #0]
 80019e6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019e8:	2302      	movs	r3, #2
 80019ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019ec:	2301      	movs	r3, #1
 80019ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019f0:	2310      	movs	r3, #16
 80019f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019f4:	2302      	movs	r3, #2
 80019f6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019f8:	2300      	movs	r3, #0
 80019fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80019fc:	2310      	movs	r3, #16
 80019fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001a00:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001a04:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001a06:	2304      	movs	r3, #4
 8001a08:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001a0e:	2302      	movs	r3, #2
 8001a10:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a12:	f107 031c 	add.w	r3, r7, #28
 8001a16:	4618      	mov	r0, r3
 8001a18:	f006 fa64 	bl	8007ee4 <HAL_RCC_OscConfig>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001a22:	f000 f97d 	bl	8001d20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a26:	230f      	movs	r3, #15
 8001a28:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a3c:	f107 0308 	add.w	r3, r7, #8
 8001a40:	2102      	movs	r1, #2
 8001a42:	4618      	mov	r0, r3
 8001a44:	f005 ff82 	bl	800794c <HAL_RCC_ClockConfig>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001a4e:	f000 f967 	bl	8001d20 <Error_Handler>
  }
}
 8001a52:	bf00      	nop
 8001a54:	3750      	adds	r7, #80	; 0x50
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	40007000 	.word	0x40007000

08001a64 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a68:	4b12      	ldr	r3, [pc, #72]	; (8001ab4 <MX_I2C1_Init+0x50>)
 8001a6a:	4a13      	ldr	r2, [pc, #76]	; (8001ab8 <MX_I2C1_Init+0x54>)
 8001a6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001a6e:	4b11      	ldr	r3, [pc, #68]	; (8001ab4 <MX_I2C1_Init+0x50>)
 8001a70:	4a12      	ldr	r2, [pc, #72]	; (8001abc <MX_I2C1_Init+0x58>)
 8001a72:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a74:	4b0f      	ldr	r3, [pc, #60]	; (8001ab4 <MX_I2C1_Init+0x50>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a7a:	4b0e      	ldr	r3, [pc, #56]	; (8001ab4 <MX_I2C1_Init+0x50>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a80:	4b0c      	ldr	r3, [pc, #48]	; (8001ab4 <MX_I2C1_Init+0x50>)
 8001a82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a86:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a88:	4b0a      	ldr	r3, [pc, #40]	; (8001ab4 <MX_I2C1_Init+0x50>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a8e:	4b09      	ldr	r3, [pc, #36]	; (8001ab4 <MX_I2C1_Init+0x50>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a94:	4b07      	ldr	r3, [pc, #28]	; (8001ab4 <MX_I2C1_Init+0x50>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a9a:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <MX_I2C1_Init+0x50>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001aa0:	4804      	ldr	r0, [pc, #16]	; (8001ab4 <MX_I2C1_Init+0x50>)
 8001aa2:	f004 ffbd 	bl	8006a20 <HAL_I2C_Init>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001aac:	f000 f938 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ab0:	bf00      	nop
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	200002d4 	.word	0x200002d4
 8001ab8:	40005400 	.word	0x40005400
 8001abc:	00061a80 	.word	0x00061a80

08001ac0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001ac4:	4b17      	ldr	r3, [pc, #92]	; (8001b24 <MX_SPI2_Init+0x64>)
 8001ac6:	4a18      	ldr	r2, [pc, #96]	; (8001b28 <MX_SPI2_Init+0x68>)
 8001ac8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001aca:	4b16      	ldr	r3, [pc, #88]	; (8001b24 <MX_SPI2_Init+0x64>)
 8001acc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ad0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001ad2:	4b14      	ldr	r3, [pc, #80]	; (8001b24 <MX_SPI2_Init+0x64>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ad8:	4b12      	ldr	r3, [pc, #72]	; (8001b24 <MX_SPI2_Init+0x64>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ade:	4b11      	ldr	r3, [pc, #68]	; (8001b24 <MX_SPI2_Init+0x64>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ae4:	4b0f      	ldr	r3, [pc, #60]	; (8001b24 <MX_SPI2_Init+0x64>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001aea:	4b0e      	ldr	r3, [pc, #56]	; (8001b24 <MX_SPI2_Init+0x64>)
 8001aec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001af0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001af2:	4b0c      	ldr	r3, [pc, #48]	; (8001b24 <MX_SPI2_Init+0x64>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001af8:	4b0a      	ldr	r3, [pc, #40]	; (8001b24 <MX_SPI2_Init+0x64>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001afe:	4b09      	ldr	r3, [pc, #36]	; (8001b24 <MX_SPI2_Init+0x64>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b04:	4b07      	ldr	r3, [pc, #28]	; (8001b24 <MX_SPI2_Init+0x64>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001b0a:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <MX_SPI2_Init+0x64>)
 8001b0c:	220a      	movs	r2, #10
 8001b0e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001b10:	4804      	ldr	r0, [pc, #16]	; (8001b24 <MX_SPI2_Init+0x64>)
 8001b12:	f006 fc85 	bl	8008420 <HAL_SPI_Init>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001b1c:	f000 f900 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001b20:	bf00      	nop
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	20000278 	.word	0x20000278
 8001b28:	40003800 	.word	0x40003800

08001b2c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b32:	f107 0308 	add.w	r3, r7, #8
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	605a      	str	r2, [r3, #4]
 8001b3c:	609a      	str	r2, [r3, #8]
 8001b3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b40:	463b      	mov	r3, r7
 8001b42:	2200      	movs	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b48:	4b1e      	ldr	r3, [pc, #120]	; (8001bc4 <MX_TIM1_Init+0x98>)
 8001b4a:	4a1f      	ldr	r2, [pc, #124]	; (8001bc8 <MX_TIM1_Init+0x9c>)
 8001b4c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8001b4e:	4b1d      	ldr	r3, [pc, #116]	; (8001bc4 <MX_TIM1_Init+0x98>)
 8001b50:	2253      	movs	r2, #83	; 0x53
 8001b52:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b54:	4b1b      	ldr	r3, [pc, #108]	; (8001bc4 <MX_TIM1_Init+0x98>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535-1;
 8001b5a:	4b1a      	ldr	r3, [pc, #104]	; (8001bc4 <MX_TIM1_Init+0x98>)
 8001b5c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001b60:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b62:	4b18      	ldr	r3, [pc, #96]	; (8001bc4 <MX_TIM1_Init+0x98>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b68:	4b16      	ldr	r3, [pc, #88]	; (8001bc4 <MX_TIM1_Init+0x98>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b6e:	4b15      	ldr	r3, [pc, #84]	; (8001bc4 <MX_TIM1_Init+0x98>)
 8001b70:	2280      	movs	r2, #128	; 0x80
 8001b72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b74:	4813      	ldr	r0, [pc, #76]	; (8001bc4 <MX_TIM1_Init+0x98>)
 8001b76:	f006 fcdc 	bl	8008532 <HAL_TIM_Base_Init>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001b80:	f000 f8ce 	bl	8001d20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b88:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b8a:	f107 0308 	add.w	r3, r7, #8
 8001b8e:	4619      	mov	r1, r3
 8001b90:	480c      	ldr	r0, [pc, #48]	; (8001bc4 <MX_TIM1_Init+0x98>)
 8001b92:	f006 fd85 	bl	80086a0 <HAL_TIM_ConfigClockSource>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001b9c:	f000 f8c0 	bl	8001d20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ba8:	463b      	mov	r3, r7
 8001baa:	4619      	mov	r1, r3
 8001bac:	4805      	ldr	r0, [pc, #20]	; (8001bc4 <MX_TIM1_Init+0x98>)
 8001bae:	f006 ff79 	bl	8008aa4 <HAL_TIMEx_MasterConfigSynchronization>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001bb8:	f000 f8b2 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001bbc:	bf00      	nop
 8001bbe:	3718      	adds	r7, #24
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	20000330 	.word	0x20000330
 8001bc8:	40010000 	.word	0x40010000

08001bcc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bd0:	4b11      	ldr	r3, [pc, #68]	; (8001c18 <MX_USART2_UART_Init+0x4c>)
 8001bd2:	4a12      	ldr	r2, [pc, #72]	; (8001c1c <MX_USART2_UART_Init+0x50>)
 8001bd4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bd6:	4b10      	ldr	r3, [pc, #64]	; (8001c18 <MX_USART2_UART_Init+0x4c>)
 8001bd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bdc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bde:	4b0e      	ldr	r3, [pc, #56]	; (8001c18 <MX_USART2_UART_Init+0x4c>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001be4:	4b0c      	ldr	r3, [pc, #48]	; (8001c18 <MX_USART2_UART_Init+0x4c>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bea:	4b0b      	ldr	r3, [pc, #44]	; (8001c18 <MX_USART2_UART_Init+0x4c>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bf0:	4b09      	ldr	r3, [pc, #36]	; (8001c18 <MX_USART2_UART_Init+0x4c>)
 8001bf2:	220c      	movs	r2, #12
 8001bf4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bf6:	4b08      	ldr	r3, [pc, #32]	; (8001c18 <MX_USART2_UART_Init+0x4c>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bfc:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <MX_USART2_UART_Init+0x4c>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c02:	4805      	ldr	r0, [pc, #20]	; (8001c18 <MX_USART2_UART_Init+0x4c>)
 8001c04:	f006 ffca 	bl	8008b9c <HAL_UART_Init>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c0e:	f000 f887 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	20000378 	.word	0x20000378
 8001c1c:	40004400 	.word	0x40004400

08001c20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b08a      	sub	sp, #40	; 0x28
 8001c24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c26:	f107 0314 	add.w	r3, r7, #20
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	605a      	str	r2, [r3, #4]
 8001c30:	609a      	str	r2, [r3, #8]
 8001c32:	60da      	str	r2, [r3, #12]
 8001c34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c36:	2300      	movs	r3, #0
 8001c38:	613b      	str	r3, [r7, #16]
 8001c3a:	4b2d      	ldr	r3, [pc, #180]	; (8001cf0 <MX_GPIO_Init+0xd0>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3e:	4a2c      	ldr	r2, [pc, #176]	; (8001cf0 <MX_GPIO_Init+0xd0>)
 8001c40:	f043 0304 	orr.w	r3, r3, #4
 8001c44:	6313      	str	r3, [r2, #48]	; 0x30
 8001c46:	4b2a      	ldr	r3, [pc, #168]	; (8001cf0 <MX_GPIO_Init+0xd0>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	f003 0304 	and.w	r3, r3, #4
 8001c4e:	613b      	str	r3, [r7, #16]
 8001c50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c52:	2300      	movs	r3, #0
 8001c54:	60fb      	str	r3, [r7, #12]
 8001c56:	4b26      	ldr	r3, [pc, #152]	; (8001cf0 <MX_GPIO_Init+0xd0>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5a:	4a25      	ldr	r2, [pc, #148]	; (8001cf0 <MX_GPIO_Init+0xd0>)
 8001c5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c60:	6313      	str	r3, [r2, #48]	; 0x30
 8001c62:	4b23      	ldr	r3, [pc, #140]	; (8001cf0 <MX_GPIO_Init+0xd0>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c6a:	60fb      	str	r3, [r7, #12]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c6e:	2300      	movs	r3, #0
 8001c70:	60bb      	str	r3, [r7, #8]
 8001c72:	4b1f      	ldr	r3, [pc, #124]	; (8001cf0 <MX_GPIO_Init+0xd0>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c76:	4a1e      	ldr	r2, [pc, #120]	; (8001cf0 <MX_GPIO_Init+0xd0>)
 8001c78:	f043 0301 	orr.w	r3, r3, #1
 8001c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c7e:	4b1c      	ldr	r3, [pc, #112]	; (8001cf0 <MX_GPIO_Init+0xd0>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	60bb      	str	r3, [r7, #8]
 8001c88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	607b      	str	r3, [r7, #4]
 8001c8e:	4b18      	ldr	r3, [pc, #96]	; (8001cf0 <MX_GPIO_Init+0xd0>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	4a17      	ldr	r2, [pc, #92]	; (8001cf0 <MX_GPIO_Init+0xd0>)
 8001c94:	f043 0302 	orr.w	r3, r3, #2
 8001c98:	6313      	str	r3, [r2, #48]	; 0x30
 8001c9a:	4b15      	ldr	r3, [pc, #84]	; (8001cf0 <MX_GPIO_Init+0xd0>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	607b      	str	r3, [r7, #4]
 8001ca4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	2120      	movs	r1, #32
 8001caa:	4812      	ldr	r0, [pc, #72]	; (8001cf4 <MX_GPIO_Init+0xd4>)
 8001cac:	f004 fe84 	bl	80069b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001cb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001cb6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001cba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001cc0:	f107 0314 	add.w	r3, r7, #20
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	480c      	ldr	r0, [pc, #48]	; (8001cf8 <MX_GPIO_Init+0xd8>)
 8001cc8:	f004 fce2 	bl	8006690 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001ccc:	2320      	movs	r3, #32
 8001cce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001cdc:	f107 0314 	add.w	r3, r7, #20
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4804      	ldr	r0, [pc, #16]	; (8001cf4 <MX_GPIO_Init+0xd4>)
 8001ce4:	f004 fcd4 	bl	8006690 <HAL_GPIO_Init>

}
 8001ce8:	bf00      	nop
 8001cea:	3728      	adds	r7, #40	; 0x28
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	40020000 	.word	0x40020000
 8001cf8:	40020800 	.word	0x40020800

08001cfc <__io_putchar>:
* @brief Retargets the C library printf function to the USART.
* @param None
* @retval None
*/
PUTCHAR_PROTOTYPE
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
/* Place your implementation of fputc here */
/* e.g. write a character to the USART2 and Loop until the end of transmission */
HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001d04:	1d39      	adds	r1, r7, #4
 8001d06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	4803      	ldr	r0, [pc, #12]	; (8001d1c <__io_putchar+0x20>)
 8001d0e:	f006 ff92 	bl	8008c36 <HAL_UART_Transmit>
return ch;
 8001d12:	687b      	ldr	r3, [r7, #4]
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	20000378 	.word	0x20000378

08001d20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d24:	b672      	cpsid	i
}
 8001d26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d28:	e7fe      	b.n	8001d28 <Error_Handler+0x8>
	...

08001d2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d32:	2300      	movs	r3, #0
 8001d34:	607b      	str	r3, [r7, #4]
 8001d36:	4b10      	ldr	r3, [pc, #64]	; (8001d78 <HAL_MspInit+0x4c>)
 8001d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3a:	4a0f      	ldr	r2, [pc, #60]	; (8001d78 <HAL_MspInit+0x4c>)
 8001d3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d40:	6453      	str	r3, [r2, #68]	; 0x44
 8001d42:	4b0d      	ldr	r3, [pc, #52]	; (8001d78 <HAL_MspInit+0x4c>)
 8001d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d4a:	607b      	str	r3, [r7, #4]
 8001d4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d4e:	2300      	movs	r3, #0
 8001d50:	603b      	str	r3, [r7, #0]
 8001d52:	4b09      	ldr	r3, [pc, #36]	; (8001d78 <HAL_MspInit+0x4c>)
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	4a08      	ldr	r2, [pc, #32]	; (8001d78 <HAL_MspInit+0x4c>)
 8001d58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d5e:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <HAL_MspInit+0x4c>)
 8001d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d66:	603b      	str	r3, [r7, #0]
 8001d68:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d6a:	2007      	movs	r0, #7
 8001d6c:	f004 fc5c 	bl	8006628 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d70:	bf00      	nop
 8001d72:	3708      	adds	r7, #8
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40023800 	.word	0x40023800

08001d7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b08a      	sub	sp, #40	; 0x28
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d84:	f107 0314 	add.w	r3, r7, #20
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	605a      	str	r2, [r3, #4]
 8001d8e:	609a      	str	r2, [r3, #8]
 8001d90:	60da      	str	r2, [r3, #12]
 8001d92:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a19      	ldr	r2, [pc, #100]	; (8001e00 <HAL_I2C_MspInit+0x84>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d12c      	bne.n	8001df8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d9e:	2300      	movs	r3, #0
 8001da0:	613b      	str	r3, [r7, #16]
 8001da2:	4b18      	ldr	r3, [pc, #96]	; (8001e04 <HAL_I2C_MspInit+0x88>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da6:	4a17      	ldr	r2, [pc, #92]	; (8001e04 <HAL_I2C_MspInit+0x88>)
 8001da8:	f043 0302 	orr.w	r3, r3, #2
 8001dac:	6313      	str	r3, [r2, #48]	; 0x30
 8001dae:	4b15      	ldr	r3, [pc, #84]	; (8001e04 <HAL_I2C_MspInit+0x88>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	613b      	str	r3, [r7, #16]
 8001db8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001dba:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001dbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dc0:	2312      	movs	r3, #18
 8001dc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001dcc:	2304      	movs	r3, #4
 8001dce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dd0:	f107 0314 	add.w	r3, r7, #20
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	480c      	ldr	r0, [pc, #48]	; (8001e08 <HAL_I2C_MspInit+0x8c>)
 8001dd8:	f004 fc5a 	bl	8006690 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ddc:	2300      	movs	r3, #0
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	4b08      	ldr	r3, [pc, #32]	; (8001e04 <HAL_I2C_MspInit+0x88>)
 8001de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de4:	4a07      	ldr	r2, [pc, #28]	; (8001e04 <HAL_I2C_MspInit+0x88>)
 8001de6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001dea:	6413      	str	r3, [r2, #64]	; 0x40
 8001dec:	4b05      	ldr	r3, [pc, #20]	; (8001e04 <HAL_I2C_MspInit+0x88>)
 8001dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001df8:	bf00      	nop
 8001dfa:	3728      	adds	r7, #40	; 0x28
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	40005400 	.word	0x40005400
 8001e04:	40023800 	.word	0x40023800
 8001e08:	40020400 	.word	0x40020400

08001e0c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b08a      	sub	sp, #40	; 0x28
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e14:	f107 0314 	add.w	r3, r7, #20
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	605a      	str	r2, [r3, #4]
 8001e1e:	609a      	str	r2, [r3, #8]
 8001e20:	60da      	str	r2, [r3, #12]
 8001e22:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a30      	ldr	r2, [pc, #192]	; (8001eec <HAL_SPI_MspInit+0xe0>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d15a      	bne.n	8001ee4 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001e2e:	2300      	movs	r3, #0
 8001e30:	613b      	str	r3, [r7, #16]
 8001e32:	4b2f      	ldr	r3, [pc, #188]	; (8001ef0 <HAL_SPI_MspInit+0xe4>)
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	4a2e      	ldr	r2, [pc, #184]	; (8001ef0 <HAL_SPI_MspInit+0xe4>)
 8001e38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e3e:	4b2c      	ldr	r3, [pc, #176]	; (8001ef0 <HAL_SPI_MspInit+0xe4>)
 8001e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e46:	613b      	str	r3, [r7, #16]
 8001e48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60fb      	str	r3, [r7, #12]
 8001e4e:	4b28      	ldr	r3, [pc, #160]	; (8001ef0 <HAL_SPI_MspInit+0xe4>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	4a27      	ldr	r2, [pc, #156]	; (8001ef0 <HAL_SPI_MspInit+0xe4>)
 8001e54:	f043 0304 	orr.w	r3, r3, #4
 8001e58:	6313      	str	r3, [r2, #48]	; 0x30
 8001e5a:	4b25      	ldr	r3, [pc, #148]	; (8001ef0 <HAL_SPI_MspInit+0xe4>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5e:	f003 0304 	and.w	r3, r3, #4
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e66:	2300      	movs	r3, #0
 8001e68:	60bb      	str	r3, [r7, #8]
 8001e6a:	4b21      	ldr	r3, [pc, #132]	; (8001ef0 <HAL_SPI_MspInit+0xe4>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	4a20      	ldr	r2, [pc, #128]	; (8001ef0 <HAL_SPI_MspInit+0xe4>)
 8001e70:	f043 0302 	orr.w	r3, r3, #2
 8001e74:	6313      	str	r3, [r2, #48]	; 0x30
 8001e76:	4b1e      	ldr	r3, [pc, #120]	; (8001ef0 <HAL_SPI_MspInit+0xe4>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	60bb      	str	r3, [r7, #8]
 8001e80:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001e82:	2302      	movs	r3, #2
 8001e84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e86:	2302      	movs	r3, #2
 8001e88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8001e92:	2307      	movs	r3, #7
 8001e94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e96:	f107 0314 	add.w	r3, r7, #20
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4815      	ldr	r0, [pc, #84]	; (8001ef4 <HAL_SPI_MspInit+0xe8>)
 8001e9e:	f004 fbf7 	bl	8006690 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ea2:	2304      	movs	r3, #4
 8001ea4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001eb2:	2305      	movs	r3, #5
 8001eb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eb6:	f107 0314 	add.w	r3, r7, #20
 8001eba:	4619      	mov	r1, r3
 8001ebc:	480d      	ldr	r0, [pc, #52]	; (8001ef4 <HAL_SPI_MspInit+0xe8>)
 8001ebe:	f004 fbe7 	bl	8006690 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ec2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ec6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec8:	2302      	movs	r3, #2
 8001eca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ed4:	2305      	movs	r3, #5
 8001ed6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ed8:	f107 0314 	add.w	r3, r7, #20
 8001edc:	4619      	mov	r1, r3
 8001ede:	4806      	ldr	r0, [pc, #24]	; (8001ef8 <HAL_SPI_MspInit+0xec>)
 8001ee0:	f004 fbd6 	bl	8006690 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001ee4:	bf00      	nop
 8001ee6:	3728      	adds	r7, #40	; 0x28
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	40003800 	.word	0x40003800
 8001ef0:	40023800 	.word	0x40023800
 8001ef4:	40020800 	.word	0x40020800
 8001ef8:	40020400 	.word	0x40020400

08001efc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a0b      	ldr	r2, [pc, #44]	; (8001f38 <HAL_TIM_Base_MspInit+0x3c>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d10d      	bne.n	8001f2a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f0e:	2300      	movs	r3, #0
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	4b0a      	ldr	r3, [pc, #40]	; (8001f3c <HAL_TIM_Base_MspInit+0x40>)
 8001f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f16:	4a09      	ldr	r2, [pc, #36]	; (8001f3c <HAL_TIM_Base_MspInit+0x40>)
 8001f18:	f043 0301 	orr.w	r3, r3, #1
 8001f1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f1e:	4b07      	ldr	r3, [pc, #28]	; (8001f3c <HAL_TIM_Base_MspInit+0x40>)
 8001f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	60fb      	str	r3, [r7, #12]
 8001f28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001f2a:	bf00      	nop
 8001f2c:	3714      	adds	r7, #20
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	40010000 	.word	0x40010000
 8001f3c:	40023800 	.word	0x40023800

08001f40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b08a      	sub	sp, #40	; 0x28
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f48:	f107 0314 	add.w	r3, r7, #20
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	605a      	str	r2, [r3, #4]
 8001f52:	609a      	str	r2, [r3, #8]
 8001f54:	60da      	str	r2, [r3, #12]
 8001f56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a19      	ldr	r2, [pc, #100]	; (8001fc4 <HAL_UART_MspInit+0x84>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d12b      	bne.n	8001fba <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f62:	2300      	movs	r3, #0
 8001f64:	613b      	str	r3, [r7, #16]
 8001f66:	4b18      	ldr	r3, [pc, #96]	; (8001fc8 <HAL_UART_MspInit+0x88>)
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	4a17      	ldr	r2, [pc, #92]	; (8001fc8 <HAL_UART_MspInit+0x88>)
 8001f6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f70:	6413      	str	r3, [r2, #64]	; 0x40
 8001f72:	4b15      	ldr	r3, [pc, #84]	; (8001fc8 <HAL_UART_MspInit+0x88>)
 8001f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7a:	613b      	str	r3, [r7, #16]
 8001f7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60fb      	str	r3, [r7, #12]
 8001f82:	4b11      	ldr	r3, [pc, #68]	; (8001fc8 <HAL_UART_MspInit+0x88>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f86:	4a10      	ldr	r2, [pc, #64]	; (8001fc8 <HAL_UART_MspInit+0x88>)
 8001f88:	f043 0301 	orr.w	r3, r3, #1
 8001f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f8e:	4b0e      	ldr	r3, [pc, #56]	; (8001fc8 <HAL_UART_MspInit+0x88>)
 8001f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	60fb      	str	r3, [r7, #12]
 8001f98:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f9a:	230c      	movs	r3, #12
 8001f9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001faa:	2307      	movs	r3, #7
 8001fac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fae:	f107 0314 	add.w	r3, r7, #20
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	4805      	ldr	r0, [pc, #20]	; (8001fcc <HAL_UART_MspInit+0x8c>)
 8001fb6:	f004 fb6b 	bl	8006690 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001fba:	bf00      	nop
 8001fbc:	3728      	adds	r7, #40	; 0x28
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40004400 	.word	0x40004400
 8001fc8:	40023800 	.word	0x40023800
 8001fcc:	40020000 	.word	0x40020000

08001fd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fd4:	e7fe      	b.n	8001fd4 <NMI_Handler+0x4>

08001fd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fda:	e7fe      	b.n	8001fda <HardFault_Handler+0x4>

08001fdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fe0:	e7fe      	b.n	8001fe0 <MemManage_Handler+0x4>

08001fe2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fe6:	e7fe      	b.n	8001fe6 <BusFault_Handler+0x4>

08001fe8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fec:	e7fe      	b.n	8001fec <UsageFault_Handler+0x4>

08001fee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ff2:	bf00      	nop
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002000:	bf00      	nop
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr

0800200a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800200a:	b480      	push	{r7}
 800200c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800200e:	bf00      	nop
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800201c:	f004 fa0e 	bl	800643c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002020:	bf00      	nop
 8002022:	bd80      	pop	{r7, pc}

08002024 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
	return 1;
 8002028:	2301      	movs	r3, #1
}
 800202a:	4618      	mov	r0, r3
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <_kill>:

int _kill(int pid, int sig)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800203e:	f007 f8c3 	bl	80091c8 <__errno>
 8002042:	4603      	mov	r3, r0
 8002044:	2216      	movs	r2, #22
 8002046:	601a      	str	r2, [r3, #0]
	return -1;
 8002048:	f04f 33ff 	mov.w	r3, #4294967295
}
 800204c:	4618      	mov	r0, r3
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <_exit>:

void _exit (int status)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800205c:	f04f 31ff 	mov.w	r1, #4294967295
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f7ff ffe7 	bl	8002034 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002066:	e7fe      	b.n	8002066 <_exit+0x12>

08002068 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002074:	2300      	movs	r3, #0
 8002076:	617b      	str	r3, [r7, #20]
 8002078:	e00a      	b.n	8002090 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800207a:	f3af 8000 	nop.w
 800207e:	4601      	mov	r1, r0
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	1c5a      	adds	r2, r3, #1
 8002084:	60ba      	str	r2, [r7, #8]
 8002086:	b2ca      	uxtb	r2, r1
 8002088:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	3301      	adds	r3, #1
 800208e:	617b      	str	r3, [r7, #20]
 8002090:	697a      	ldr	r2, [r7, #20]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	429a      	cmp	r2, r3
 8002096:	dbf0      	blt.n	800207a <_read+0x12>
	}

return len;
 8002098:	687b      	ldr	r3, [r7, #4]
}
 800209a:	4618      	mov	r0, r3
 800209c:	3718      	adds	r7, #24
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b086      	sub	sp, #24
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	60f8      	str	r0, [r7, #12]
 80020aa:	60b9      	str	r1, [r7, #8]
 80020ac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ae:	2300      	movs	r3, #0
 80020b0:	617b      	str	r3, [r7, #20]
 80020b2:	e009      	b.n	80020c8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	1c5a      	adds	r2, r3, #1
 80020b8:	60ba      	str	r2, [r7, #8]
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	4618      	mov	r0, r3
 80020be:	f7ff fe1d 	bl	8001cfc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	3301      	adds	r3, #1
 80020c6:	617b      	str	r3, [r7, #20]
 80020c8:	697a      	ldr	r2, [r7, #20]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	dbf1      	blt.n	80020b4 <_write+0x12>
	}
	return len;
 80020d0:	687b      	ldr	r3, [r7, #4]
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3718      	adds	r7, #24
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <_close>:

int _close(int file)
{
 80020da:	b480      	push	{r7}
 80020dc:	b083      	sub	sp, #12
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
	return -1;
 80020e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020f2:	b480      	push	{r7}
 80020f4:	b083      	sub	sp, #12
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
 80020fa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002102:	605a      	str	r2, [r3, #4]
	return 0;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr

08002112 <_isatty>:

int _isatty(int file)
{
 8002112:	b480      	push	{r7}
 8002114:	b083      	sub	sp, #12
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
	return 1;
 800211a:	2301      	movs	r3, #1
}
 800211c:	4618      	mov	r0, r3
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002128:	b480      	push	{r7}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	607a      	str	r2, [r7, #4]
	return 0;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3714      	adds	r7, #20
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
	...

08002144 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800214c:	4a14      	ldr	r2, [pc, #80]	; (80021a0 <_sbrk+0x5c>)
 800214e:	4b15      	ldr	r3, [pc, #84]	; (80021a4 <_sbrk+0x60>)
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002158:	4b13      	ldr	r3, [pc, #76]	; (80021a8 <_sbrk+0x64>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d102      	bne.n	8002166 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002160:	4b11      	ldr	r3, [pc, #68]	; (80021a8 <_sbrk+0x64>)
 8002162:	4a12      	ldr	r2, [pc, #72]	; (80021ac <_sbrk+0x68>)
 8002164:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002166:	4b10      	ldr	r3, [pc, #64]	; (80021a8 <_sbrk+0x64>)
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4413      	add	r3, r2
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	429a      	cmp	r2, r3
 8002172:	d207      	bcs.n	8002184 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002174:	f007 f828 	bl	80091c8 <__errno>
 8002178:	4603      	mov	r3, r0
 800217a:	220c      	movs	r2, #12
 800217c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800217e:	f04f 33ff 	mov.w	r3, #4294967295
 8002182:	e009      	b.n	8002198 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002184:	4b08      	ldr	r3, [pc, #32]	; (80021a8 <_sbrk+0x64>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800218a:	4b07      	ldr	r3, [pc, #28]	; (80021a8 <_sbrk+0x64>)
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4413      	add	r3, r2
 8002192:	4a05      	ldr	r2, [pc, #20]	; (80021a8 <_sbrk+0x64>)
 8002194:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002196:	68fb      	ldr	r3, [r7, #12]
}
 8002198:	4618      	mov	r0, r3
 800219a:	3718      	adds	r7, #24
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	20020000 	.word	0x20020000
 80021a4:	00000400 	.word	0x00000400
 80021a8:	20000214 	.word	0x20000214
 80021ac:	200003f0 	.word	0x200003f0

080021b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021b4:	4b06      	ldr	r3, [pc, #24]	; (80021d0 <SystemInit+0x20>)
 80021b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ba:	4a05      	ldr	r2, [pc, #20]	; (80021d0 <SystemInit+0x20>)
 80021bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021c4:	bf00      	nop
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	e000ed00 	.word	0xe000ed00

080021d4 <PIN_LOW>:

/********************************************** NO CHNAGES AFTER THIS ************************************************/


void PIN_LOW (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	460b      	mov	r3, r1
 80021de:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 80021e0:	887b      	ldrh	r3, [r7, #2]
 80021e2:	2200      	movs	r2, #0
 80021e4:	4619      	mov	r1, r3
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f004 fbe6 	bl	80069b8 <HAL_GPIO_WritePin>
}
 80021ec:	bf00      	nop
 80021ee:	3708      	adds	r7, #8
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <PIN_HIGH>:

void PIN_HIGH (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	460b      	mov	r3, r1
 80021fe:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8002200:	887b      	ldrh	r3, [r7, #2]
 8002202:	2201      	movs	r2, #1
 8002204:	4619      	mov	r1, r3
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f004 fbd6 	bl	80069b8 <HAL_GPIO_WritePin>
}
 800220c:	bf00      	nop
 800220e:	3708      	adds	r7, #8
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <PIN_INPUT>:

void PIN_INPUT (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b088      	sub	sp, #32
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	460b      	mov	r3, r1
 800221e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_Pin;
 8002220:	887b      	ldrh	r3, [r7, #2]
 8002222:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002224:	2300      	movs	r3, #0
 8002226:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002228:	2301      	movs	r3, #1
 800222a:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800222c:	f107 030c 	add.w	r3, r7, #12
 8002230:	4619      	mov	r1, r3
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f004 fa2c 	bl	8006690 <HAL_GPIO_Init>
}
 8002238:	bf00      	nop
 800223a:	3720      	adds	r7, #32
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <PIN_OUTPUT>:

void PIN_OUTPUT (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b088      	sub	sp, #32
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	460b      	mov	r3, r1
 800224a:	807b      	strh	r3, [r7, #2]
	 GPIO_InitTypeDef GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_Pin;
 800224c:	887b      	ldrh	r3, [r7, #2]
 800224e:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002250:	2301      	movs	r3, #1
 8002252:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002254:	2300      	movs	r3, #0
 8002256:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002258:	2302      	movs	r3, #2
 800225a:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800225c:	f107 030c 	add.w	r3, r7, #12
 8002260:	4619      	mov	r1, r3
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f004 fa14 	bl	8006690 <HAL_GPIO_Init>
}
 8002268:	bf00      	nop
 800226a:	3720      	adds	r7, #32
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <width>:

uint16_t _width    = WIDTH;
uint16_t _height   = HEIGHT;

uint16_t width(void)
{ return _width; }
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
 8002274:	4b03      	ldr	r3, [pc, #12]	; (8002284 <width+0x14>)
 8002276:	881b      	ldrh	r3, [r3, #0]
 8002278:	4618      	mov	r0, r3
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	20000010 	.word	0x20000010

08002288 <height>:

uint16_t height(void)
{ return _height; }
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
 800228c:	4b03      	ldr	r3, [pc, #12]	; (800229c <height+0x14>)
 800228e:	881b      	ldrh	r3, [r3, #0]
 8002290:	4618      	mov	r0, r3
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	20000012 	.word	0x20000012

080022a0 <color565_to_555>:
int16_t readGRAM(int16_t x, int16_t y, uint16_t * block, int16_t w, int16_t h);

void setReadDir (void);
void setWriteDir (void);
static uint8_t done_reset, is8347, is555, is9797;
static uint16_t color565_to_555(uint16_t color) {
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	4603      	mov	r3, r0
 80022a8:	80fb      	strh	r3, [r7, #6]
    return (color & 0xFFC0) | ((color & 0x1F) << 1) | ((color & 0x01));  //lose Green LSB, extend Blue LSB
 80022aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022ae:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022b2:	b21a      	sxth	r2, r3
 80022b4:	88fb      	ldrh	r3, [r7, #6]
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	b21b      	sxth	r3, r3
 80022ba:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80022be:	b21b      	sxth	r3, r3
 80022c0:	4313      	orrs	r3, r2
 80022c2:	b21a      	sxth	r2, r3
 80022c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022c8:	f003 0301 	and.w	r3, r3, #1
 80022cc:	b21b      	sxth	r3, r3
 80022ce:	4313      	orrs	r3, r2
 80022d0:	b21b      	sxth	r3, r3
 80022d2:	b29b      	uxth	r3, r3
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <color555_to_565>:
static uint16_t color555_to_565(uint16_t color) {
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	4603      	mov	r3, r0
 80022e8:	80fb      	strh	r3, [r7, #6]
    return (color & 0xFFC0) | ((color & 0x0400) >> 5) | ((color & 0x3F) >> 1); //extend Green LSB
 80022ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022ee:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022f2:	b21a      	sxth	r2, r3
 80022f4:	88fb      	ldrh	r3, [r7, #6]
 80022f6:	115b      	asrs	r3, r3, #5
 80022f8:	b21b      	sxth	r3, r3
 80022fa:	f003 0320 	and.w	r3, r3, #32
 80022fe:	b21b      	sxth	r3, r3
 8002300:	4313      	orrs	r3, r2
 8002302:	b21a      	sxth	r2, r3
 8002304:	88fb      	ldrh	r3, [r7, #6]
 8002306:	105b      	asrs	r3, r3, #1
 8002308:	b21b      	sxth	r3, r3
 800230a:	f003 031f 	and.w	r3, r3, #31
 800230e:	b21b      	sxth	r3, r3
 8002310:	4313      	orrs	r3, r2
 8002312:	b21b      	sxth	r3, r3
 8002314:	b29b      	uxth	r3, r3
}
 8002316:	4618      	mov	r0, r3
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr

08002322 <color565_to_r>:
static uint8_t color565_to_r(uint16_t color) {
 8002322:	b480      	push	{r7}
 8002324:	b083      	sub	sp, #12
 8002326:	af00      	add	r7, sp, #0
 8002328:	4603      	mov	r3, r0
 800232a:	80fb      	strh	r3, [r7, #6]
    return ((color & 0xF800) >> 8);  // transform to rrrrrxxx
 800232c:	88fb      	ldrh	r3, [r7, #6]
 800232e:	121b      	asrs	r3, r3, #8
 8002330:	b2db      	uxtb	r3, r3
 8002332:	f023 0307 	bic.w	r3, r3, #7
 8002336:	b2db      	uxtb	r3, r3
}
 8002338:	4618      	mov	r0, r3
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <color565_to_g>:
static uint8_t color565_to_g(uint16_t color) {
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	4603      	mov	r3, r0
 800234c:	80fb      	strh	r3, [r7, #6]
    return ((color & 0x07E0) >> 3);  // transform to ggggggxx
 800234e:	88fb      	ldrh	r3, [r7, #6]
 8002350:	10db      	asrs	r3, r3, #3
 8002352:	b2db      	uxtb	r3, r3
 8002354:	f023 0303 	bic.w	r3, r3, #3
 8002358:	b2db      	uxtb	r3, r3
}
 800235a:	4618      	mov	r0, r3
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr

08002366 <color565_to_b>:
static uint8_t color565_to_b(uint16_t color) {
 8002366:	b480      	push	{r7}
 8002368:	b083      	sub	sp, #12
 800236a:	af00      	add	r7, sp, #0
 800236c:	4603      	mov	r3, r0
 800236e:	80fb      	strh	r3, [r7, #6]
    return ((color & 0x001F) << 3);  // transform to bbbbbxxx
 8002370:	88fb      	ldrh	r3, [r7, #6]
 8002372:	00db      	lsls	r3, r3, #3
 8002374:	b2db      	uxtb	r3, r3
}
 8002376:	4618      	mov	r0, r3
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr

08002382 <color565>:

uint16_t color565(uint8_t r, uint8_t g, uint8_t b) { return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3); }
 8002382:	b480      	push	{r7}
 8002384:	b083      	sub	sp, #12
 8002386:	af00      	add	r7, sp, #0
 8002388:	4603      	mov	r3, r0
 800238a:	71fb      	strb	r3, [r7, #7]
 800238c:	460b      	mov	r3, r1
 800238e:	71bb      	strb	r3, [r7, #6]
 8002390:	4613      	mov	r3, r2
 8002392:	717b      	strb	r3, [r7, #5]
 8002394:	79fb      	ldrb	r3, [r7, #7]
 8002396:	021b      	lsls	r3, r3, #8
 8002398:	b21b      	sxth	r3, r3
 800239a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800239e:	f023 0307 	bic.w	r3, r3, #7
 80023a2:	b21a      	sxth	r2, r3
 80023a4:	79bb      	ldrb	r3, [r7, #6]
 80023a6:	00db      	lsls	r3, r3, #3
 80023a8:	b21b      	sxth	r3, r3
 80023aa:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80023ae:	b21b      	sxth	r3, r3
 80023b0:	4313      	orrs	r3, r2
 80023b2:	b21a      	sxth	r2, r3
 80023b4:	797b      	ldrb	r3, [r7, #5]
 80023b6:	08db      	lsrs	r3, r3, #3
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	b21b      	sxth	r3, r3
 80023bc:	4313      	orrs	r3, r2
 80023be:	b21b      	sxth	r3, r3
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	4618      	mov	r0, r3
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr

080023ce <readPixel>:
uint16_t readPixel(int16_t x, int16_t y) { uint16_t color; readGRAM(x, y, &color, 1, 1); return color; }
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b086      	sub	sp, #24
 80023d2:	af02      	add	r7, sp, #8
 80023d4:	4603      	mov	r3, r0
 80023d6:	460a      	mov	r2, r1
 80023d8:	80fb      	strh	r3, [r7, #6]
 80023da:	4613      	mov	r3, r2
 80023dc:	80bb      	strh	r3, [r7, #4]
 80023de:	f107 020e 	add.w	r2, r7, #14
 80023e2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80023e6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80023ea:	2301      	movs	r3, #1
 80023ec:	9300      	str	r3, [sp, #0]
 80023ee:	2301      	movs	r3, #1
 80023f0:	f001 fc7a 	bl	8003ce8 <readGRAM>
 80023f4:	89fb      	ldrh	r3, [r7, #14]
 80023f6:	4618      	mov	r0, r3
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <WriteCmdData>:

static void write24(uint16_t color);

static void writecmddata(uint16_t cmd, uint16_t dat);

void WriteCmdData(uint16_t cmd, uint16_t dat) { writecmddata(cmd, dat); }
 80023fe:	b580      	push	{r7, lr}
 8002400:	b082      	sub	sp, #8
 8002402:	af00      	add	r7, sp, #0
 8002404:	4603      	mov	r3, r0
 8002406:	460a      	mov	r2, r1
 8002408:	80fb      	strh	r3, [r7, #6]
 800240a:	4613      	mov	r3, r2
 800240c:	80bb      	strh	r3, [r7, #4]
 800240e:	88ba      	ldrh	r2, [r7, #4]
 8002410:	88fb      	ldrh	r3, [r7, #6]
 8002412:	4611      	mov	r1, r2
 8002414:	4618      	mov	r0, r3
 8002416:	f000 f973 	bl	8002700 <writecmddata>
 800241a:	bf00      	nop
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <pushCommand>:

static void init_table(const void *table, int16_t size);

static void WriteCmdParamN(uint16_t cmd, int8_t N, uint8_t * block);

void pushCommand(uint16_t cmd, uint8_t * block, int8_t N) { WriteCmdParamN(cmd, N, block); }
 8002422:	b580      	push	{r7, lr}
 8002424:	b082      	sub	sp, #8
 8002426:	af00      	add	r7, sp, #0
 8002428:	4603      	mov	r3, r0
 800242a:	6039      	str	r1, [r7, #0]
 800242c:	80fb      	strh	r3, [r7, #6]
 800242e:	4613      	mov	r3, r2
 8002430:	717b      	strb	r3, [r7, #5]
 8002432:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8002436:	88fb      	ldrh	r3, [r7, #6]
 8002438:	683a      	ldr	r2, [r7, #0]
 800243a:	4618      	mov	r0, r3
 800243c:	f000 fab6 	bl	80029ac <WriteCmdParamN>
 8002440:	bf00      	nop
 8002442:	3708      	adds	r7, #8
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <setReadDir>:
uint16_t _lcd_ID, _lcd_rev, _lcd_madctl, _lcd_drivOut, _MC, _MP, _MW, _SC, _EC, _SP, _EP;

//extern GFXfont *gfxFont;

void setReadDir (void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
	PIN_INPUT(D0_PORT, D0_PIN);
 800244c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002450:	4811      	ldr	r0, [pc, #68]	; (8002498 <setReadDir+0x50>)
 8002452:	f7ff fedf 	bl	8002214 <PIN_INPUT>
	PIN_INPUT(D1_PORT, D1_PIN);
 8002456:	2180      	movs	r1, #128	; 0x80
 8002458:	4810      	ldr	r0, [pc, #64]	; (800249c <setReadDir+0x54>)
 800245a:	f7ff fedb 	bl	8002214 <PIN_INPUT>
	PIN_INPUT(D2_PORT, D2_PIN);
 800245e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002462:	480d      	ldr	r0, [pc, #52]	; (8002498 <setReadDir+0x50>)
 8002464:	f7ff fed6 	bl	8002214 <PIN_INPUT>
	PIN_INPUT(D3_PORT, D3_PIN);
 8002468:	2108      	movs	r1, #8
 800246a:	480d      	ldr	r0, [pc, #52]	; (80024a0 <setReadDir+0x58>)
 800246c:	f7ff fed2 	bl	8002214 <PIN_INPUT>
	PIN_INPUT(D4_PORT, D4_PIN);
 8002470:	2120      	movs	r1, #32
 8002472:	480b      	ldr	r0, [pc, #44]	; (80024a0 <setReadDir+0x58>)
 8002474:	f7ff fece 	bl	8002214 <PIN_INPUT>
	PIN_INPUT(D5_PORT, D5_PIN);
 8002478:	2110      	movs	r1, #16
 800247a:	4809      	ldr	r0, [pc, #36]	; (80024a0 <setReadDir+0x58>)
 800247c:	f7ff feca 	bl	8002214 <PIN_INPUT>
	PIN_INPUT(D6_PORT, D6_PIN);
 8002480:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002484:	4806      	ldr	r0, [pc, #24]	; (80024a0 <setReadDir+0x58>)
 8002486:	f7ff fec5 	bl	8002214 <PIN_INPUT>
	PIN_INPUT(D7_PORT, D7_PIN);
 800248a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800248e:	4802      	ldr	r0, [pc, #8]	; (8002498 <setReadDir+0x50>)
 8002490:	f7ff fec0 	bl	8002214 <PIN_INPUT>
}
 8002494:	bf00      	nop
 8002496:	bd80      	pop	{r7, pc}
 8002498:	40020000 	.word	0x40020000
 800249c:	40020800 	.word	0x40020800
 80024a0:	40020400 	.word	0x40020400

080024a4 <setWriteDir>:

void setWriteDir (void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
	PIN_OUTPUT(D0_PORT, D0_PIN);
 80024a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024ac:	4811      	ldr	r0, [pc, #68]	; (80024f4 <setWriteDir+0x50>)
 80024ae:	f7ff fec7 	bl	8002240 <PIN_OUTPUT>
	PIN_OUTPUT(D1_PORT, D1_PIN);
 80024b2:	2180      	movs	r1, #128	; 0x80
 80024b4:	4810      	ldr	r0, [pc, #64]	; (80024f8 <setWriteDir+0x54>)
 80024b6:	f7ff fec3 	bl	8002240 <PIN_OUTPUT>
	PIN_OUTPUT(D2_PORT, D2_PIN);
 80024ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80024be:	480d      	ldr	r0, [pc, #52]	; (80024f4 <setWriteDir+0x50>)
 80024c0:	f7ff febe 	bl	8002240 <PIN_OUTPUT>
	PIN_OUTPUT(D3_PORT, D3_PIN);
 80024c4:	2108      	movs	r1, #8
 80024c6:	480d      	ldr	r0, [pc, #52]	; (80024fc <setWriteDir+0x58>)
 80024c8:	f7ff feba 	bl	8002240 <PIN_OUTPUT>
	PIN_OUTPUT(D4_PORT, D4_PIN);
 80024cc:	2120      	movs	r1, #32
 80024ce:	480b      	ldr	r0, [pc, #44]	; (80024fc <setWriteDir+0x58>)
 80024d0:	f7ff feb6 	bl	8002240 <PIN_OUTPUT>
	PIN_OUTPUT(D5_PORT, D5_PIN);
 80024d4:	2110      	movs	r1, #16
 80024d6:	4809      	ldr	r0, [pc, #36]	; (80024fc <setWriteDir+0x58>)
 80024d8:	f7ff feb2 	bl	8002240 <PIN_OUTPUT>
	PIN_OUTPUT(D6_PORT, D6_PIN);
 80024dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80024e0:	4806      	ldr	r0, [pc, #24]	; (80024fc <setWriteDir+0x58>)
 80024e2:	f7ff fead 	bl	8002240 <PIN_OUTPUT>
	PIN_OUTPUT(D7_PORT, D7_PIN);
 80024e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024ea:	4802      	ldr	r0, [pc, #8]	; (80024f4 <setWriteDir+0x50>)
 80024ec:	f7ff fea8 	bl	8002240 <PIN_OUTPUT>
}
 80024f0:	bf00      	nop
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	40020000 	.word	0x40020000
 80024f8:	40020800 	.word	0x40020800
 80024fc:	40020400 	.word	0x40020400

08002500 <write24>:
    CS_IDLE;
}


static void write24(uint16_t color)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	4603      	mov	r3, r0
 8002508:	80fb      	strh	r3, [r7, #6]
    uint8_t r = color565_to_r(color);
 800250a:	88fb      	ldrh	r3, [r7, #6]
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff ff08 	bl	8002322 <color565_to_r>
 8002512:	4603      	mov	r3, r0
 8002514:	73fb      	strb	r3, [r7, #15]
    uint8_t g = color565_to_g(color);
 8002516:	88fb      	ldrh	r3, [r7, #6]
 8002518:	4618      	mov	r0, r3
 800251a:	f7ff ff13 	bl	8002344 <color565_to_g>
 800251e:	4603      	mov	r3, r0
 8002520:	73bb      	strb	r3, [r7, #14]
    uint8_t b = color565_to_b(color);
 8002522:	88fb      	ldrh	r3, [r7, #6]
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff ff1e 	bl	8002366 <color565_to_b>
 800252a:	4603      	mov	r3, r0
 800252c:	737b      	strb	r3, [r7, #13]
    write8(r);
 800252e:	4b71      	ldr	r3, [pc, #452]	; (80026f4 <write24+0x1f4>)
 8002530:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8002534:	619a      	str	r2, [r3, #24]
 8002536:	4b70      	ldr	r3, [pc, #448]	; (80026f8 <write24+0x1f8>)
 8002538:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 800253c:	619a      	str	r2, [r3, #24]
 800253e:	4b6f      	ldr	r3, [pc, #444]	; (80026fc <write24+0x1fc>)
 8002540:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002544:	619a      	str	r2, [r3, #24]
 8002546:	7bfb      	ldrb	r3, [r7, #15]
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800254e:	7bfb      	ldrb	r3, [r7, #15]
 8002550:	021b      	lsls	r3, r3, #8
 8002552:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002556:	431a      	orrs	r2, r3
 8002558:	7bfb      	ldrb	r3, [r7, #15]
 800255a:	025b      	lsls	r3, r3, #9
 800255c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002560:	431a      	orrs	r2, r3
 8002562:	4b64      	ldr	r3, [pc, #400]	; (80026f4 <write24+0x1f4>)
 8002564:	619a      	str	r2, [r3, #24]
 8002566:	7bfb      	ldrb	r3, [r7, #15]
 8002568:	011b      	lsls	r3, r3, #4
 800256a:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 800256e:	7bfb      	ldrb	r3, [r7, #15]
 8002570:	105b      	asrs	r3, r3, #1
 8002572:	f003 0310 	and.w	r3, r3, #16
 8002576:	431a      	orrs	r2, r3
 8002578:	7bfb      	ldrb	r3, [r7, #15]
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	f003 0320 	and.w	r3, r3, #32
 8002580:	431a      	orrs	r2, r3
 8002582:	7bfb      	ldrb	r3, [r7, #15]
 8002584:	f003 0308 	and.w	r3, r3, #8
 8002588:	431a      	orrs	r2, r3
 800258a:	4b5b      	ldr	r3, [pc, #364]	; (80026f8 <write24+0x1f8>)
 800258c:	619a      	str	r2, [r3, #24]
 800258e:	7bfb      	ldrb	r3, [r7, #15]
 8002590:	019b      	lsls	r3, r3, #6
 8002592:	4a5a      	ldr	r2, [pc, #360]	; (80026fc <write24+0x1fc>)
 8002594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002598:	6193      	str	r3, [r2, #24]
 800259a:	2102      	movs	r1, #2
 800259c:	4855      	ldr	r0, [pc, #340]	; (80026f4 <write24+0x1f4>)
 800259e:	f7ff fe19 	bl	80021d4 <PIN_LOW>
 80025a2:	2102      	movs	r1, #2
 80025a4:	4853      	ldr	r0, [pc, #332]	; (80026f4 <write24+0x1f4>)
 80025a6:	f7ff fe15 	bl	80021d4 <PIN_LOW>
 80025aa:	2102      	movs	r1, #2
 80025ac:	4851      	ldr	r0, [pc, #324]	; (80026f4 <write24+0x1f4>)
 80025ae:	f7ff fe11 	bl	80021d4 <PIN_LOW>
 80025b2:	2102      	movs	r1, #2
 80025b4:	484f      	ldr	r0, [pc, #316]	; (80026f4 <write24+0x1f4>)
 80025b6:	f7ff fe1d 	bl	80021f4 <PIN_HIGH>
 80025ba:	2102      	movs	r1, #2
 80025bc:	484d      	ldr	r0, [pc, #308]	; (80026f4 <write24+0x1f4>)
 80025be:	f7ff fe19 	bl	80021f4 <PIN_HIGH>
    write8(g);
 80025c2:	4b4c      	ldr	r3, [pc, #304]	; (80026f4 <write24+0x1f4>)
 80025c4:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 80025c8:	619a      	str	r2, [r3, #24]
 80025ca:	4b4b      	ldr	r3, [pc, #300]	; (80026f8 <write24+0x1f8>)
 80025cc:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 80025d0:	619a      	str	r2, [r3, #24]
 80025d2:	4b4a      	ldr	r3, [pc, #296]	; (80026fc <write24+0x1fc>)
 80025d4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80025d8:	619a      	str	r2, [r3, #24]
 80025da:	7bbb      	ldrb	r3, [r7, #14]
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80025e2:	7bbb      	ldrb	r3, [r7, #14]
 80025e4:	021b      	lsls	r3, r3, #8
 80025e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ea:	431a      	orrs	r2, r3
 80025ec:	7bbb      	ldrb	r3, [r7, #14]
 80025ee:	025b      	lsls	r3, r3, #9
 80025f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025f4:	431a      	orrs	r2, r3
 80025f6:	4b3f      	ldr	r3, [pc, #252]	; (80026f4 <write24+0x1f4>)
 80025f8:	619a      	str	r2, [r3, #24]
 80025fa:	7bbb      	ldrb	r3, [r7, #14]
 80025fc:	011b      	lsls	r3, r3, #4
 80025fe:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8002602:	7bbb      	ldrb	r3, [r7, #14]
 8002604:	105b      	asrs	r3, r3, #1
 8002606:	f003 0310 	and.w	r3, r3, #16
 800260a:	431a      	orrs	r2, r3
 800260c:	7bbb      	ldrb	r3, [r7, #14]
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	f003 0320 	and.w	r3, r3, #32
 8002614:	431a      	orrs	r2, r3
 8002616:	7bbb      	ldrb	r3, [r7, #14]
 8002618:	f003 0308 	and.w	r3, r3, #8
 800261c:	431a      	orrs	r2, r3
 800261e:	4b36      	ldr	r3, [pc, #216]	; (80026f8 <write24+0x1f8>)
 8002620:	619a      	str	r2, [r3, #24]
 8002622:	7bbb      	ldrb	r3, [r7, #14]
 8002624:	019b      	lsls	r3, r3, #6
 8002626:	4a35      	ldr	r2, [pc, #212]	; (80026fc <write24+0x1fc>)
 8002628:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800262c:	6193      	str	r3, [r2, #24]
 800262e:	2102      	movs	r1, #2
 8002630:	4830      	ldr	r0, [pc, #192]	; (80026f4 <write24+0x1f4>)
 8002632:	f7ff fdcf 	bl	80021d4 <PIN_LOW>
 8002636:	2102      	movs	r1, #2
 8002638:	482e      	ldr	r0, [pc, #184]	; (80026f4 <write24+0x1f4>)
 800263a:	f7ff fdcb 	bl	80021d4 <PIN_LOW>
 800263e:	2102      	movs	r1, #2
 8002640:	482c      	ldr	r0, [pc, #176]	; (80026f4 <write24+0x1f4>)
 8002642:	f7ff fdc7 	bl	80021d4 <PIN_LOW>
 8002646:	2102      	movs	r1, #2
 8002648:	482a      	ldr	r0, [pc, #168]	; (80026f4 <write24+0x1f4>)
 800264a:	f7ff fdd3 	bl	80021f4 <PIN_HIGH>
 800264e:	2102      	movs	r1, #2
 8002650:	4828      	ldr	r0, [pc, #160]	; (80026f4 <write24+0x1f4>)
 8002652:	f7ff fdcf 	bl	80021f4 <PIN_HIGH>
    write8(b);
 8002656:	4b27      	ldr	r3, [pc, #156]	; (80026f4 <write24+0x1f4>)
 8002658:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 800265c:	619a      	str	r2, [r3, #24]
 800265e:	4b26      	ldr	r3, [pc, #152]	; (80026f8 <write24+0x1f8>)
 8002660:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8002664:	619a      	str	r2, [r3, #24]
 8002666:	4b25      	ldr	r3, [pc, #148]	; (80026fc <write24+0x1fc>)
 8002668:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800266c:	619a      	str	r2, [r3, #24]
 800266e:	7b7b      	ldrb	r3, [r7, #13]
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8002676:	7b7b      	ldrb	r3, [r7, #13]
 8002678:	021b      	lsls	r3, r3, #8
 800267a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800267e:	431a      	orrs	r2, r3
 8002680:	7b7b      	ldrb	r3, [r7, #13]
 8002682:	025b      	lsls	r3, r3, #9
 8002684:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002688:	431a      	orrs	r2, r3
 800268a:	4b1a      	ldr	r3, [pc, #104]	; (80026f4 <write24+0x1f4>)
 800268c:	619a      	str	r2, [r3, #24]
 800268e:	7b7b      	ldrb	r3, [r7, #13]
 8002690:	011b      	lsls	r3, r3, #4
 8002692:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8002696:	7b7b      	ldrb	r3, [r7, #13]
 8002698:	105b      	asrs	r3, r3, #1
 800269a:	f003 0310 	and.w	r3, r3, #16
 800269e:	431a      	orrs	r2, r3
 80026a0:	7b7b      	ldrb	r3, [r7, #13]
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	f003 0320 	and.w	r3, r3, #32
 80026a8:	431a      	orrs	r2, r3
 80026aa:	7b7b      	ldrb	r3, [r7, #13]
 80026ac:	f003 0308 	and.w	r3, r3, #8
 80026b0:	431a      	orrs	r2, r3
 80026b2:	4b11      	ldr	r3, [pc, #68]	; (80026f8 <write24+0x1f8>)
 80026b4:	619a      	str	r2, [r3, #24]
 80026b6:	7b7b      	ldrb	r3, [r7, #13]
 80026b8:	019b      	lsls	r3, r3, #6
 80026ba:	4a10      	ldr	r2, [pc, #64]	; (80026fc <write24+0x1fc>)
 80026bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026c0:	6193      	str	r3, [r2, #24]
 80026c2:	2102      	movs	r1, #2
 80026c4:	480b      	ldr	r0, [pc, #44]	; (80026f4 <write24+0x1f4>)
 80026c6:	f7ff fd85 	bl	80021d4 <PIN_LOW>
 80026ca:	2102      	movs	r1, #2
 80026cc:	4809      	ldr	r0, [pc, #36]	; (80026f4 <write24+0x1f4>)
 80026ce:	f7ff fd81 	bl	80021d4 <PIN_LOW>
 80026d2:	2102      	movs	r1, #2
 80026d4:	4807      	ldr	r0, [pc, #28]	; (80026f4 <write24+0x1f4>)
 80026d6:	f7ff fd7d 	bl	80021d4 <PIN_LOW>
 80026da:	2102      	movs	r1, #2
 80026dc:	4805      	ldr	r0, [pc, #20]	; (80026f4 <write24+0x1f4>)
 80026de:	f7ff fd89 	bl	80021f4 <PIN_HIGH>
 80026e2:	2102      	movs	r1, #2
 80026e4:	4803      	ldr	r0, [pc, #12]	; (80026f4 <write24+0x1f4>)
 80026e6:	f7ff fd85 	bl	80021f4 <PIN_HIGH>
}
 80026ea:	bf00      	nop
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	40020000 	.word	0x40020000
 80026f8:	40020400 	.word	0x40020400
 80026fc:	40020800 	.word	0x40020800

08002700 <writecmddata>:


static void writecmddata(uint16_t cmd, uint16_t dat)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	4603      	mov	r3, r0
 8002708:	460a      	mov	r2, r1
 800270a:	80fb      	strh	r3, [r7, #6]
 800270c:	4613      	mov	r3, r2
 800270e:	80bb      	strh	r3, [r7, #4]
    CS_ACTIVE;
 8002710:	2101      	movs	r1, #1
 8002712:	48a3      	ldr	r0, [pc, #652]	; (80029a0 <writecmddata+0x2a0>)
 8002714:	f7ff fd5e 	bl	80021d4 <PIN_LOW>
    WriteCmd(cmd);
 8002718:	2110      	movs	r1, #16
 800271a:	48a2      	ldr	r0, [pc, #648]	; (80029a4 <writecmddata+0x2a4>)
 800271c:	f7ff fd5a 	bl	80021d4 <PIN_LOW>
 8002720:	88fb      	ldrh	r3, [r7, #6]
 8002722:	0a1b      	lsrs	r3, r3, #8
 8002724:	b29b      	uxth	r3, r3
 8002726:	73fb      	strb	r3, [r7, #15]
 8002728:	88fb      	ldrh	r3, [r7, #6]
 800272a:	73bb      	strb	r3, [r7, #14]
 800272c:	4b9d      	ldr	r3, [pc, #628]	; (80029a4 <writecmddata+0x2a4>)
 800272e:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8002732:	619a      	str	r2, [r3, #24]
 8002734:	4b9a      	ldr	r3, [pc, #616]	; (80029a0 <writecmddata+0x2a0>)
 8002736:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 800273a:	619a      	str	r2, [r3, #24]
 800273c:	4b9a      	ldr	r3, [pc, #616]	; (80029a8 <writecmddata+0x2a8>)
 800273e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002742:	619a      	str	r2, [r3, #24]
 8002744:	7bfb      	ldrb	r3, [r7, #15]
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800274c:	7bfb      	ldrb	r3, [r7, #15]
 800274e:	021b      	lsls	r3, r3, #8
 8002750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002754:	431a      	orrs	r2, r3
 8002756:	7bfb      	ldrb	r3, [r7, #15]
 8002758:	025b      	lsls	r3, r3, #9
 800275a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800275e:	431a      	orrs	r2, r3
 8002760:	4b90      	ldr	r3, [pc, #576]	; (80029a4 <writecmddata+0x2a4>)
 8002762:	619a      	str	r2, [r3, #24]
 8002764:	7bfb      	ldrb	r3, [r7, #15]
 8002766:	011b      	lsls	r3, r3, #4
 8002768:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 800276c:	7bfb      	ldrb	r3, [r7, #15]
 800276e:	105b      	asrs	r3, r3, #1
 8002770:	f003 0310 	and.w	r3, r3, #16
 8002774:	431a      	orrs	r2, r3
 8002776:	7bfb      	ldrb	r3, [r7, #15]
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	f003 0320 	and.w	r3, r3, #32
 800277e:	431a      	orrs	r2, r3
 8002780:	7bfb      	ldrb	r3, [r7, #15]
 8002782:	f003 0308 	and.w	r3, r3, #8
 8002786:	431a      	orrs	r2, r3
 8002788:	4b85      	ldr	r3, [pc, #532]	; (80029a0 <writecmddata+0x2a0>)
 800278a:	619a      	str	r2, [r3, #24]
 800278c:	7bfb      	ldrb	r3, [r7, #15]
 800278e:	019b      	lsls	r3, r3, #6
 8002790:	4a85      	ldr	r2, [pc, #532]	; (80029a8 <writecmddata+0x2a8>)
 8002792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002796:	6193      	str	r3, [r2, #24]
 8002798:	2102      	movs	r1, #2
 800279a:	4882      	ldr	r0, [pc, #520]	; (80029a4 <writecmddata+0x2a4>)
 800279c:	f7ff fd1a 	bl	80021d4 <PIN_LOW>
 80027a0:	2102      	movs	r1, #2
 80027a2:	4880      	ldr	r0, [pc, #512]	; (80029a4 <writecmddata+0x2a4>)
 80027a4:	f7ff fd16 	bl	80021d4 <PIN_LOW>
 80027a8:	2102      	movs	r1, #2
 80027aa:	487e      	ldr	r0, [pc, #504]	; (80029a4 <writecmddata+0x2a4>)
 80027ac:	f7ff fd12 	bl	80021d4 <PIN_LOW>
 80027b0:	2102      	movs	r1, #2
 80027b2:	487c      	ldr	r0, [pc, #496]	; (80029a4 <writecmddata+0x2a4>)
 80027b4:	f7ff fd1e 	bl	80021f4 <PIN_HIGH>
 80027b8:	2102      	movs	r1, #2
 80027ba:	487a      	ldr	r0, [pc, #488]	; (80029a4 <writecmddata+0x2a4>)
 80027bc:	f7ff fd1a 	bl	80021f4 <PIN_HIGH>
 80027c0:	4b78      	ldr	r3, [pc, #480]	; (80029a4 <writecmddata+0x2a4>)
 80027c2:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 80027c6:	619a      	str	r2, [r3, #24]
 80027c8:	4b75      	ldr	r3, [pc, #468]	; (80029a0 <writecmddata+0x2a0>)
 80027ca:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 80027ce:	619a      	str	r2, [r3, #24]
 80027d0:	4b75      	ldr	r3, [pc, #468]	; (80029a8 <writecmddata+0x2a8>)
 80027d2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80027d6:	619a      	str	r2, [r3, #24]
 80027d8:	7bbb      	ldrb	r3, [r7, #14]
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80027e0:	7bbb      	ldrb	r3, [r7, #14]
 80027e2:	021b      	lsls	r3, r3, #8
 80027e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e8:	431a      	orrs	r2, r3
 80027ea:	7bbb      	ldrb	r3, [r7, #14]
 80027ec:	025b      	lsls	r3, r3, #9
 80027ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027f2:	431a      	orrs	r2, r3
 80027f4:	4b6b      	ldr	r3, [pc, #428]	; (80029a4 <writecmddata+0x2a4>)
 80027f6:	619a      	str	r2, [r3, #24]
 80027f8:	7bbb      	ldrb	r3, [r7, #14]
 80027fa:	011b      	lsls	r3, r3, #4
 80027fc:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8002800:	7bbb      	ldrb	r3, [r7, #14]
 8002802:	105b      	asrs	r3, r3, #1
 8002804:	f003 0310 	and.w	r3, r3, #16
 8002808:	431a      	orrs	r2, r3
 800280a:	7bbb      	ldrb	r3, [r7, #14]
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	f003 0320 	and.w	r3, r3, #32
 8002812:	431a      	orrs	r2, r3
 8002814:	7bbb      	ldrb	r3, [r7, #14]
 8002816:	f003 0308 	and.w	r3, r3, #8
 800281a:	431a      	orrs	r2, r3
 800281c:	4b60      	ldr	r3, [pc, #384]	; (80029a0 <writecmddata+0x2a0>)
 800281e:	619a      	str	r2, [r3, #24]
 8002820:	7bbb      	ldrb	r3, [r7, #14]
 8002822:	019b      	lsls	r3, r3, #6
 8002824:	4a60      	ldr	r2, [pc, #384]	; (80029a8 <writecmddata+0x2a8>)
 8002826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800282a:	6193      	str	r3, [r2, #24]
 800282c:	2102      	movs	r1, #2
 800282e:	485d      	ldr	r0, [pc, #372]	; (80029a4 <writecmddata+0x2a4>)
 8002830:	f7ff fcd0 	bl	80021d4 <PIN_LOW>
 8002834:	2102      	movs	r1, #2
 8002836:	485b      	ldr	r0, [pc, #364]	; (80029a4 <writecmddata+0x2a4>)
 8002838:	f7ff fccc 	bl	80021d4 <PIN_LOW>
 800283c:	2102      	movs	r1, #2
 800283e:	4859      	ldr	r0, [pc, #356]	; (80029a4 <writecmddata+0x2a4>)
 8002840:	f7ff fcc8 	bl	80021d4 <PIN_LOW>
 8002844:	2102      	movs	r1, #2
 8002846:	4857      	ldr	r0, [pc, #348]	; (80029a4 <writecmddata+0x2a4>)
 8002848:	f7ff fcd4 	bl	80021f4 <PIN_HIGH>
 800284c:	2102      	movs	r1, #2
 800284e:	4855      	ldr	r0, [pc, #340]	; (80029a4 <writecmddata+0x2a4>)
 8002850:	f7ff fcd0 	bl	80021f4 <PIN_HIGH>
 8002854:	2110      	movs	r1, #16
 8002856:	4853      	ldr	r0, [pc, #332]	; (80029a4 <writecmddata+0x2a4>)
 8002858:	f7ff fccc 	bl	80021f4 <PIN_HIGH>
    WriteData(dat);
 800285c:	88bb      	ldrh	r3, [r7, #4]
 800285e:	0a1b      	lsrs	r3, r3, #8
 8002860:	b29b      	uxth	r3, r3
 8002862:	737b      	strb	r3, [r7, #13]
 8002864:	88bb      	ldrh	r3, [r7, #4]
 8002866:	733b      	strb	r3, [r7, #12]
 8002868:	4b4e      	ldr	r3, [pc, #312]	; (80029a4 <writecmddata+0x2a4>)
 800286a:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 800286e:	619a      	str	r2, [r3, #24]
 8002870:	4b4b      	ldr	r3, [pc, #300]	; (80029a0 <writecmddata+0x2a0>)
 8002872:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8002876:	619a      	str	r2, [r3, #24]
 8002878:	4b4b      	ldr	r3, [pc, #300]	; (80029a8 <writecmddata+0x2a8>)
 800287a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800287e:	619a      	str	r2, [r3, #24]
 8002880:	7b7b      	ldrb	r3, [r7, #13]
 8002882:	005b      	lsls	r3, r3, #1
 8002884:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8002888:	7b7b      	ldrb	r3, [r7, #13]
 800288a:	021b      	lsls	r3, r3, #8
 800288c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002890:	431a      	orrs	r2, r3
 8002892:	7b7b      	ldrb	r3, [r7, #13]
 8002894:	025b      	lsls	r3, r3, #9
 8002896:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800289a:	431a      	orrs	r2, r3
 800289c:	4b41      	ldr	r3, [pc, #260]	; (80029a4 <writecmddata+0x2a4>)
 800289e:	619a      	str	r2, [r3, #24]
 80028a0:	7b7b      	ldrb	r3, [r7, #13]
 80028a2:	011b      	lsls	r3, r3, #4
 80028a4:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 80028a8:	7b7b      	ldrb	r3, [r7, #13]
 80028aa:	105b      	asrs	r3, r3, #1
 80028ac:	f003 0310 	and.w	r3, r3, #16
 80028b0:	431a      	orrs	r2, r3
 80028b2:	7b7b      	ldrb	r3, [r7, #13]
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	f003 0320 	and.w	r3, r3, #32
 80028ba:	431a      	orrs	r2, r3
 80028bc:	7b7b      	ldrb	r3, [r7, #13]
 80028be:	f003 0308 	and.w	r3, r3, #8
 80028c2:	431a      	orrs	r2, r3
 80028c4:	4b36      	ldr	r3, [pc, #216]	; (80029a0 <writecmddata+0x2a0>)
 80028c6:	619a      	str	r2, [r3, #24]
 80028c8:	7b7b      	ldrb	r3, [r7, #13]
 80028ca:	019b      	lsls	r3, r3, #6
 80028cc:	4a36      	ldr	r2, [pc, #216]	; (80029a8 <writecmddata+0x2a8>)
 80028ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028d2:	6193      	str	r3, [r2, #24]
 80028d4:	2102      	movs	r1, #2
 80028d6:	4833      	ldr	r0, [pc, #204]	; (80029a4 <writecmddata+0x2a4>)
 80028d8:	f7ff fc7c 	bl	80021d4 <PIN_LOW>
 80028dc:	2102      	movs	r1, #2
 80028de:	4831      	ldr	r0, [pc, #196]	; (80029a4 <writecmddata+0x2a4>)
 80028e0:	f7ff fc78 	bl	80021d4 <PIN_LOW>
 80028e4:	2102      	movs	r1, #2
 80028e6:	482f      	ldr	r0, [pc, #188]	; (80029a4 <writecmddata+0x2a4>)
 80028e8:	f7ff fc74 	bl	80021d4 <PIN_LOW>
 80028ec:	2102      	movs	r1, #2
 80028ee:	482d      	ldr	r0, [pc, #180]	; (80029a4 <writecmddata+0x2a4>)
 80028f0:	f7ff fc80 	bl	80021f4 <PIN_HIGH>
 80028f4:	2102      	movs	r1, #2
 80028f6:	482b      	ldr	r0, [pc, #172]	; (80029a4 <writecmddata+0x2a4>)
 80028f8:	f7ff fc7c 	bl	80021f4 <PIN_HIGH>
 80028fc:	4b29      	ldr	r3, [pc, #164]	; (80029a4 <writecmddata+0x2a4>)
 80028fe:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8002902:	619a      	str	r2, [r3, #24]
 8002904:	4b26      	ldr	r3, [pc, #152]	; (80029a0 <writecmddata+0x2a0>)
 8002906:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 800290a:	619a      	str	r2, [r3, #24]
 800290c:	4b26      	ldr	r3, [pc, #152]	; (80029a8 <writecmddata+0x2a8>)
 800290e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002912:	619a      	str	r2, [r3, #24]
 8002914:	7b3b      	ldrb	r3, [r7, #12]
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800291c:	7b3b      	ldrb	r3, [r7, #12]
 800291e:	021b      	lsls	r3, r3, #8
 8002920:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002924:	431a      	orrs	r2, r3
 8002926:	7b3b      	ldrb	r3, [r7, #12]
 8002928:	025b      	lsls	r3, r3, #9
 800292a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800292e:	431a      	orrs	r2, r3
 8002930:	4b1c      	ldr	r3, [pc, #112]	; (80029a4 <writecmddata+0x2a4>)
 8002932:	619a      	str	r2, [r3, #24]
 8002934:	7b3b      	ldrb	r3, [r7, #12]
 8002936:	011b      	lsls	r3, r3, #4
 8002938:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 800293c:	7b3b      	ldrb	r3, [r7, #12]
 800293e:	105b      	asrs	r3, r3, #1
 8002940:	f003 0310 	and.w	r3, r3, #16
 8002944:	431a      	orrs	r2, r3
 8002946:	7b3b      	ldrb	r3, [r7, #12]
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	f003 0320 	and.w	r3, r3, #32
 800294e:	431a      	orrs	r2, r3
 8002950:	7b3b      	ldrb	r3, [r7, #12]
 8002952:	f003 0308 	and.w	r3, r3, #8
 8002956:	431a      	orrs	r2, r3
 8002958:	4b11      	ldr	r3, [pc, #68]	; (80029a0 <writecmddata+0x2a0>)
 800295a:	619a      	str	r2, [r3, #24]
 800295c:	7b3b      	ldrb	r3, [r7, #12]
 800295e:	019b      	lsls	r3, r3, #6
 8002960:	4a11      	ldr	r2, [pc, #68]	; (80029a8 <writecmddata+0x2a8>)
 8002962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002966:	6193      	str	r3, [r2, #24]
 8002968:	2102      	movs	r1, #2
 800296a:	480e      	ldr	r0, [pc, #56]	; (80029a4 <writecmddata+0x2a4>)
 800296c:	f7ff fc32 	bl	80021d4 <PIN_LOW>
 8002970:	2102      	movs	r1, #2
 8002972:	480c      	ldr	r0, [pc, #48]	; (80029a4 <writecmddata+0x2a4>)
 8002974:	f7ff fc2e 	bl	80021d4 <PIN_LOW>
 8002978:	2102      	movs	r1, #2
 800297a:	480a      	ldr	r0, [pc, #40]	; (80029a4 <writecmddata+0x2a4>)
 800297c:	f7ff fc2a 	bl	80021d4 <PIN_LOW>
 8002980:	2102      	movs	r1, #2
 8002982:	4808      	ldr	r0, [pc, #32]	; (80029a4 <writecmddata+0x2a4>)
 8002984:	f7ff fc36 	bl	80021f4 <PIN_HIGH>
 8002988:	2102      	movs	r1, #2
 800298a:	4806      	ldr	r0, [pc, #24]	; (80029a4 <writecmddata+0x2a4>)
 800298c:	f7ff fc32 	bl	80021f4 <PIN_HIGH>
    CS_IDLE;
 8002990:	2101      	movs	r1, #1
 8002992:	4803      	ldr	r0, [pc, #12]	; (80029a0 <writecmddata+0x2a0>)
 8002994:	f7ff fc2e 	bl	80021f4 <PIN_HIGH>
}
 8002998:	bf00      	nop
 800299a:	3710      	adds	r7, #16
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	40020400 	.word	0x40020400
 80029a4:	40020000 	.word	0x40020000
 80029a8:	40020800 	.word	0x40020800

080029ac <WriteCmdParamN>:


static void WriteCmdParamN(uint16_t cmd, int8_t N, uint8_t * block)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	4603      	mov	r3, r0
 80029b4:	603a      	str	r2, [r7, #0]
 80029b6:	80fb      	strh	r3, [r7, #6]
 80029b8:	460b      	mov	r3, r1
 80029ba:	717b      	strb	r3, [r7, #5]
    CS_ACTIVE;
 80029bc:	2101      	movs	r1, #1
 80029be:	4853      	ldr	r0, [pc, #332]	; (8002b0c <WriteCmdParamN+0x160>)
 80029c0:	f7ff fc08 	bl	80021d4 <PIN_LOW>
    WriteCmd(cmd);
 80029c4:	2110      	movs	r1, #16
 80029c6:	4852      	ldr	r0, [pc, #328]	; (8002b10 <WriteCmdParamN+0x164>)
 80029c8:	f7ff fc04 	bl	80021d4 <PIN_LOW>
 80029cc:	88fb      	ldrh	r3, [r7, #6]
 80029ce:	0a1b      	lsrs	r3, r3, #8
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	73fb      	strb	r3, [r7, #15]
 80029d4:	88fb      	ldrh	r3, [r7, #6]
 80029d6:	73bb      	strb	r3, [r7, #14]
 80029d8:	4b4d      	ldr	r3, [pc, #308]	; (8002b10 <WriteCmdParamN+0x164>)
 80029da:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 80029de:	619a      	str	r2, [r3, #24]
 80029e0:	4b4a      	ldr	r3, [pc, #296]	; (8002b0c <WriteCmdParamN+0x160>)
 80029e2:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 80029e6:	619a      	str	r2, [r3, #24]
 80029e8:	4b4a      	ldr	r3, [pc, #296]	; (8002b14 <WriteCmdParamN+0x168>)
 80029ea:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80029ee:	619a      	str	r2, [r3, #24]
 80029f0:	7bfb      	ldrb	r3, [r7, #15]
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80029f8:	7bfb      	ldrb	r3, [r7, #15]
 80029fa:	021b      	lsls	r3, r3, #8
 80029fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a00:	431a      	orrs	r2, r3
 8002a02:	7bfb      	ldrb	r3, [r7, #15]
 8002a04:	025b      	lsls	r3, r3, #9
 8002a06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	4b40      	ldr	r3, [pc, #256]	; (8002b10 <WriteCmdParamN+0x164>)
 8002a0e:	619a      	str	r2, [r3, #24]
 8002a10:	7bfb      	ldrb	r3, [r7, #15]
 8002a12:	011b      	lsls	r3, r3, #4
 8002a14:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8002a18:	7bfb      	ldrb	r3, [r7, #15]
 8002a1a:	105b      	asrs	r3, r3, #1
 8002a1c:	f003 0310 	and.w	r3, r3, #16
 8002a20:	431a      	orrs	r2, r3
 8002a22:	7bfb      	ldrb	r3, [r7, #15]
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	f003 0320 	and.w	r3, r3, #32
 8002a2a:	431a      	orrs	r2, r3
 8002a2c:	7bfb      	ldrb	r3, [r7, #15]
 8002a2e:	f003 0308 	and.w	r3, r3, #8
 8002a32:	431a      	orrs	r2, r3
 8002a34:	4b35      	ldr	r3, [pc, #212]	; (8002b0c <WriteCmdParamN+0x160>)
 8002a36:	619a      	str	r2, [r3, #24]
 8002a38:	7bfb      	ldrb	r3, [r7, #15]
 8002a3a:	019b      	lsls	r3, r3, #6
 8002a3c:	4a35      	ldr	r2, [pc, #212]	; (8002b14 <WriteCmdParamN+0x168>)
 8002a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a42:	6193      	str	r3, [r2, #24]
 8002a44:	2102      	movs	r1, #2
 8002a46:	4832      	ldr	r0, [pc, #200]	; (8002b10 <WriteCmdParamN+0x164>)
 8002a48:	f7ff fbc4 	bl	80021d4 <PIN_LOW>
 8002a4c:	2102      	movs	r1, #2
 8002a4e:	4830      	ldr	r0, [pc, #192]	; (8002b10 <WriteCmdParamN+0x164>)
 8002a50:	f7ff fbc0 	bl	80021d4 <PIN_LOW>
 8002a54:	2102      	movs	r1, #2
 8002a56:	482e      	ldr	r0, [pc, #184]	; (8002b10 <WriteCmdParamN+0x164>)
 8002a58:	f7ff fbbc 	bl	80021d4 <PIN_LOW>
 8002a5c:	2102      	movs	r1, #2
 8002a5e:	482c      	ldr	r0, [pc, #176]	; (8002b10 <WriteCmdParamN+0x164>)
 8002a60:	f7ff fbc8 	bl	80021f4 <PIN_HIGH>
 8002a64:	2102      	movs	r1, #2
 8002a66:	482a      	ldr	r0, [pc, #168]	; (8002b10 <WriteCmdParamN+0x164>)
 8002a68:	f7ff fbc4 	bl	80021f4 <PIN_HIGH>
 8002a6c:	4b28      	ldr	r3, [pc, #160]	; (8002b10 <WriteCmdParamN+0x164>)
 8002a6e:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8002a72:	619a      	str	r2, [r3, #24]
 8002a74:	4b25      	ldr	r3, [pc, #148]	; (8002b0c <WriteCmdParamN+0x160>)
 8002a76:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8002a7a:	619a      	str	r2, [r3, #24]
 8002a7c:	4b25      	ldr	r3, [pc, #148]	; (8002b14 <WriteCmdParamN+0x168>)
 8002a7e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002a82:	619a      	str	r2, [r3, #24]
 8002a84:	7bbb      	ldrb	r3, [r7, #14]
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8002a8c:	7bbb      	ldrb	r3, [r7, #14]
 8002a8e:	021b      	lsls	r3, r3, #8
 8002a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a94:	431a      	orrs	r2, r3
 8002a96:	7bbb      	ldrb	r3, [r7, #14]
 8002a98:	025b      	lsls	r3, r3, #9
 8002a9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a9e:	431a      	orrs	r2, r3
 8002aa0:	4b1b      	ldr	r3, [pc, #108]	; (8002b10 <WriteCmdParamN+0x164>)
 8002aa2:	619a      	str	r2, [r3, #24]
 8002aa4:	7bbb      	ldrb	r3, [r7, #14]
 8002aa6:	011b      	lsls	r3, r3, #4
 8002aa8:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8002aac:	7bbb      	ldrb	r3, [r7, #14]
 8002aae:	105b      	asrs	r3, r3, #1
 8002ab0:	f003 0310 	and.w	r3, r3, #16
 8002ab4:	431a      	orrs	r2, r3
 8002ab6:	7bbb      	ldrb	r3, [r7, #14]
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	f003 0320 	and.w	r3, r3, #32
 8002abe:	431a      	orrs	r2, r3
 8002ac0:	7bbb      	ldrb	r3, [r7, #14]
 8002ac2:	f003 0308 	and.w	r3, r3, #8
 8002ac6:	431a      	orrs	r2, r3
 8002ac8:	4b10      	ldr	r3, [pc, #64]	; (8002b0c <WriteCmdParamN+0x160>)
 8002aca:	619a      	str	r2, [r3, #24]
 8002acc:	7bbb      	ldrb	r3, [r7, #14]
 8002ace:	019b      	lsls	r3, r3, #6
 8002ad0:	4a10      	ldr	r2, [pc, #64]	; (8002b14 <WriteCmdParamN+0x168>)
 8002ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ad6:	6193      	str	r3, [r2, #24]
 8002ad8:	2102      	movs	r1, #2
 8002ada:	480d      	ldr	r0, [pc, #52]	; (8002b10 <WriteCmdParamN+0x164>)
 8002adc:	f7ff fb7a 	bl	80021d4 <PIN_LOW>
 8002ae0:	2102      	movs	r1, #2
 8002ae2:	480b      	ldr	r0, [pc, #44]	; (8002b10 <WriteCmdParamN+0x164>)
 8002ae4:	f7ff fb76 	bl	80021d4 <PIN_LOW>
 8002ae8:	2102      	movs	r1, #2
 8002aea:	4809      	ldr	r0, [pc, #36]	; (8002b10 <WriteCmdParamN+0x164>)
 8002aec:	f7ff fb72 	bl	80021d4 <PIN_LOW>
 8002af0:	2102      	movs	r1, #2
 8002af2:	4807      	ldr	r0, [pc, #28]	; (8002b10 <WriteCmdParamN+0x164>)
 8002af4:	f7ff fb7e 	bl	80021f4 <PIN_HIGH>
 8002af8:	2102      	movs	r1, #2
 8002afa:	4805      	ldr	r0, [pc, #20]	; (8002b10 <WriteCmdParamN+0x164>)
 8002afc:	f7ff fb7a 	bl	80021f4 <PIN_HIGH>
 8002b00:	2110      	movs	r1, #16
 8002b02:	4803      	ldr	r0, [pc, #12]	; (8002b10 <WriteCmdParamN+0x164>)
 8002b04:	f7ff fb76 	bl	80021f4 <PIN_HIGH>
    while (N-- > 0) {
 8002b08:	e104      	b.n	8002d14 <WriteCmdParamN+0x368>
 8002b0a:	bf00      	nop
 8002b0c:	40020400 	.word	0x40020400
 8002b10:	40020000 	.word	0x40020000
 8002b14:	40020800 	.word	0x40020800
        uint8_t u8 = *block++;
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	1c5a      	adds	r2, r3, #1
 8002b1c:	603a      	str	r2, [r7, #0]
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	737b      	strb	r3, [r7, #13]
        write8(u8);
 8002b22:	4b85      	ldr	r3, [pc, #532]	; (8002d38 <WriteCmdParamN+0x38c>)
 8002b24:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8002b28:	619a      	str	r2, [r3, #24]
 8002b2a:	4b84      	ldr	r3, [pc, #528]	; (8002d3c <WriteCmdParamN+0x390>)
 8002b2c:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8002b30:	619a      	str	r2, [r3, #24]
 8002b32:	4b83      	ldr	r3, [pc, #524]	; (8002d40 <WriteCmdParamN+0x394>)
 8002b34:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002b38:	619a      	str	r2, [r3, #24]
 8002b3a:	7b7b      	ldrb	r3, [r7, #13]
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8002b42:	7b7b      	ldrb	r3, [r7, #13]
 8002b44:	021b      	lsls	r3, r3, #8
 8002b46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b4a:	431a      	orrs	r2, r3
 8002b4c:	7b7b      	ldrb	r3, [r7, #13]
 8002b4e:	025b      	lsls	r3, r3, #9
 8002b50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b54:	431a      	orrs	r2, r3
 8002b56:	4b78      	ldr	r3, [pc, #480]	; (8002d38 <WriteCmdParamN+0x38c>)
 8002b58:	619a      	str	r2, [r3, #24]
 8002b5a:	7b7b      	ldrb	r3, [r7, #13]
 8002b5c:	011b      	lsls	r3, r3, #4
 8002b5e:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8002b62:	7b7b      	ldrb	r3, [r7, #13]
 8002b64:	105b      	asrs	r3, r3, #1
 8002b66:	f003 0310 	and.w	r3, r3, #16
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	7b7b      	ldrb	r3, [r7, #13]
 8002b6e:	005b      	lsls	r3, r3, #1
 8002b70:	f003 0320 	and.w	r3, r3, #32
 8002b74:	431a      	orrs	r2, r3
 8002b76:	7b7b      	ldrb	r3, [r7, #13]
 8002b78:	f003 0308 	and.w	r3, r3, #8
 8002b7c:	431a      	orrs	r2, r3
 8002b7e:	4b6f      	ldr	r3, [pc, #444]	; (8002d3c <WriteCmdParamN+0x390>)
 8002b80:	619a      	str	r2, [r3, #24]
 8002b82:	7b7b      	ldrb	r3, [r7, #13]
 8002b84:	019b      	lsls	r3, r3, #6
 8002b86:	4a6e      	ldr	r2, [pc, #440]	; (8002d40 <WriteCmdParamN+0x394>)
 8002b88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b8c:	6193      	str	r3, [r2, #24]
 8002b8e:	2102      	movs	r1, #2
 8002b90:	4869      	ldr	r0, [pc, #420]	; (8002d38 <WriteCmdParamN+0x38c>)
 8002b92:	f7ff fb1f 	bl	80021d4 <PIN_LOW>
 8002b96:	2102      	movs	r1, #2
 8002b98:	4867      	ldr	r0, [pc, #412]	; (8002d38 <WriteCmdParamN+0x38c>)
 8002b9a:	f7ff fb1b 	bl	80021d4 <PIN_LOW>
 8002b9e:	2102      	movs	r1, #2
 8002ba0:	4865      	ldr	r0, [pc, #404]	; (8002d38 <WriteCmdParamN+0x38c>)
 8002ba2:	f7ff fb17 	bl	80021d4 <PIN_LOW>
 8002ba6:	2102      	movs	r1, #2
 8002ba8:	4863      	ldr	r0, [pc, #396]	; (8002d38 <WriteCmdParamN+0x38c>)
 8002baa:	f7ff fb23 	bl	80021f4 <PIN_HIGH>
 8002bae:	2102      	movs	r1, #2
 8002bb0:	4861      	ldr	r0, [pc, #388]	; (8002d38 <WriteCmdParamN+0x38c>)
 8002bb2:	f7ff fb1f 	bl	80021f4 <PIN_HIGH>
        if (N && is8347) {
 8002bb6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f000 80aa 	beq.w	8002d14 <WriteCmdParamN+0x368>
 8002bc0:	4b60      	ldr	r3, [pc, #384]	; (8002d44 <WriteCmdParamN+0x398>)
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f000 80a5 	beq.w	8002d14 <WriteCmdParamN+0x368>
            cmd++;
 8002bca:	88fb      	ldrh	r3, [r7, #6]
 8002bcc:	3301      	adds	r3, #1
 8002bce:	80fb      	strh	r3, [r7, #6]
            WriteCmd(cmd);
 8002bd0:	2110      	movs	r1, #16
 8002bd2:	4859      	ldr	r0, [pc, #356]	; (8002d38 <WriteCmdParamN+0x38c>)
 8002bd4:	f7ff fafe 	bl	80021d4 <PIN_LOW>
 8002bd8:	88fb      	ldrh	r3, [r7, #6]
 8002bda:	0a1b      	lsrs	r3, r3, #8
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	733b      	strb	r3, [r7, #12]
 8002be0:	88fb      	ldrh	r3, [r7, #6]
 8002be2:	72fb      	strb	r3, [r7, #11]
 8002be4:	4b54      	ldr	r3, [pc, #336]	; (8002d38 <WriteCmdParamN+0x38c>)
 8002be6:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8002bea:	619a      	str	r2, [r3, #24]
 8002bec:	4b53      	ldr	r3, [pc, #332]	; (8002d3c <WriteCmdParamN+0x390>)
 8002bee:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8002bf2:	619a      	str	r2, [r3, #24]
 8002bf4:	4b52      	ldr	r3, [pc, #328]	; (8002d40 <WriteCmdParamN+0x394>)
 8002bf6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002bfa:	619a      	str	r2, [r3, #24]
 8002bfc:	7b3b      	ldrb	r3, [r7, #12]
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8002c04:	7b3b      	ldrb	r3, [r7, #12]
 8002c06:	021b      	lsls	r3, r3, #8
 8002c08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c0c:	431a      	orrs	r2, r3
 8002c0e:	7b3b      	ldrb	r3, [r7, #12]
 8002c10:	025b      	lsls	r3, r3, #9
 8002c12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c16:	431a      	orrs	r2, r3
 8002c18:	4b47      	ldr	r3, [pc, #284]	; (8002d38 <WriteCmdParamN+0x38c>)
 8002c1a:	619a      	str	r2, [r3, #24]
 8002c1c:	7b3b      	ldrb	r3, [r7, #12]
 8002c1e:	011b      	lsls	r3, r3, #4
 8002c20:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8002c24:	7b3b      	ldrb	r3, [r7, #12]
 8002c26:	105b      	asrs	r3, r3, #1
 8002c28:	f003 0310 	and.w	r3, r3, #16
 8002c2c:	431a      	orrs	r2, r3
 8002c2e:	7b3b      	ldrb	r3, [r7, #12]
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	f003 0320 	and.w	r3, r3, #32
 8002c36:	431a      	orrs	r2, r3
 8002c38:	7b3b      	ldrb	r3, [r7, #12]
 8002c3a:	f003 0308 	and.w	r3, r3, #8
 8002c3e:	431a      	orrs	r2, r3
 8002c40:	4b3e      	ldr	r3, [pc, #248]	; (8002d3c <WriteCmdParamN+0x390>)
 8002c42:	619a      	str	r2, [r3, #24]
 8002c44:	7b3b      	ldrb	r3, [r7, #12]
 8002c46:	019b      	lsls	r3, r3, #6
 8002c48:	4a3d      	ldr	r2, [pc, #244]	; (8002d40 <WriteCmdParamN+0x394>)
 8002c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c4e:	6193      	str	r3, [r2, #24]
 8002c50:	2102      	movs	r1, #2
 8002c52:	4839      	ldr	r0, [pc, #228]	; (8002d38 <WriteCmdParamN+0x38c>)
 8002c54:	f7ff fabe 	bl	80021d4 <PIN_LOW>
 8002c58:	2102      	movs	r1, #2
 8002c5a:	4837      	ldr	r0, [pc, #220]	; (8002d38 <WriteCmdParamN+0x38c>)
 8002c5c:	f7ff faba 	bl	80021d4 <PIN_LOW>
 8002c60:	2102      	movs	r1, #2
 8002c62:	4835      	ldr	r0, [pc, #212]	; (8002d38 <WriteCmdParamN+0x38c>)
 8002c64:	f7ff fab6 	bl	80021d4 <PIN_LOW>
 8002c68:	2102      	movs	r1, #2
 8002c6a:	4833      	ldr	r0, [pc, #204]	; (8002d38 <WriteCmdParamN+0x38c>)
 8002c6c:	f7ff fac2 	bl	80021f4 <PIN_HIGH>
 8002c70:	2102      	movs	r1, #2
 8002c72:	4831      	ldr	r0, [pc, #196]	; (8002d38 <WriteCmdParamN+0x38c>)
 8002c74:	f7ff fabe 	bl	80021f4 <PIN_HIGH>
 8002c78:	4b2f      	ldr	r3, [pc, #188]	; (8002d38 <WriteCmdParamN+0x38c>)
 8002c7a:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8002c7e:	619a      	str	r2, [r3, #24]
 8002c80:	4b2e      	ldr	r3, [pc, #184]	; (8002d3c <WriteCmdParamN+0x390>)
 8002c82:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8002c86:	619a      	str	r2, [r3, #24]
 8002c88:	4b2d      	ldr	r3, [pc, #180]	; (8002d40 <WriteCmdParamN+0x394>)
 8002c8a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002c8e:	619a      	str	r2, [r3, #24]
 8002c90:	7afb      	ldrb	r3, [r7, #11]
 8002c92:	005b      	lsls	r3, r3, #1
 8002c94:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8002c98:	7afb      	ldrb	r3, [r7, #11]
 8002c9a:	021b      	lsls	r3, r3, #8
 8002c9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ca0:	431a      	orrs	r2, r3
 8002ca2:	7afb      	ldrb	r3, [r7, #11]
 8002ca4:	025b      	lsls	r3, r3, #9
 8002ca6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002caa:	431a      	orrs	r2, r3
 8002cac:	4b22      	ldr	r3, [pc, #136]	; (8002d38 <WriteCmdParamN+0x38c>)
 8002cae:	619a      	str	r2, [r3, #24]
 8002cb0:	7afb      	ldrb	r3, [r7, #11]
 8002cb2:	011b      	lsls	r3, r3, #4
 8002cb4:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8002cb8:	7afb      	ldrb	r3, [r7, #11]
 8002cba:	105b      	asrs	r3, r3, #1
 8002cbc:	f003 0310 	and.w	r3, r3, #16
 8002cc0:	431a      	orrs	r2, r3
 8002cc2:	7afb      	ldrb	r3, [r7, #11]
 8002cc4:	005b      	lsls	r3, r3, #1
 8002cc6:	f003 0320 	and.w	r3, r3, #32
 8002cca:	431a      	orrs	r2, r3
 8002ccc:	7afb      	ldrb	r3, [r7, #11]
 8002cce:	f003 0308 	and.w	r3, r3, #8
 8002cd2:	431a      	orrs	r2, r3
 8002cd4:	4b19      	ldr	r3, [pc, #100]	; (8002d3c <WriteCmdParamN+0x390>)
 8002cd6:	619a      	str	r2, [r3, #24]
 8002cd8:	7afb      	ldrb	r3, [r7, #11]
 8002cda:	019b      	lsls	r3, r3, #6
 8002cdc:	4a18      	ldr	r2, [pc, #96]	; (8002d40 <WriteCmdParamN+0x394>)
 8002cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ce2:	6193      	str	r3, [r2, #24]
 8002ce4:	2102      	movs	r1, #2
 8002ce6:	4814      	ldr	r0, [pc, #80]	; (8002d38 <WriteCmdParamN+0x38c>)
 8002ce8:	f7ff fa74 	bl	80021d4 <PIN_LOW>
 8002cec:	2102      	movs	r1, #2
 8002cee:	4812      	ldr	r0, [pc, #72]	; (8002d38 <WriteCmdParamN+0x38c>)
 8002cf0:	f7ff fa70 	bl	80021d4 <PIN_LOW>
 8002cf4:	2102      	movs	r1, #2
 8002cf6:	4810      	ldr	r0, [pc, #64]	; (8002d38 <WriteCmdParamN+0x38c>)
 8002cf8:	f7ff fa6c 	bl	80021d4 <PIN_LOW>
 8002cfc:	2102      	movs	r1, #2
 8002cfe:	480e      	ldr	r0, [pc, #56]	; (8002d38 <WriteCmdParamN+0x38c>)
 8002d00:	f7ff fa78 	bl	80021f4 <PIN_HIGH>
 8002d04:	2102      	movs	r1, #2
 8002d06:	480c      	ldr	r0, [pc, #48]	; (8002d38 <WriteCmdParamN+0x38c>)
 8002d08:	f7ff fa74 	bl	80021f4 <PIN_HIGH>
 8002d0c:	2110      	movs	r1, #16
 8002d0e:	480a      	ldr	r0, [pc, #40]	; (8002d38 <WriteCmdParamN+0x38c>)
 8002d10:	f7ff fa70 	bl	80021f4 <PIN_HIGH>
    while (N-- > 0) {
 8002d14:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002d18:	b2da      	uxtb	r2, r3
 8002d1a:	3a01      	subs	r2, #1
 8002d1c:	b2d2      	uxtb	r2, r2
 8002d1e:	717a      	strb	r2, [r7, #5]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f73f aef9 	bgt.w	8002b18 <WriteCmdParamN+0x16c>
        }
    }
    CS_IDLE;
 8002d26:	2101      	movs	r1, #1
 8002d28:	4804      	ldr	r0, [pc, #16]	; (8002d3c <WriteCmdParamN+0x390>)
 8002d2a:	f7ff fa63 	bl	80021f4 <PIN_HIGH>
}
 8002d2e:	bf00      	nop
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	40020000 	.word	0x40020000
 8002d3c:	40020400 	.word	0x40020400
 8002d40:	40020800 	.word	0x40020800
 8002d44:	20000219 	.word	0x20000219

08002d48 <WriteCmdParam4>:


static inline void WriteCmdParam4(uint8_t cmd, uint8_t d1, uint8_t d2, uint8_t d3, uint8_t d4)
{
 8002d48:	b590      	push	{r4, r7, lr}
 8002d4a:	b085      	sub	sp, #20
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	4604      	mov	r4, r0
 8002d50:	4608      	mov	r0, r1
 8002d52:	4611      	mov	r1, r2
 8002d54:	461a      	mov	r2, r3
 8002d56:	4623      	mov	r3, r4
 8002d58:	71fb      	strb	r3, [r7, #7]
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	71bb      	strb	r3, [r7, #6]
 8002d5e:	460b      	mov	r3, r1
 8002d60:	717b      	strb	r3, [r7, #5]
 8002d62:	4613      	mov	r3, r2
 8002d64:	713b      	strb	r3, [r7, #4]
    uint8_t d[4];
    d[0] = d1, d[1] = d2, d[2] = d3, d[3] = d4;
 8002d66:	79bb      	ldrb	r3, [r7, #6]
 8002d68:	733b      	strb	r3, [r7, #12]
 8002d6a:	797b      	ldrb	r3, [r7, #5]
 8002d6c:	737b      	strb	r3, [r7, #13]
 8002d6e:	793b      	ldrb	r3, [r7, #4]
 8002d70:	73bb      	strb	r3, [r7, #14]
 8002d72:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002d76:	73fb      	strb	r3, [r7, #15]
    WriteCmdParamN(cmd, 4, d);
 8002d78:	79fb      	ldrb	r3, [r7, #7]
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	f107 020c 	add.w	r2, r7, #12
 8002d80:	2104      	movs	r1, #4
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7ff fe12 	bl	80029ac <WriteCmdParamN>
}
 8002d88:	bf00      	nop
 8002d8a:	3714      	adds	r7, #20
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd90      	pop	{r4, r7, pc}

08002d90 <init_table>:

#define TFTLCD_DELAY 0xFFFF
#define TFTLCD_DELAY8 0x7F

static void init_table(const void *table, int16_t size)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b08a      	sub	sp, #40	; 0x28
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	460b      	mov	r3, r1
 8002d9a:	807b      	strh	r3, [r7, #2]

    uint8_t *p = (uint8_t *) table, dat[24];            //R61526 has GAMMA[22]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	627b      	str	r3, [r7, #36]	; 0x24

    while (size > 0)
 8002da0:	e046      	b.n	8002e30 <init_table+0xa0>
    {
        uint8_t cmd = pgm_read_byte(p++);
 8002da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da4:	1c5a      	adds	r2, r3, #1
 8002da6:	627a      	str	r2, [r7, #36]	; 0x24
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        uint8_t len = pgm_read_byte(p++);
 8002dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db0:	1c5a      	adds	r2, r3, #1
 8002db2:	627a      	str	r2, [r7, #36]	; 0x24
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if (cmd == TFTLCD_DELAY8)
 8002dba:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002dbe:	2b7f      	cmp	r3, #127	; 0x7f
 8002dc0:	d108      	bne.n	8002dd4 <init_table+0x44>
        {
            delay(len);
 8002dc2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f003 fa32 	bl	8006230 <delay>
            len = 0;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dd2:	e024      	b.n	8002e1e <init_table+0x8e>
        }
        else
        {
            for (uint8_t i = 0; i < len; i++)
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002dda:	e010      	b.n	8002dfe <init_table+0x6e>
                dat[i] = pgm_read_byte(p++);
 8002ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dde:	1c5a      	adds	r2, r3, #1
 8002de0:	627a      	str	r2, [r7, #36]	; 0x24
 8002de2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8002de6:	7819      	ldrb	r1, [r3, #0]
 8002de8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002dec:	4413      	add	r3, r2
 8002dee:	460a      	mov	r2, r1
 8002df0:	f803 2c20 	strb.w	r2, [r3, #-32]
            for (uint8_t i = 0; i < len; i++)
 8002df4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002df8:	3301      	adds	r3, #1
 8002dfa:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002dfe:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8002e02:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d3e8      	bcc.n	8002ddc <init_table+0x4c>
            WriteCmdParamN(cmd, len, dat);
 8002e0a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 8002e14:	f107 0208 	add.w	r2, r7, #8
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7ff fdc7 	bl	80029ac <WriteCmdParamN>
        }
        size -= len + 2;
 8002e1e:	887a      	ldrh	r2, [r7, #2]
 8002e20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	3b02      	subs	r3, #2
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	807b      	strh	r3, [r7, #2]
    while (size > 0)
 8002e30:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	dcb4      	bgt.n	8002da2 <init_table+0x12>
    }
}
 8002e38:	bf00      	nop
 8002e3a:	bf00      	nop
 8002e3c:	3728      	adds	r7, #40	; 0x28
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <init_table16>:


static void init_table16(const void *table, int16_t size)
{
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b084      	sub	sp, #16
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
 8002e4a:	460b      	mov	r3, r1
 8002e4c:	807b      	strh	r3, [r7, #2]
    uint16_t *p = (uint16_t *) table;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	60fb      	str	r3, [r7, #12]
    while (size > 0) {
 8002e52:	e01d      	b.n	8002e90 <init_table16+0x4e>
        uint16_t cmd = pgm_read_word(p++);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	1c9a      	adds	r2, r3, #2
 8002e58:	60fa      	str	r2, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	817b      	strh	r3, [r7, #10]
        uint16_t d = pgm_read_word(p++);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	1c9a      	adds	r2, r3, #2
 8002e62:	60fa      	str	r2, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	813b      	strh	r3, [r7, #8]
        if (cmd == TFTLCD_DELAY)
 8002e68:	897b      	ldrh	r3, [r7, #10]
 8002e6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d104      	bne.n	8002e7c <init_table16+0x3a>
            delay(d);
 8002e72:	893b      	ldrh	r3, [r7, #8]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f003 f9db 	bl	8006230 <delay>
 8002e7a:	e005      	b.n	8002e88 <init_table16+0x46>
        else {
			writecmddata(cmd, d);                      //static function
 8002e7c:	893a      	ldrh	r2, [r7, #8]
 8002e7e:	897b      	ldrh	r3, [r7, #10]
 8002e80:	4611      	mov	r1, r2
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7ff fc3c 	bl	8002700 <writecmddata>
        }
        size -= 2 * sizeof(int16_t);
 8002e88:	887b      	ldrh	r3, [r7, #2]
 8002e8a:	3b04      	subs	r3, #4
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	807b      	strh	r3, [r7, #2]
    while (size > 0) {
 8002e90:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	dcdd      	bgt.n	8002e54 <init_table16+0x12>
    }
}
 8002e98:	bf00      	nop
 8002e9a:	bf00      	nop
 8002e9c:	3710      	adds	r7, #16
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
	...

08002ea4 <reset>:


void reset(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
    done_reset = 1;
 8002ea8:	4b20      	ldr	r3, [pc, #128]	; (8002f2c <reset+0x88>)
 8002eaa:	2201      	movs	r2, #1
 8002eac:	701a      	strb	r2, [r3, #0]
    setWriteDir();
 8002eae:	f7ff faf9 	bl	80024a4 <setWriteDir>
    CTL_INIT();
 8002eb2:	2101      	movs	r1, #1
 8002eb4:	481e      	ldr	r0, [pc, #120]	; (8002f30 <reset+0x8c>)
 8002eb6:	f7ff f9c3 	bl	8002240 <PIN_OUTPUT>
 8002eba:	2102      	movs	r1, #2
 8002ebc:	481c      	ldr	r0, [pc, #112]	; (8002f30 <reset+0x8c>)
 8002ebe:	f7ff f9bf 	bl	8002240 <PIN_OUTPUT>
 8002ec2:	2110      	movs	r1, #16
 8002ec4:	481a      	ldr	r0, [pc, #104]	; (8002f30 <reset+0x8c>)
 8002ec6:	f7ff f9bb 	bl	8002240 <PIN_OUTPUT>
 8002eca:	2101      	movs	r1, #1
 8002ecc:	4819      	ldr	r0, [pc, #100]	; (8002f34 <reset+0x90>)
 8002ece:	f7ff f9b7 	bl	8002240 <PIN_OUTPUT>
 8002ed2:	2102      	movs	r1, #2
 8002ed4:	4818      	ldr	r0, [pc, #96]	; (8002f38 <reset+0x94>)
 8002ed6:	f7ff f9b3 	bl	8002240 <PIN_OUTPUT>
    CS_IDLE;
 8002eda:	2101      	movs	r1, #1
 8002edc:	4815      	ldr	r0, [pc, #84]	; (8002f34 <reset+0x90>)
 8002ede:	f7ff f989 	bl	80021f4 <PIN_HIGH>
    RD_IDLE;
 8002ee2:	2101      	movs	r1, #1
 8002ee4:	4812      	ldr	r0, [pc, #72]	; (8002f30 <reset+0x8c>)
 8002ee6:	f7ff f985 	bl	80021f4 <PIN_HIGH>
    WR_IDLE;
 8002eea:	2102      	movs	r1, #2
 8002eec:	4810      	ldr	r0, [pc, #64]	; (8002f30 <reset+0x8c>)
 8002eee:	f7ff f981 	bl	80021f4 <PIN_HIGH>
    RESET_IDLE;
 8002ef2:	2102      	movs	r1, #2
 8002ef4:	4810      	ldr	r0, [pc, #64]	; (8002f38 <reset+0x94>)
 8002ef6:	f7ff f97d 	bl	80021f4 <PIN_HIGH>
    delay(50);
 8002efa:	2032      	movs	r0, #50	; 0x32
 8002efc:	f003 f998 	bl	8006230 <delay>
    RESET_ACTIVE;
 8002f00:	2102      	movs	r1, #2
 8002f02:	480d      	ldr	r0, [pc, #52]	; (8002f38 <reset+0x94>)
 8002f04:	f7ff f966 	bl	80021d4 <PIN_LOW>
    delay(100);
 8002f08:	2064      	movs	r0, #100	; 0x64
 8002f0a:	f003 f991 	bl	8006230 <delay>
    RESET_IDLE;
 8002f0e:	2102      	movs	r1, #2
 8002f10:	4809      	ldr	r0, [pc, #36]	; (8002f38 <reset+0x94>)
 8002f12:	f7ff f96f 	bl	80021f4 <PIN_HIGH>
    delay(1000);	//delay(100);	Poloni (28/05) Vide manual ILI9340 pg. 220
 8002f16:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002f1a:	f003 f989 	bl	8006230 <delay>
	WriteCmdData(0xB0, 0x0000);   //R61520 needs this to read ID
 8002f1e:	2100      	movs	r1, #0
 8002f20:	20b0      	movs	r0, #176	; 0xb0
 8002f22:	f7ff fa6c 	bl	80023fe <WriteCmdData>
}
 8002f26:	bf00      	nop
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	20000218 	.word	0x20000218
 8002f30:	40020000 	.word	0x40020000
 8002f34:	40020400 	.word	0x40020400
 8002f38:	40020800 	.word	0x40020800

08002f3c <read16bits>:


static uint16_t read16bits(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
    uint16_t ret;
    uint8_t lo;
    READ_8(ret);
 8002f42:	2101      	movs	r1, #1
 8002f44:	4873      	ldr	r0, [pc, #460]	; (8003114 <read16bits+0x1d8>)
 8002f46:	f7ff f955 	bl	80021f4 <PIN_HIGH>
 8002f4a:	2101      	movs	r1, #1
 8002f4c:	4871      	ldr	r0, [pc, #452]	; (8003114 <read16bits+0x1d8>)
 8002f4e:	f7ff f941 	bl	80021d4 <PIN_LOW>
 8002f52:	2101      	movs	r1, #1
 8002f54:	486f      	ldr	r0, [pc, #444]	; (8003114 <read16bits+0x1d8>)
 8002f56:	f7ff f93d 	bl	80021d4 <PIN_LOW>
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	486d      	ldr	r0, [pc, #436]	; (8003114 <read16bits+0x1d8>)
 8002f5e:	f7ff f939 	bl	80021d4 <PIN_LOW>
 8002f62:	2101      	movs	r1, #1
 8002f64:	486b      	ldr	r0, [pc, #428]	; (8003114 <read16bits+0x1d8>)
 8002f66:	f7ff f935 	bl	80021d4 <PIN_LOW>
 8002f6a:	2101      	movs	r1, #1
 8002f6c:	4869      	ldr	r0, [pc, #420]	; (8003114 <read16bits+0x1d8>)
 8002f6e:	f7ff f931 	bl	80021d4 <PIN_LOW>
 8002f72:	2101      	movs	r1, #1
 8002f74:	4867      	ldr	r0, [pc, #412]	; (8003114 <read16bits+0x1d8>)
 8002f76:	f7ff f92d 	bl	80021d4 <PIN_LOW>
 8002f7a:	2101      	movs	r1, #1
 8002f7c:	4865      	ldr	r0, [pc, #404]	; (8003114 <read16bits+0x1d8>)
 8002f7e:	f7ff f929 	bl	80021d4 <PIN_LOW>
 8002f82:	4b64      	ldr	r3, [pc, #400]	; (8003114 <read16bits+0x1d8>)
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	085b      	lsrs	r3, r3, #1
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f8e:	b29a      	uxth	r2, r3
 8002f90:	4b61      	ldr	r3, [pc, #388]	; (8003118 <read16bits+0x1dc>)
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	091b      	lsrs	r3, r3, #4
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	b29a      	uxth	r2, r3
 8002fa2:	4b5d      	ldr	r3, [pc, #372]	; (8003118 <read16bits+0x1dc>)
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	005b      	lsls	r3, r3, #1
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	f003 0320 	and.w	r3, r3, #32
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	b29a      	uxth	r2, r3
 8002fb6:	4b58      	ldr	r3, [pc, #352]	; (8003118 <read16bits+0x1dc>)
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	085b      	lsrs	r3, r3, #1
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	f003 0310 	and.w	r3, r3, #16
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	b29a      	uxth	r2, r3
 8002fc8:	4b53      	ldr	r3, [pc, #332]	; (8003118 <read16bits+0x1dc>)
 8002fca:	691b      	ldr	r3, [r3, #16]
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	f003 0308 	and.w	r3, r3, #8
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	4b4e      	ldr	r3, [pc, #312]	; (8003114 <read16bits+0x1d8>)
 8002fda:	691b      	ldr	r3, [r3, #16]
 8002fdc:	0a1b      	lsrs	r3, r3, #8
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	f003 0304 	and.w	r3, r3, #4
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	b29a      	uxth	r2, r3
 8002fea:	4b4c      	ldr	r3, [pc, #304]	; (800311c <read16bits+0x1e0>)
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	099b      	lsrs	r3, r3, #6
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	4b45      	ldr	r3, [pc, #276]	; (8003114 <read16bits+0x1d8>)
 8002ffe:	691b      	ldr	r3, [r3, #16]
 8003000:	0a5b      	lsrs	r3, r3, #9
 8003002:	b29b      	uxth	r3, r3
 8003004:	f003 0301 	and.w	r3, r3, #1
 8003008:	b29b      	uxth	r3, r3
 800300a:	4313      	orrs	r3, r2
 800300c:	80fb      	strh	r3, [r7, #6]
 800300e:	2101      	movs	r1, #1
 8003010:	4840      	ldr	r0, [pc, #256]	; (8003114 <read16bits+0x1d8>)
 8003012:	f7ff f8ef 	bl	80021f4 <PIN_HIGH>
 8003016:	2101      	movs	r1, #1
 8003018:	483e      	ldr	r0, [pc, #248]	; (8003114 <read16bits+0x1d8>)
 800301a:	f7ff f8eb 	bl	80021f4 <PIN_HIGH>
    READ_8(lo);
 800301e:	2101      	movs	r1, #1
 8003020:	483c      	ldr	r0, [pc, #240]	; (8003114 <read16bits+0x1d8>)
 8003022:	f7ff f8e7 	bl	80021f4 <PIN_HIGH>
 8003026:	2101      	movs	r1, #1
 8003028:	483a      	ldr	r0, [pc, #232]	; (8003114 <read16bits+0x1d8>)
 800302a:	f7ff f8d3 	bl	80021d4 <PIN_LOW>
 800302e:	2101      	movs	r1, #1
 8003030:	4838      	ldr	r0, [pc, #224]	; (8003114 <read16bits+0x1d8>)
 8003032:	f7ff f8cf 	bl	80021d4 <PIN_LOW>
 8003036:	2101      	movs	r1, #1
 8003038:	4836      	ldr	r0, [pc, #216]	; (8003114 <read16bits+0x1d8>)
 800303a:	f7ff f8cb 	bl	80021d4 <PIN_LOW>
 800303e:	2101      	movs	r1, #1
 8003040:	4834      	ldr	r0, [pc, #208]	; (8003114 <read16bits+0x1d8>)
 8003042:	f7ff f8c7 	bl	80021d4 <PIN_LOW>
 8003046:	2101      	movs	r1, #1
 8003048:	4832      	ldr	r0, [pc, #200]	; (8003114 <read16bits+0x1d8>)
 800304a:	f7ff f8c3 	bl	80021d4 <PIN_LOW>
 800304e:	2101      	movs	r1, #1
 8003050:	4830      	ldr	r0, [pc, #192]	; (8003114 <read16bits+0x1d8>)
 8003052:	f7ff f8bf 	bl	80021d4 <PIN_LOW>
 8003056:	2101      	movs	r1, #1
 8003058:	482e      	ldr	r0, [pc, #184]	; (8003114 <read16bits+0x1d8>)
 800305a:	f7ff f8bb 	bl	80021d4 <PIN_LOW>
 800305e:	4b2d      	ldr	r3, [pc, #180]	; (8003114 <read16bits+0x1d8>)
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	085b      	lsrs	r3, r3, #1
 8003064:	b2db      	uxtb	r3, r3
 8003066:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800306a:	b2da      	uxtb	r2, r3
 800306c:	4b2a      	ldr	r3, [pc, #168]	; (8003118 <read16bits+0x1dc>)
 800306e:	691b      	ldr	r3, [r3, #16]
 8003070:	091b      	lsrs	r3, r3, #4
 8003072:	b2db      	uxtb	r3, r3
 8003074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003078:	b2db      	uxtb	r3, r3
 800307a:	4313      	orrs	r3, r2
 800307c:	b2da      	uxtb	r2, r3
 800307e:	4b26      	ldr	r3, [pc, #152]	; (8003118 <read16bits+0x1dc>)
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	b2db      	uxtb	r3, r3
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	b2db      	uxtb	r3, r3
 8003088:	f003 0320 	and.w	r3, r3, #32
 800308c:	b2db      	uxtb	r3, r3
 800308e:	4313      	orrs	r3, r2
 8003090:	b2da      	uxtb	r2, r3
 8003092:	4b21      	ldr	r3, [pc, #132]	; (8003118 <read16bits+0x1dc>)
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	085b      	lsrs	r3, r3, #1
 8003098:	b2db      	uxtb	r3, r3
 800309a:	f003 0310 	and.w	r3, r3, #16
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	4313      	orrs	r3, r2
 80030a2:	b2da      	uxtb	r2, r3
 80030a4:	4b1c      	ldr	r3, [pc, #112]	; (8003118 <read16bits+0x1dc>)
 80030a6:	691b      	ldr	r3, [r3, #16]
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	f003 0308 	and.w	r3, r3, #8
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	4313      	orrs	r3, r2
 80030b2:	b2da      	uxtb	r2, r3
 80030b4:	4b17      	ldr	r3, [pc, #92]	; (8003114 <read16bits+0x1d8>)
 80030b6:	691b      	ldr	r3, [r3, #16]
 80030b8:	0a1b      	lsrs	r3, r3, #8
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	f003 0304 	and.w	r3, r3, #4
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	4313      	orrs	r3, r2
 80030c4:	b2da      	uxtb	r2, r3
 80030c6:	4b15      	ldr	r3, [pc, #84]	; (800311c <read16bits+0x1e0>)
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	099b      	lsrs	r3, r3, #6
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	4313      	orrs	r3, r2
 80030d6:	b2da      	uxtb	r2, r3
 80030d8:	4b0e      	ldr	r3, [pc, #56]	; (8003114 <read16bits+0x1d8>)
 80030da:	691b      	ldr	r3, [r3, #16]
 80030dc:	0a5b      	lsrs	r3, r3, #9
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	f003 0301 	and.w	r3, r3, #1
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	4313      	orrs	r3, r2
 80030e8:	717b      	strb	r3, [r7, #5]
 80030ea:	2101      	movs	r1, #1
 80030ec:	4809      	ldr	r0, [pc, #36]	; (8003114 <read16bits+0x1d8>)
 80030ee:	f7ff f881 	bl	80021f4 <PIN_HIGH>
 80030f2:	2101      	movs	r1, #1
 80030f4:	4807      	ldr	r0, [pc, #28]	; (8003114 <read16bits+0x1d8>)
 80030f6:	f7ff f87d 	bl	80021f4 <PIN_HIGH>
    return (ret << 8) | lo;
 80030fa:	88fb      	ldrh	r3, [r7, #6]
 80030fc:	021b      	lsls	r3, r3, #8
 80030fe:	b21a      	sxth	r2, r3
 8003100:	797b      	ldrb	r3, [r7, #5]
 8003102:	b21b      	sxth	r3, r3
 8003104:	4313      	orrs	r3, r2
 8003106:	b21b      	sxth	r3, r3
 8003108:	b29b      	uxth	r3, r3
}
 800310a:	4618      	mov	r0, r3
 800310c:	3708      	adds	r7, #8
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	40020000 	.word	0x40020000
 8003118:	40020400 	.word	0x40020400
 800311c:	40020800 	.word	0x40020800

08003120 <readReg>:


uint16_t readReg(uint16_t reg, int8_t index)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	4603      	mov	r3, r0
 8003128:	460a      	mov	r2, r1
 800312a:	80fb      	strh	r3, [r7, #6]
 800312c:	4613      	mov	r3, r2
 800312e:	717b      	strb	r3, [r7, #5]
    uint16_t ret;
    uint8_t lo;
    if (!done_reset)
 8003130:	4b65      	ldr	r3, [pc, #404]	; (80032c8 <readReg+0x1a8>)
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d101      	bne.n	800313c <readReg+0x1c>
        reset();
 8003138:	f7ff feb4 	bl	8002ea4 <reset>
    CS_ACTIVE;
 800313c:	2101      	movs	r1, #1
 800313e:	4863      	ldr	r0, [pc, #396]	; (80032cc <readReg+0x1ac>)
 8003140:	f7ff f848 	bl	80021d4 <PIN_LOW>
    WriteCmd(reg);
 8003144:	2110      	movs	r1, #16
 8003146:	4862      	ldr	r0, [pc, #392]	; (80032d0 <readReg+0x1b0>)
 8003148:	f7ff f844 	bl	80021d4 <PIN_LOW>
 800314c:	88fb      	ldrh	r3, [r7, #6]
 800314e:	0a1b      	lsrs	r3, r3, #8
 8003150:	b29b      	uxth	r3, r3
 8003152:	73fb      	strb	r3, [r7, #15]
 8003154:	88fb      	ldrh	r3, [r7, #6]
 8003156:	73bb      	strb	r3, [r7, #14]
 8003158:	4b5d      	ldr	r3, [pc, #372]	; (80032d0 <readReg+0x1b0>)
 800315a:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 800315e:	619a      	str	r2, [r3, #24]
 8003160:	4b5a      	ldr	r3, [pc, #360]	; (80032cc <readReg+0x1ac>)
 8003162:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8003166:	619a      	str	r2, [r3, #24]
 8003168:	4b5a      	ldr	r3, [pc, #360]	; (80032d4 <readReg+0x1b4>)
 800316a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800316e:	619a      	str	r2, [r3, #24]
 8003170:	7bfb      	ldrb	r3, [r7, #15]
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8003178:	7bfb      	ldrb	r3, [r7, #15]
 800317a:	021b      	lsls	r3, r3, #8
 800317c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003180:	431a      	orrs	r2, r3
 8003182:	7bfb      	ldrb	r3, [r7, #15]
 8003184:	025b      	lsls	r3, r3, #9
 8003186:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800318a:	431a      	orrs	r2, r3
 800318c:	4b50      	ldr	r3, [pc, #320]	; (80032d0 <readReg+0x1b0>)
 800318e:	619a      	str	r2, [r3, #24]
 8003190:	7bfb      	ldrb	r3, [r7, #15]
 8003192:	011b      	lsls	r3, r3, #4
 8003194:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8003198:	7bfb      	ldrb	r3, [r7, #15]
 800319a:	105b      	asrs	r3, r3, #1
 800319c:	f003 0310 	and.w	r3, r3, #16
 80031a0:	431a      	orrs	r2, r3
 80031a2:	7bfb      	ldrb	r3, [r7, #15]
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	f003 0320 	and.w	r3, r3, #32
 80031aa:	431a      	orrs	r2, r3
 80031ac:	7bfb      	ldrb	r3, [r7, #15]
 80031ae:	f003 0308 	and.w	r3, r3, #8
 80031b2:	431a      	orrs	r2, r3
 80031b4:	4b45      	ldr	r3, [pc, #276]	; (80032cc <readReg+0x1ac>)
 80031b6:	619a      	str	r2, [r3, #24]
 80031b8:	7bfb      	ldrb	r3, [r7, #15]
 80031ba:	019b      	lsls	r3, r3, #6
 80031bc:	4a45      	ldr	r2, [pc, #276]	; (80032d4 <readReg+0x1b4>)
 80031be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031c2:	6193      	str	r3, [r2, #24]
 80031c4:	2102      	movs	r1, #2
 80031c6:	4842      	ldr	r0, [pc, #264]	; (80032d0 <readReg+0x1b0>)
 80031c8:	f7ff f804 	bl	80021d4 <PIN_LOW>
 80031cc:	2102      	movs	r1, #2
 80031ce:	4840      	ldr	r0, [pc, #256]	; (80032d0 <readReg+0x1b0>)
 80031d0:	f7ff f800 	bl	80021d4 <PIN_LOW>
 80031d4:	2102      	movs	r1, #2
 80031d6:	483e      	ldr	r0, [pc, #248]	; (80032d0 <readReg+0x1b0>)
 80031d8:	f7fe fffc 	bl	80021d4 <PIN_LOW>
 80031dc:	2102      	movs	r1, #2
 80031de:	483c      	ldr	r0, [pc, #240]	; (80032d0 <readReg+0x1b0>)
 80031e0:	f7ff f808 	bl	80021f4 <PIN_HIGH>
 80031e4:	2102      	movs	r1, #2
 80031e6:	483a      	ldr	r0, [pc, #232]	; (80032d0 <readReg+0x1b0>)
 80031e8:	f7ff f804 	bl	80021f4 <PIN_HIGH>
 80031ec:	4b38      	ldr	r3, [pc, #224]	; (80032d0 <readReg+0x1b0>)
 80031ee:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 80031f2:	619a      	str	r2, [r3, #24]
 80031f4:	4b35      	ldr	r3, [pc, #212]	; (80032cc <readReg+0x1ac>)
 80031f6:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 80031fa:	619a      	str	r2, [r3, #24]
 80031fc:	4b35      	ldr	r3, [pc, #212]	; (80032d4 <readReg+0x1b4>)
 80031fe:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003202:	619a      	str	r2, [r3, #24]
 8003204:	7bbb      	ldrb	r3, [r7, #14]
 8003206:	005b      	lsls	r3, r3, #1
 8003208:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800320c:	7bbb      	ldrb	r3, [r7, #14]
 800320e:	021b      	lsls	r3, r3, #8
 8003210:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003214:	431a      	orrs	r2, r3
 8003216:	7bbb      	ldrb	r3, [r7, #14]
 8003218:	025b      	lsls	r3, r3, #9
 800321a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800321e:	431a      	orrs	r2, r3
 8003220:	4b2b      	ldr	r3, [pc, #172]	; (80032d0 <readReg+0x1b0>)
 8003222:	619a      	str	r2, [r3, #24]
 8003224:	7bbb      	ldrb	r3, [r7, #14]
 8003226:	011b      	lsls	r3, r3, #4
 8003228:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 800322c:	7bbb      	ldrb	r3, [r7, #14]
 800322e:	105b      	asrs	r3, r3, #1
 8003230:	f003 0310 	and.w	r3, r3, #16
 8003234:	431a      	orrs	r2, r3
 8003236:	7bbb      	ldrb	r3, [r7, #14]
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	f003 0320 	and.w	r3, r3, #32
 800323e:	431a      	orrs	r2, r3
 8003240:	7bbb      	ldrb	r3, [r7, #14]
 8003242:	f003 0308 	and.w	r3, r3, #8
 8003246:	431a      	orrs	r2, r3
 8003248:	4b20      	ldr	r3, [pc, #128]	; (80032cc <readReg+0x1ac>)
 800324a:	619a      	str	r2, [r3, #24]
 800324c:	7bbb      	ldrb	r3, [r7, #14]
 800324e:	019b      	lsls	r3, r3, #6
 8003250:	4a20      	ldr	r2, [pc, #128]	; (80032d4 <readReg+0x1b4>)
 8003252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003256:	6193      	str	r3, [r2, #24]
 8003258:	2102      	movs	r1, #2
 800325a:	481d      	ldr	r0, [pc, #116]	; (80032d0 <readReg+0x1b0>)
 800325c:	f7fe ffba 	bl	80021d4 <PIN_LOW>
 8003260:	2102      	movs	r1, #2
 8003262:	481b      	ldr	r0, [pc, #108]	; (80032d0 <readReg+0x1b0>)
 8003264:	f7fe ffb6 	bl	80021d4 <PIN_LOW>
 8003268:	2102      	movs	r1, #2
 800326a:	4819      	ldr	r0, [pc, #100]	; (80032d0 <readReg+0x1b0>)
 800326c:	f7fe ffb2 	bl	80021d4 <PIN_LOW>
 8003270:	2102      	movs	r1, #2
 8003272:	4817      	ldr	r0, [pc, #92]	; (80032d0 <readReg+0x1b0>)
 8003274:	f7fe ffbe 	bl	80021f4 <PIN_HIGH>
 8003278:	2102      	movs	r1, #2
 800327a:	4815      	ldr	r0, [pc, #84]	; (80032d0 <readReg+0x1b0>)
 800327c:	f7fe ffba 	bl	80021f4 <PIN_HIGH>
 8003280:	2110      	movs	r1, #16
 8003282:	4813      	ldr	r0, [pc, #76]	; (80032d0 <readReg+0x1b0>)
 8003284:	f7fe ffb6 	bl	80021f4 <PIN_HIGH>
    setReadDir();
 8003288:	f7ff f8de 	bl	8002448 <setReadDir>
    delay(1);    //1us should be adequate
 800328c:	2001      	movs	r0, #1
 800328e:	f002 ffcf 	bl	8006230 <delay>
    //    READ_16(ret);
    do { ret = read16bits(); }while (--index >= 0);  //need to test with SSD1963
 8003292:	f7ff fe53 	bl	8002f3c <read16bits>
 8003296:	4603      	mov	r3, r0
 8003298:	81bb      	strh	r3, [r7, #12]
 800329a:	797b      	ldrb	r3, [r7, #5]
 800329c:	3b01      	subs	r3, #1
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	717b      	strb	r3, [r7, #5]
 80032a2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	daf3      	bge.n	8003292 <readReg+0x172>
    RD_IDLE;
 80032aa:	2101      	movs	r1, #1
 80032ac:	4808      	ldr	r0, [pc, #32]	; (80032d0 <readReg+0x1b0>)
 80032ae:	f7fe ffa1 	bl	80021f4 <PIN_HIGH>
    CS_IDLE;
 80032b2:	2101      	movs	r1, #1
 80032b4:	4805      	ldr	r0, [pc, #20]	; (80032cc <readReg+0x1ac>)
 80032b6:	f7fe ff9d 	bl	80021f4 <PIN_HIGH>
    setWriteDir();
 80032ba:	f7ff f8f3 	bl	80024a4 <setWriteDir>
    return ret;
 80032be:	89bb      	ldrh	r3, [r7, #12]
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	20000218 	.word	0x20000218
 80032cc:	40020400 	.word	0x40020400
 80032d0:	40020000 	.word	0x40020000
 80032d4:	40020800 	.word	0x40020800

080032d8 <readReg32>:


uint32_t readReg32(uint16_t reg)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	4603      	mov	r3, r0
 80032e0:	80fb      	strh	r3, [r7, #6]
    uint16_t h = readReg(reg, 0);
 80032e2:	88fb      	ldrh	r3, [r7, #6]
 80032e4:	2100      	movs	r1, #0
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7ff ff1a 	bl	8003120 <readReg>
 80032ec:	4603      	mov	r3, r0
 80032ee:	81fb      	strh	r3, [r7, #14]
    uint16_t l = readReg(reg, 1);
 80032f0:	88fb      	ldrh	r3, [r7, #6]
 80032f2:	2101      	movs	r1, #1
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7ff ff13 	bl	8003120 <readReg>
 80032fa:	4603      	mov	r3, r0
 80032fc:	81bb      	strh	r3, [r7, #12]
    return ((uint32_t) h << 16) | (l);
 80032fe:	89fb      	ldrh	r3, [r7, #14]
 8003300:	041a      	lsls	r2, r3, #16
 8003302:	89bb      	ldrh	r3, [r7, #12]
 8003304:	4313      	orrs	r3, r2
}
 8003306:	4618      	mov	r0, r3
 8003308:	3710      	adds	r7, #16
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}

0800330e <readReg40>:


uint32_t readReg40(uint16_t reg)
{
 800330e:	b580      	push	{r7, lr}
 8003310:	b084      	sub	sp, #16
 8003312:	af00      	add	r7, sp, #0
 8003314:	4603      	mov	r3, r0
 8003316:	80fb      	strh	r3, [r7, #6]
    uint16_t h = readReg(reg, 0);
 8003318:	88fb      	ldrh	r3, [r7, #6]
 800331a:	2100      	movs	r1, #0
 800331c:	4618      	mov	r0, r3
 800331e:	f7ff feff 	bl	8003120 <readReg>
 8003322:	4603      	mov	r3, r0
 8003324:	81fb      	strh	r3, [r7, #14]
    uint16_t m = readReg(reg, 1);
 8003326:	88fb      	ldrh	r3, [r7, #6]
 8003328:	2101      	movs	r1, #1
 800332a:	4618      	mov	r0, r3
 800332c:	f7ff fef8 	bl	8003120 <readReg>
 8003330:	4603      	mov	r3, r0
 8003332:	81bb      	strh	r3, [r7, #12]
    uint16_t l = readReg(reg, 2);
 8003334:	88fb      	ldrh	r3, [r7, #6]
 8003336:	2102      	movs	r1, #2
 8003338:	4618      	mov	r0, r3
 800333a:	f7ff fef1 	bl	8003120 <readReg>
 800333e:	4603      	mov	r3, r0
 8003340:	817b      	strh	r3, [r7, #10]
    return ((uint32_t) h << 24) | (m << 8) | (l >> 8);
 8003342:	89fb      	ldrh	r3, [r7, #14]
 8003344:	061b      	lsls	r3, r3, #24
 8003346:	89ba      	ldrh	r2, [r7, #12]
 8003348:	0212      	lsls	r2, r2, #8
 800334a:	4313      	orrs	r3, r2
 800334c:	897a      	ldrh	r2, [r7, #10]
 800334e:	0a12      	lsrs	r2, r2, #8
 8003350:	b292      	uxth	r2, r2
 8003352:	4313      	orrs	r3, r2
}
 8003354:	4618      	mov	r0, r3
 8003356:	3710      	adds	r7, #16
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <tft_init>:


void tft_init(uint16_t ID)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b088      	sub	sp, #32
 8003360:	af00      	add	r7, sp, #0
 8003362:	4603      	mov	r3, r0
 8003364:	80fb      	strh	r3, [r7, #6]
	int dummy=0;
 8003366:	2300      	movs	r3, #0
 8003368:	617b      	str	r3, [r7, #20]
    int16_t *p16;               //so we can "write" to a const protected variable.
    const uint8_t *table8_ads = NULL;
 800336a:	2300      	movs	r3, #0
 800336c:	61fb      	str	r3, [r7, #28]
    int16_t table_size;
    _lcd_xor = 0;
 800336e:	4be1      	ldr	r3, [pc, #900]	; (80036f4 <tft_init+0x398>)
 8003370:	2200      	movs	r2, #0
 8003372:	801a      	strh	r2, [r3, #0]
    switch (_lcd_ID = ID) {
 8003374:	4ae0      	ldr	r2, [pc, #896]	; (80036f8 <tft_init+0x39c>)
 8003376:	88fb      	ldrh	r3, [r7, #6]
 8003378:	8013      	strh	r3, [r2, #0]
 800337a:	4bdf      	ldr	r3, [pc, #892]	; (80036f8 <tft_init+0x39c>)
 800337c:	881b      	ldrh	r3, [r3, #0]
 800337e:	f24c 5205 	movw	r2, #50437	; 0xc505
 8003382:	4293      	cmp	r3, r2
 8003384:	f000 82cc 	beq.w	8003920 <tft_init+0x5c4>
 8003388:	f24c 5205 	movw	r2, #50437	; 0xc505
 800338c:	4293      	cmp	r3, r2
 800338e:	f300 8303 	bgt.w	8003998 <tft_init+0x63c>
 8003392:	f24b 5209 	movw	r2, #46345	; 0xb509
 8003396:	4293      	cmp	r3, r2
 8003398:	f000 82cb 	beq.w	8003932 <tft_init+0x5d6>
 800339c:	f24b 5209 	movw	r2, #46345	; 0xb509
 80033a0:	4293      	cmp	r3, r2
 80033a2:	f300 82f9 	bgt.w	8003998 <tft_init+0x63c>
 80033a6:	f24b 5205 	movw	r2, #46341	; 0xb505
 80033aa:	4293      	cmp	r3, r2
 80033ac:	f000 82b8 	beq.w	8003920 <tft_init+0x5c4>
 80033b0:	f24b 5205 	movw	r2, #46341	; 0xb505
 80033b4:	4293      	cmp	r3, r2
 80033b6:	f300 82ef 	bgt.w	8003998 <tft_init+0x63c>
 80033ba:	f64a 4211 	movw	r2, #44049	; 0xac11
 80033be:	4293      	cmp	r3, r2
 80033c0:	f000 8239 	beq.w	8003836 <tft_init+0x4da>
 80033c4:	f64a 4211 	movw	r2, #44049	; 0xac11
 80033c8:	4293      	cmp	r3, r2
 80033ca:	f300 82e5 	bgt.w	8003998 <tft_init+0x63c>
 80033ce:	f249 4288 	movw	r2, #38024	; 0x9488
 80033d2:	4293      	cmp	r3, r2
 80033d4:	f300 82e0 	bgt.w	8003998 <tft_init+0x63c>
 80033d8:	f249 4287 	movw	r2, #38023	; 0x9487
 80033dc:	4293      	cmp	r3, r2
 80033de:	f280 8288 	bge.w	80038f2 <tft_init+0x596>
 80033e2:	f249 4286 	movw	r2, #38022	; 0x9486
 80033e6:	4293      	cmp	r3, r2
 80033e8:	f000 8269 	beq.w	80038be <tft_init+0x562>
 80033ec:	f249 4286 	movw	r2, #38022	; 0x9486
 80033f0:	4293      	cmp	r3, r2
 80033f2:	f300 82d1 	bgt.w	8003998 <tft_init+0x63c>
 80033f6:	f249 4281 	movw	r2, #38017	; 0x9481
 80033fa:	4293      	cmp	r3, r2
 80033fc:	f000 8248 	beq.w	8003890 <tft_init+0x534>
 8003400:	f249 4281 	movw	r2, #38017	; 0x9481
 8003404:	4293      	cmp	r3, r2
 8003406:	f300 82c7 	bgt.w	8003998 <tft_init+0x63c>
 800340a:	f249 3241 	movw	r2, #37697	; 0x9341
 800340e:	4293      	cmp	r3, r2
 8003410:	f300 82c2 	bgt.w	8003998 <tft_init+0x63c>
 8003414:	f249 3202 	movw	r2, #37634	; 0x9302
 8003418:	4293      	cmp	r3, r2
 800341a:	f280 80a5 	bge.w	8003568 <tft_init+0x20c>
 800341e:	f249 0290 	movw	r2, #37008	; 0x9090
 8003422:	4293      	cmp	r3, r2
 8003424:	f000 818f 	beq.w	8003746 <tft_init+0x3ea>
 8003428:	f249 0290 	movw	r2, #37008	; 0x9090
 800342c:	4293      	cmp	r3, r2
 800342e:	f300 82b3 	bgt.w	8003998 <tft_init+0x63c>
 8003432:	f248 3257 	movw	r2, #33623	; 0x8357
 8003436:	4293      	cmp	r3, r2
 8003438:	f000 8180 	beq.w	800373c <tft_init+0x3e0>
 800343c:	f248 3257 	movw	r2, #33623	; 0x8357
 8003440:	4293      	cmp	r3, r2
 8003442:	f300 82a9 	bgt.w	8003998 <tft_init+0x63c>
 8003446:	f248 0231 	movw	r2, #32817	; 0x8031
 800344a:	4293      	cmp	r3, r2
 800344c:	f000 816d 	beq.w	800372a <tft_init+0x3ce>
 8003450:	f248 0231 	movw	r2, #32817	; 0x8031
 8003454:	4293      	cmp	r3, r2
 8003456:	f300 829f 	bgt.w	8003998 <tft_init+0x63c>
 800345a:	f247 7296 	movw	r2, #30614	; 0x7796
 800345e:	4293      	cmp	r3, r2
 8003460:	f000 8242 	beq.w	80038e8 <tft_init+0x58c>
 8003464:	f247 7296 	movw	r2, #30614	; 0x7796
 8003468:	4293      	cmp	r3, r2
 800346a:	f300 8295 	bgt.w	8003998 <tft_init+0x63c>
 800346e:	f247 7293 	movw	r2, #30611	; 0x7793
 8003472:	4293      	cmp	r3, r2
 8003474:	f000 825d 	beq.w	8003932 <tft_init+0x5d6>
 8003478:	f247 7293 	movw	r2, #30611	; 0x7793
 800347c:	4293      	cmp	r3, r2
 800347e:	f300 828b 	bgt.w	8003998 <tft_init+0x63c>
 8003482:	f247 7289 	movw	r2, #30601	; 0x7789
 8003486:	4293      	cmp	r3, r2
 8003488:	f000 8146 	beq.w	8003718 <tft_init+0x3bc>
 800348c:	f247 7289 	movw	r2, #30601	; 0x7789
 8003490:	4293      	cmp	r3, r2
 8003492:	f300 8281 	bgt.w	8003998 <tft_init+0x63c>
 8003496:	f646 0209 	movw	r2, #26633	; 0x6809
 800349a:	4293      	cmp	r3, r2
 800349c:	f000 8194 	beq.w	80037c8 <tft_init+0x46c>
 80034a0:	f646 0209 	movw	r2, #26633	; 0x6809
 80034a4:	4293      	cmp	r3, r2
 80034a6:	f300 8277 	bgt.w	8003998 <tft_init+0x63c>
 80034aa:	f245 4208 	movw	r2, #21512	; 0x5408
 80034ae:	4293      	cmp	r3, r2
 80034b0:	f000 817a 	beq.w	80037a8 <tft_init+0x44c>
 80034b4:	f245 4208 	movw	r2, #21512	; 0x5408
 80034b8:	4293      	cmp	r3, r2
 80034ba:	f300 826d 	bgt.w	8003998 <tft_init+0x63c>
 80034be:	f245 3210 	movw	r2, #21264	; 0x5310
 80034c2:	4293      	cmp	r3, r2
 80034c4:	f000 8100 	beq.w	80036c8 <tft_init+0x36c>
 80034c8:	f245 3210 	movw	r2, #21264	; 0x5310
 80034cc:	4293      	cmp	r3, r2
 80034ce:	f300 8263 	bgt.w	8003998 <tft_init+0x63c>
 80034d2:	f242 0253 	movw	r2, #8275	; 0x2053
 80034d6:	4293      	cmp	r3, r2
 80034d8:	f000 81a8 	beq.w	800382c <tft_init+0x4d0>
 80034dc:	f242 0253 	movw	r2, #8275	; 0x2053
 80034e0:	4293      	cmp	r3, r2
 80034e2:	f300 8259 	bgt.w	8003998 <tft_init+0x63c>
 80034e6:	f241 6202 	movw	r2, #5634	; 0x1602
 80034ea:	4293      	cmp	r3, r2
 80034ec:	f000 8195 	beq.w	800381a <tft_init+0x4be>
 80034f0:	f241 6202 	movw	r2, #5634	; 0x1602
 80034f4:	4293      	cmp	r3, r2
 80034f6:	f300 824f 	bgt.w	8003998 <tft_init+0x63c>
 80034fa:	f241 5281 	movw	r2, #5505	; 0x1581
 80034fe:	4293      	cmp	r3, r2
 8003500:	f000 81c1 	beq.w	8003886 <tft_init+0x52a>
 8003504:	f241 5281 	movw	r2, #5505	; 0x1581
 8003508:	4293      	cmp	r3, r2
 800350a:	f300 8245 	bgt.w	8003998 <tft_init+0x63c>
 800350e:	f241 5226 	movw	r2, #5414	; 0x1526
 8003512:	4293      	cmp	r3, r2
 8003514:	f000 80cf 	beq.w	80036b6 <tft_init+0x35a>
 8003518:	f241 5226 	movw	r2, #5414	; 0x1526
 800351c:	4293      	cmp	r3, r2
 800351e:	f300 823b 	bgt.w	8003998 <tft_init+0x63c>
 8003522:	f5b3 5fa9 	cmp.w	r3, #5408	; 0x1520
 8003526:	f000 80bd 	beq.w	80036a4 <tft_init+0x348>
 800352a:	f5b3 5fa9 	cmp.w	r3, #5408	; 0x1520
 800352e:	f300 8233 	bgt.w	8003998 <tft_init+0x63c>
 8003532:	f241 5211 	movw	r2, #5393	; 0x1511
 8003536:	4293      	cmp	r3, r2
 8003538:	f000 80a0 	beq.w	800367c <tft_init+0x320>
 800353c:	f241 5211 	movw	r2, #5393	; 0x1511
 8003540:	4293      	cmp	r3, r2
 8003542:	f300 8229 	bgt.w	8003998 <tft_init+0x63c>
 8003546:	f241 5205 	movw	r2, #5381	; 0x1505
 800354a:	4293      	cmp	r3, r2
 800354c:	f000 8131 	beq.w	80037b2 <tft_init+0x456>
 8003550:	f241 5205 	movw	r2, #5381	; 0x1505
 8003554:	4293      	cmp	r3, r2
 8003556:	f300 821f 	bgt.w	8003998 <tft_init+0x63c>
 800355a:	2b01      	cmp	r3, #1
 800355c:	f000 811f 	beq.w	800379e <tft_init+0x442>
 8003560:	2b99      	cmp	r3, #153	; 0x99
 8003562:	f000 8107 	beq.w	8003774 <tft_init+0x418>
 8003566:	e217      	b.n	8003998 <tft_init+0x63c>
 8003568:	f5a3 4313 	sub.w	r3, r3, #37632	; 0x9300
 800356c:	3b02      	subs	r3, #2
 800356e:	2b3f      	cmp	r3, #63	; 0x3f
 8003570:	f200 8212 	bhi.w	8003998 <tft_init+0x63c>
 8003574:	a201      	add	r2, pc, #4	; (adr r2, 800357c <tft_init+0x220>)
 8003576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800357a:	bf00      	nop
 800357c:	08003841 	.word	0x08003841
 8003580:	08003999 	.word	0x08003999
 8003584:	08003999 	.word	0x08003999
 8003588:	08003999 	.word	0x08003999
 800358c:	08003999 	.word	0x08003999
 8003590:	08003999 	.word	0x08003999
 8003594:	08003999 	.word	0x08003999
 8003598:	08003999 	.word	0x08003999
 800359c:	08003999 	.word	0x08003999
 80035a0:	08003999 	.word	0x08003999
 80035a4:	08003999 	.word	0x08003999
 80035a8:	08003999 	.word	0x08003999
 80035ac:	08003999 	.word	0x08003999
 80035b0:	08003999 	.word	0x08003999
 80035b4:	08003999 	.word	0x08003999
 80035b8:	08003999 	.word	0x08003999
 80035bc:	08003999 	.word	0x08003999
 80035c0:	08003999 	.word	0x08003999
 80035c4:	08003999 	.word	0x08003999
 80035c8:	08003999 	.word	0x08003999
 80035cc:	08003999 	.word	0x08003999
 80035d0:	08003999 	.word	0x08003999
 80035d4:	08003999 	.word	0x08003999
 80035d8:	08003999 	.word	0x08003999
 80035dc:	08003999 	.word	0x08003999
 80035e0:	08003999 	.word	0x08003999
 80035e4:	08003999 	.word	0x08003999
 80035e8:	08003999 	.word	0x08003999
 80035ec:	08003999 	.word	0x08003999
 80035f0:	08003999 	.word	0x08003999
 80035f4:	080037b3 	.word	0x080037b3
 80035f8:	08003999 	.word	0x08003999
 80035fc:	08003999 	.word	0x08003999
 8003600:	08003999 	.word	0x08003999
 8003604:	08003999 	.word	0x08003999
 8003608:	080037d3 	.word	0x080037d3
 800360c:	08003999 	.word	0x08003999
 8003610:	080037f3 	.word	0x080037f3
 8003614:	080037d3 	.word	0x080037d3
 8003618:	08003855 	.word	0x08003855
 800361c:	08003999 	.word	0x08003999
 8003620:	08003999 	.word	0x08003999
 8003624:	08003999 	.word	0x08003999
 8003628:	08003999 	.word	0x08003999
 800362c:	08003999 	.word	0x08003999
 8003630:	08003999 	.word	0x08003999
 8003634:	08003999 	.word	0x08003999
 8003638:	080037dd 	.word	0x080037dd
 800363c:	08003999 	.word	0x08003999
 8003640:	08003999 	.word	0x08003999
 8003644:	08003999 	.word	0x08003999
 8003648:	080037dd 	.word	0x080037dd
 800364c:	08003999 	.word	0x08003999
 8003650:	08003999 	.word	0x08003999
 8003654:	0800384b 	.word	0x0800384b
 8003658:	08003999 	.word	0x08003999
 800365c:	08003999 	.word	0x08003999
 8003660:	08003999 	.word	0x08003999
 8003664:	08003999 	.word	0x08003999
 8003668:	08003999 	.word	0x08003999
 800366c:	08003999 	.word	0x08003999
 8003670:	08003999 	.word	0x08003999
 8003674:	0800386b 	.word	0x0800386b
 8003678:	08003875 	.word	0x08003875
        init_table16(SSD1289_regValues, sizeof(SSD1289_regValues));
        break;
#endif

    case 0x1511:                // Unknown from Levy
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1;   //extra read_8(dummy)
 800367c:	4b1f      	ldr	r3, [pc, #124]	; (80036fc <tft_init+0x3a0>)
 800367e:	2203      	movs	r2, #3
 8003680:	801a      	strh	r2, [r3, #0]
        static const uint8_t R61511_regValues[]  = {
			0xB0, 1, 0x00,       //Command Access Protect
        };
        table8_ads = R61511_regValues, table_size = sizeof(R61511_regValues);
 8003682:	4b1f      	ldr	r3, [pc, #124]	; (8003700 <tft_init+0x3a4>)
 8003684:	61fb      	str	r3, [r7, #28]
 8003686:	2303      	movs	r3, #3
 8003688:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 800368a:	4b1e      	ldr	r3, [pc, #120]	; (8003704 <tft_init+0x3a8>)
 800368c:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003694:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8003696:	4b1c      	ldr	r3, [pc, #112]	; (8003708 <tft_init+0x3ac>)
 8003698:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80036a0:	801a      	strh	r2, [r3, #0]
        break;
 80036a2:	e17f      	b.n	80039a4 <tft_init+0x648>

    case 0x1520:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 80036a4:	4b15      	ldr	r3, [pc, #84]	; (80036fc <tft_init+0x3a0>)
 80036a6:	f240 4213 	movw	r2, #1043	; 0x413
 80036aa:	801a      	strh	r2, [r3, #0]
        static const uint8_t R61520_regValues[]  = {
            0xB0, 1, 0x00,      //Command Access Protect
            0xC0, 1, 0x0A,      //DM=1, BGR=1
        };
        table8_ads = R61520_regValues, table_size = sizeof(R61520_regValues);
 80036ac:	4b17      	ldr	r3, [pc, #92]	; (800370c <tft_init+0x3b0>)
 80036ae:	61fb      	str	r3, [r7, #28]
 80036b0:	2306      	movs	r3, #6
 80036b2:	837b      	strh	r3, [r7, #26]
        break;
 80036b4:	e176      	b.n	80039a4 <tft_init+0x648>

	case 0x1526:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 80036b6:	4b11      	ldr	r3, [pc, #68]	; (80036fc <tft_init+0x3a0>)
 80036b8:	f240 4213 	movw	r2, #1043	; 0x413
 80036bc:	801a      	strh	r2, [r3, #0]
            0xB0, 1, 0x03,      //Command Access
            0xE2, 1, 0x3F,      //Command Write Access
            0xC0, 1, 0x22,      //REV=0, BGR=1, SS=0
            0xE2, 1, 0x00,      //Command Write Protect
        };
        table8_ads = R61526_regValues, table_size = sizeof(R61526_regValues);
 80036be:	4b14      	ldr	r3, [pc, #80]	; (8003710 <tft_init+0x3b4>)
 80036c0:	61fb      	str	r3, [r7, #28]
 80036c2:	230c      	movs	r3, #12
 80036c4:	837b      	strh	r3, [r7, #26]
        break;
 80036c6:	e16d      	b.n	80039a4 <tft_init+0x648>
        init_table16(LGDP4535_regValues, sizeof(LGDP4535_regValues));
        break;
#endif

    case 0x5310:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | INVERT_SS | INVERT_RGB | READ_24BITS;
 80036c8:	4b0c      	ldr	r3, [pc, #48]	; (80036fc <tft_init+0x3a0>)
 80036ca:	f640 6213 	movw	r2, #3603	; 0xe13
 80036ce:	801a      	strh	r2, [r3, #0]
        static const uint8_t NT35310_regValues[]  = {        //
            TFTLCD_DELAY8, 10,    //just some dummy
        };
        table8_ads = NT35310_regValues, table_size = sizeof(NT35310_regValues);
 80036d0:	4b10      	ldr	r3, [pc, #64]	; (8003714 <tft_init+0x3b8>)
 80036d2:	61fb      	str	r3, [r7, #28]
 80036d4:	2302      	movs	r3, #2
 80036d6:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 80036d8:	4b0a      	ldr	r3, [pc, #40]	; (8003704 <tft_init+0x3a8>)
 80036da:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80036e2:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 80036e4:	4b08      	ldr	r3, [pc, #32]	; (8003708 <tft_init+0x3ac>)
 80036e6:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80036ee:	801a      	strh	r2, [r3, #0]
        break;
 80036f0:	e158      	b.n	80039a4 <tft_init+0x648>
 80036f2:	bf00      	nop
 80036f4:	200003d0 	.word	0x200003d0
 80036f8:	200003ce 	.word	0x200003ce
 80036fc:	200003c0 	.word	0x200003c0
 8003700:	0800c930 	.word	0x0800c930
 8003704:	08002289 	.word	0x08002289
 8003708:	08002271 	.word	0x08002271
 800370c:	0800c934 	.word	0x0800c934
 8003710:	0800c93c 	.word	0x0800c93c
 8003714:	0800c948 	.word	0x0800c948
        init_table16(ST7781_regValues, sizeof(ST7781_regValues));
        break;
#endif

    case 0x7789:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8003718:	4b8d      	ldr	r3, [pc, #564]	; (8003950 <tft_init+0x5f4>)
 800371a:	f240 4213 	movw	r2, #1043	; 0x413
 800371e:	801a      	strh	r2, [r3, #0]
            (0x55), 1, 0x90,    //WRCACE  [00]
            (0xD0), 2, 0xA4, 0xA1,      //PWCTRL1: Power Control 1 [A4 A1]
            (0xE0), 14, 0xD0, 0x00, 0x06, 0x09, 0x0B, 0x2A, 0x3C, 0x55, 0x4B, 0x08, 0x16, 0x14, 0x19, 0x20,     //PVGAMCTRL: Positive Voltage Gamma control
            (0xE1), 14, 0xD0, 0x00, 0x06, 0x09, 0x0B, 0x29, 0x36, 0x54, 0x4B, 0x0D, 0x16, 0x14, 0x21, 0x20,     //NVGAMCTRL: Negative Voltage Gamma control
        };
        table8_ads = ST7789_regValues, table_size = sizeof(ST7789_regValues); //
 8003720:	4b8c      	ldr	r3, [pc, #560]	; (8003954 <tft_init+0x5f8>)
 8003722:	61fb      	str	r3, [r7, #28]
 8003724:	2341      	movs	r3, #65	; 0x41
 8003726:	837b      	strh	r3, [r7, #26]
        break;
 8003728:	e13c      	b.n	80039a4 <tft_init+0x648>

    case 0x8031:      //Unknown BangGood thanks PrinceCharles
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN;
 800372a:	4b89      	ldr	r3, [pc, #548]	; (8003950 <tft_init+0x5f4>)
 800372c:	f241 4213 	movw	r2, #5139	; 0x1413
 8003730:	801a      	strh	r2, [r3, #0]
        static const uint8_t FK8031_regValues[]  = {
            // 0xF2:8.2 = SM, 0xF2:8.0 = REV. invertDisplay(), vertScroll() do not work
            0xF2,11, 0x16, 0x16, 0x03, 0x08, 0x08, 0x08, 0x08, 0x10, 0x04, 0x16, 0x16, // f.k. 0xF2:8.2 SM=1
            0xFD, 3, 0x11, 0x02, 0x35,     //f.k 0xFD:1.1 creates contiguous scan lins
        };
        table8_ads = FK8031_regValues, table_size = sizeof(FK8031_regValues);
 8003732:	4b89      	ldr	r3, [pc, #548]	; (8003958 <tft_init+0x5fc>)
 8003734:	61fb      	str	r3, [r7, #28]
 8003736:	2312      	movs	r3, #18
 8003738:	837b      	strh	r3, [r7, #26]
        break;
 800373a:	e133      	b.n	80039a4 <tft_init+0x648>
        //        init_table(HX8347G_2_regValues, sizeof(HX8347G_2_regValues));
        break;
#endif

    case 0x8357:                //BIG CHANGE: HX8357-B is now 0x8357
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN;
 800373c:	4b84      	ldr	r3, [pc, #528]	; (8003950 <tft_init+0x5f4>)
 800373e:	f241 4203 	movw	r2, #5123	; 0x1403
 8003742:	801a      	strh	r2, [r3, #0]
        goto common_8357;
 8003744:	e003      	b.n	800374e <tft_init+0x3f2>
    case 0x9090:                //BIG CHANGE: HX8357-D was 0x8357
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN | READ_24BITS;
 8003746:	4b82      	ldr	r3, [pc, #520]	; (8003950 <tft_init+0x5f4>)
 8003748:	f241 4213 	movw	r2, #5139	; 0x1413
 800374c:	801a      	strh	r2, [r3, #0]
      common_8357:
	  	dummy=1;
 800374e:	2301      	movs	r3, #1
 8003750:	617b      	str	r3, [r7, #20]
        static const uint8_t HX8357C_regValues[]  = {
            TFTLCD_DELAY8, 1,  //dummy table
        };
        table8_ads = HX8357C_regValues, table_size = sizeof(HX8357C_regValues);
 8003752:	4b82      	ldr	r3, [pc, #520]	; (800395c <tft_init+0x600>)
 8003754:	61fb      	str	r3, [r7, #28]
 8003756:	2302      	movs	r3, #2
 8003758:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 800375a:	4b81      	ldr	r3, [pc, #516]	; (8003960 <tft_init+0x604>)
 800375c:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003764:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8003766:	4b7f      	ldr	r3, [pc, #508]	; (8003964 <tft_init+0x608>)
 8003768:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003770:	801a      	strh	r2, [r3, #0]
        break;
 8003772:	e117      	b.n	80039a4 <tft_init+0x648>

    case 0x0099:                //HX8357-D matches datasheet
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN | READ_24BITS;
 8003774:	4b76      	ldr	r3, [pc, #472]	; (8003950 <tft_init+0x5f4>)
 8003776:	f241 4213 	movw	r2, #5139	; 0x1413
 800377a:	801a      	strh	r2, [r3, #0]
#ifdef SUPPORT_8357D_GAMMA
            // HX8357D_SETGAMMA [0B 0C 11 1D 25 37 43 4B 4E 47 41 39 35 31 2E 21 1C 1D 1D 26 31 44 4E 56 44 3F 39 33 31 2E 28 1D E0 01]
            (0xE0),34, 0x02, 0x0A, 0x11, 0x1D, 0x23, 0x35, 0x41, 0x4B, 0x4B, 0x42, 0x3A, 0x27, 0x1B, 0x08, 0x09, 0x03, 0x02, 0x0A, 0x11, 0x1D, 0x23, 0x35, 0x41, 0x4B, 0x4B, 0x42, 0x3A, 0x27, 0x1B, 0x08, 0x09, 0x03, 0x00, 0x01,
#endif
        };
        table8_ads = HX8357_99_regValues, table_size = sizeof(HX8357_99_regValues);
 800377c:	4b7a      	ldr	r3, [pc, #488]	; (8003968 <tft_init+0x60c>)
 800377e:	61fb      	str	r3, [r7, #28]
 8003780:	231d      	movs	r3, #29
 8003782:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8003784:	4b76      	ldr	r3, [pc, #472]	; (8003960 <tft_init+0x604>)
 8003786:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800378e:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8003790:	4b74      	ldr	r3, [pc, #464]	; (8003964 <tft_init+0x608>)
 8003792:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800379a:	801a      	strh	r2, [r3, #0]
        break;
 800379c:	e102      	b.n	80039a4 <tft_init+0x648>
        *p16 = 176;
        break;
#endif

    case 0x0001:
        _lcd_capable = 0 | REV_SCREEN | INVERT_GS; //no RGB bug. thanks Ivo_Deshev
 800379e:	4b6c      	ldr	r3, [pc, #432]	; (8003950 <tft_init+0x5f4>)
 80037a0:	f44f 5288 	mov.w	r2, #4352	; 0x1100
 80037a4:	801a      	strh	r2, [r3, #0]
        goto common_9320;
 80037a6:	e008      	b.n	80037ba <tft_init+0x45e>
    case 0x5408:
        _lcd_capable = 0 | REV_SCREEN | READ_BGR; //Red 2.4" thanks jorgenv, Ardlab_Gent
 80037a8:	4b69      	ldr	r3, [pc, #420]	; (8003950 <tft_init+0x5f4>)
 80037aa:	f241 0204 	movw	r2, #4100	; 0x1004
 80037ae:	801a      	strh	r2, [r3, #0]
//        _lcd_capable = 0 | REV_SCREEN | READ_BGR | INVERT_GS; //Blue 2.8" might be different
        goto common_9320;
 80037b0:	e003      	b.n	80037ba <tft_init+0x45e>
    case 0x1505:                //R61505 thanks Ravi_kanchan2004. R61505V, R61505W different
    case 0x9320:
        _lcd_capable = 0 | REV_SCREEN | READ_BGR;
 80037b2:	4b67      	ldr	r3, [pc, #412]	; (8003950 <tft_init+0x5f4>)
 80037b4:	f241 0204 	movw	r2, #4100	; 0x1004
 80037b8:	801a      	strh	r2, [r3, #0]
      common_9320:
	    dummy=1;
 80037ba:	2301      	movs	r3, #1
 80037bc:	617b      	str	r3, [r7, #20]
            0x0098, 0x0000,
            //-----Display on-----------------------
            0x0007, 0x0173,
            TFTLCD_DELAY, 50,
        };
        init_table16(ILI9320_regValues, sizeof(ILI9320_regValues));
 80037be:	21d8      	movs	r1, #216	; 0xd8
 80037c0:	486a      	ldr	r0, [pc, #424]	; (800396c <tft_init+0x610>)
 80037c2:	f7ff fb3e 	bl	8002e42 <init_table16>
        break;
 80037c6:	e0ed      	b.n	80039a4 <tft_init+0x648>
    case 0x6809:
        _lcd_capable = 0 | REV_SCREEN | INVERT_GS | AUTO_READINC;
 80037c8:	4b61      	ldr	r3, [pc, #388]	; (8003950 <tft_init+0x5f4>)
 80037ca:	f241 1202 	movw	r2, #4354	; 0x1102
 80037ce:	801a      	strh	r2, [r3, #0]
        goto common_93x5;
 80037d0:	e008      	b.n	80037e4 <tft_init+0x488>
    case 0x9328:
    case 0x9325:
        _lcd_capable = 0 | REV_SCREEN | INVERT_GS;
 80037d2:	4b5f      	ldr	r3, [pc, #380]	; (8003950 <tft_init+0x5f4>)
 80037d4:	f44f 5288 	mov.w	r2, #4352	; 0x1100
 80037d8:	801a      	strh	r2, [r3, #0]
        goto common_93x5;
 80037da:	e003      	b.n	80037e4 <tft_init+0x488>
    case 0x9331:
    case 0x9335:
        _lcd_capable = 0 | REV_SCREEN;
 80037dc:	4b5c      	ldr	r3, [pc, #368]	; (8003950 <tft_init+0x5f4>)
 80037de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80037e2:	801a      	strh	r2, [r3, #0]
      common_93x5:
	    dummy=1;
 80037e4:	2301      	movs	r3, #1
 80037e6:	617b      	str	r3, [r7, #20]
            //-------------- Panel Control -------------------//
            0x0090, 0x0010,
            0x0092, 0x0000,
            0x0007, 0x0133,     // 262K color and display ON
        };
        init_table16(ILI9325_regValues, sizeof(ILI9325_regValues));
 80037e8:	21cc      	movs	r1, #204	; 0xcc
 80037ea:	4861      	ldr	r0, [pc, #388]	; (8003970 <tft_init+0x614>)
 80037ec:	f7ff fb29 	bl	8002e42 <init_table16>
        break;
 80037f0:	e0d8      	b.n	80039a4 <tft_init+0x648>
        *p16 = 240;
        break;
#endif

    case 0x9327:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;
 80037f2:	4b57      	ldr	r3, [pc, #348]	; (8003950 <tft_init+0x5f4>)
 80037f4:	f240 4203 	movw	r2, #1027	; 0x403
 80037f8:	801a      	strh	r2, [r3, #0]
            //            0xC8, 15, 0x00, 0x77, 0x77, 0x04, 0x04, 0x00, 0x00, 0x00, 0x77, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
            0xCA, 1, 0x00,      //DGC LUT ???
            0xEA, 1, 0x80,      //3-Gamma Function Enable
            //                     0xB0, 1, 0x03,      //Enable Protect
        };
        table8_ads = ILI9327_regValues, table_size = sizeof(ILI9327_regValues);
 80037fa:	4b5e      	ldr	r3, [pc, #376]	; (8003974 <tft_init+0x618>)
 80037fc:	61fb      	str	r3, [r7, #28]
 80037fe:	231e      	movs	r3, #30
 8003800:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8003802:	4b57      	ldr	r3, [pc, #348]	; (8003960 <tft_init+0x604>)
 8003804:	613b      	str	r3, [r7, #16]
        *p16 = 400;
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800380c:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 800380e:	4b55      	ldr	r3, [pc, #340]	; (8003964 <tft_init+0x608>)
 8003810:	613b      	str	r3, [r7, #16]
        *p16 = 240;
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	22f0      	movs	r2, #240	; 0xf0
 8003816:	801a      	strh	r2, [r3, #0]
        break;
 8003818:	e0c4      	b.n	80039a4 <tft_init+0x648>
    case 0x1602:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS; //does not readGRAM
 800381a:	4b4d      	ldr	r3, [pc, #308]	; (8003950 <tft_init+0x5f4>)
 800381c:	f240 4203 	movw	r2, #1027	; 0x403
 8003820:	801a      	strh	r2, [r3, #0]
        static const uint8_t XX1602_regValues[]  = {
            0xB8, 1, 0x01,      //GS [00]
            0xC0, 1, 0x0E,      //??Power [0A]
        };
        table8_ads = XX1602_regValues, table_size = sizeof(XX1602_regValues);
 8003822:	4b55      	ldr	r3, [pc, #340]	; (8003978 <tft_init+0x61c>)
 8003824:	61fb      	str	r3, [r7, #28]
 8003826:	2306      	movs	r3, #6
 8003828:	837b      	strh	r3, [r7, #26]
        break;
 800382a:	e0bb      	b.n	80039a4 <tft_init+0x648>

    case 0x2053:    //weird from BangGood
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN | READ_BGR;
 800382c:	4b48      	ldr	r3, [pc, #288]	; (8003950 <tft_init+0x5f4>)
 800382e:	f241 4217 	movw	r2, #5143	; 0x1417
 8003832:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 8003834:	e012      	b.n	800385c <tft_init+0x500>
    case 0xAC11:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN; //thanks viliam
 8003836:	4b46      	ldr	r3, [pc, #280]	; (8003950 <tft_init+0x5f4>)
 8003838:	f241 4213 	movw	r2, #5139	; 0x1413
 800383c:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 800383e:	e00d      	b.n	800385c <tft_init+0x500>
    case 0x9302:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;
 8003840:	4b43      	ldr	r3, [pc, #268]	; (8003950 <tft_init+0x5f4>)
 8003842:	f240 4203 	movw	r2, #1027	; 0x403
 8003846:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 8003848:	e008      	b.n	800385c <tft_init+0x500>
    case 0x9338:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 800384a:	4b41      	ldr	r3, [pc, #260]	; (8003950 <tft_init+0x5f4>)
 800384c:	f240 4213 	movw	r2, #1043	; 0x413
 8003850:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 8003852:	e003      	b.n	800385c <tft_init+0x500>
    case 0x9329:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | INVERT_SS | REV_SCREEN;
 8003854:	4b3e      	ldr	r3, [pc, #248]	; (8003950 <tft_init+0x5f4>)
 8003856:	f241 6203 	movw	r2, #5635	; 0x1603
 800385a:	801a      	strh	r2, [r3, #0]
	  common_9329:
	    dummy=1;
 800385c:	2301      	movs	r3, #1
 800385e:	617b      	str	r3, [r7, #20]
//            0xF6, 3, 0x01, 0x01, 0x00,  //Interface Control needs EXTC=1 MX_EOR=1, TM=0, RIM=0
//            0xB6, 3, 0x0A, 0x82, 0x27,  //Display Function [0A 82 27]
//            0xB7, 1, 0x06,      //Entry Mode Set [06]
            0x36, 1, 0x00,      //Memory Access [00] pointless but stops an empty array
        };
        table8_ads = ILI9329_regValues, table_size = sizeof(ILI9329_regValues);
 8003860:	4b46      	ldr	r3, [pc, #280]	; (800397c <tft_init+0x620>)
 8003862:	61fb      	str	r3, [r7, #28]
 8003864:	2303      	movs	r3, #3
 8003866:	837b      	strh	r3, [r7, #26]
        break;
 8003868:	e09c      	b.n	80039a4 <tft_init+0x648>

    case 0x9340:                //ILI9340 thanks Ravi_kanchan2004.
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN;
 800386a:	4b39      	ldr	r3, [pc, #228]	; (8003950 <tft_init+0x5f4>)
 800386c:	f241 4213 	movw	r2, #5139	; 0x1413
 8003870:	801a      	strh	r2, [r3, #0]
        goto common_9341;
 8003872:	bf00      	nop
    case 0x9341:
      common_9341:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8003874:	4b36      	ldr	r3, [pc, #216]	; (8003950 <tft_init+0x5f4>)
 8003876:	f240 4213 	movw	r2, #1043	; 0x413
 800387a:	801a      	strh	r2, [r3, #0]
            0xC7, 1, 0xC0,      //VCOM 2 [C0]
            0x36, 1, 0x88,      //Memory Access [00]
            0xB1, 2, 0x00, 0x1B,        //Frame Control [00 1B]
            0xB7, 1, 0x07,      //Entry Mode [00]
        };
        table8_ads = ILI9341_regValues_2_4, table_size = sizeof(ILI9341_regValues_2_4);   //
 800387c:	4b40      	ldr	r3, [pc, #256]	; (8003980 <tft_init+0x624>)
 800387e:	61fb      	str	r3, [r7, #28]
 8003880:	2365      	movs	r3, #101	; 0x65
 8003882:	837b      	strh	r3, [r7, #26]
        break;
 8003884:	e08e      	b.n	80039a4 <tft_init+0x648>
        p16 = (int16_t *) & width;
        *p16 = 320;
        break;
#endif
    case 0x1581:                        //no BGR in MADCTL.  set BGR in Panel Control
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS; //thanks zdravke
 8003886:	4b32      	ldr	r3, [pc, #200]	; (8003950 <tft_init+0x5f4>)
 8003888:	f240 4213 	movw	r2, #1043	; 0x413
 800388c:	801a      	strh	r2, [r3, #0]
		goto common_9481;
 800388e:	e003      	b.n	8003898 <tft_init+0x53c>
    case 0x9481:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_BGR;
 8003890:	4b2f      	ldr	r3, [pc, #188]	; (8003950 <tft_init+0x5f4>)
 8003892:	f240 4207 	movw	r2, #1031	; 0x407
 8003896:	801a      	strh	r2, [r3, #0]
	  common_9481:
	    dummy=1;
 8003898:	2301      	movs	r3, #1
 800389a:	617b      	str	r3, [r7, #20]
            0x0C, 2, 0x00, 0x55, //RDCOLMOD
			0xB4, 1, 0x00,      //SETDISPLAY
//			0xB3, 4, 0x00, 0x01, 0x06, 0x01,  //SETGRAM simple example
			0xB3, 4, 0x00, 0x01, 0x06, 0x30,  //jpegs example
        };
        table8_ads = ILI9481_regValues, table_size = sizeof(ILI9481_regValues);
 800389c:	4b39      	ldr	r3, [pc, #228]	; (8003984 <tft_init+0x628>)
 800389e:	61fb      	str	r3, [r7, #28]
 80038a0:	2345      	movs	r3, #69	; 0x45
 80038a2:	837b      	strh	r3, [r7, #26]
//        table8_ads = ILI9481_CPT29_regValues, table_size = sizeof(ILI9481_CPT29_regValues);
//        table8_ads = ILI9481_PVI35_regValues, table_size = sizeof(ILI9481_PVI35_regValues);
//        table8_ads = ILI9481_AUO317_regValues, table_size = sizeof(ILI9481_AUO317_regValues);
//        table8_ads = ILI9481_CMO35_regValues, table_size = sizeof(ILI9481_CMO35_regValues);
//        table8_ads = ILI9481_RGB_regValues, table_size = sizeof(ILI9481_RGB_regValues);
        p16 = (int16_t *) & height;
 80038a4:	4b2e      	ldr	r3, [pc, #184]	; (8003960 <tft_init+0x604>)
 80038a6:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80038ae:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 80038b0:	4b2c      	ldr	r3, [pc, #176]	; (8003964 <tft_init+0x608>)
 80038b2:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80038ba:	801a      	strh	r2, [r3, #0]
        break;
 80038bc:	e072      	b.n	80039a4 <tft_init+0x648>
    case 0x9486:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS; //Red 3.5", Blue 3.5"
 80038be:	4b24      	ldr	r3, [pc, #144]	; (8003950 <tft_init+0x5f4>)
 80038c0:	f240 4203 	movw	r2, #1027	; 0x403
 80038c4:	801a      	strh	r2, [r3, #0]
            // 4.2 WTK 3.5 Inch Initial Code too white
			0xE0, 15, 0x0F, 0x10, 0x08, 0x05, 0x09, 0x05, 0x37, 0x98, 0x26, 0x07, 0x0F, 0x02, 0x09, 0x07, 0x00,
			0xE1, 15, 0x0F, 0x38, 0x36, 0x0D, 0x10, 0x08, 0x59, 0x76, 0x48, 0x0A, 0x16, 0x0A, 0x37, 0x2F, 0x00,
#endif
        };
        table8_ads = ILI9486_regValues, table_size = sizeof(ILI9486_regValues);
 80038c6:	4b30      	ldr	r3, [pc, #192]	; (8003988 <tft_init+0x62c>)
 80038c8:	61fb      	str	r3, [r7, #28]
 80038ca:	233b      	movs	r3, #59	; 0x3b
 80038cc:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 80038ce:	4b24      	ldr	r3, [pc, #144]	; (8003960 <tft_init+0x604>)
 80038d0:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80038d8:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 80038da:	4b22      	ldr	r3, [pc, #136]	; (8003964 <tft_init+0x608>)
 80038dc:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80038e4:	801a      	strh	r2, [r3, #0]
        break;
 80038e6:	e05d      	b.n	80039a4 <tft_init+0x648>
    case 0x7796:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;   //thanks to safari1
 80038e8:	4b19      	ldr	r3, [pc, #100]	; (8003950 <tft_init+0x5f4>)
 80038ea:	f240 4203 	movw	r2, #1027	; 0x403
 80038ee:	801a      	strh	r2, [r3, #0]
        goto common_9488;
 80038f0:	e003      	b.n	80038fa <tft_init+0x59e>
    case 0x9487:                //with thanks to Charlyf
    case 0x9488:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 80038f2:	4b17      	ldr	r3, [pc, #92]	; (8003950 <tft_init+0x5f4>)
 80038f4:	f240 4213 	movw	r2, #1043	; 0x413
 80038f8:	801a      	strh	r2, [r3, #0]
      common_9488:
	    dummy=1;
 80038fa:	2301      	movs	r3, #1
 80038fc:	617b      	str	r3, [r7, #20]
            0xB6, 3, 0x02, 0x02, 0x3B,  // Display Function Control [02 02 3B] .kbv NL=480
            0xB7, 1, 0xC6,      //Entry Mode      [06]
            0x3A, 1, 0x55,      //Interlace Pixel Format [XX]
            0xF7, 4, 0xA9, 0x51, 0x2C, 0x82,    //Adjustment Control 3 [A9 51 2C 82]
        };
        table8_ads = ILI9488_regValues_max, table_size = sizeof(ILI9488_regValues_max);
 80038fe:	4b23      	ldr	r3, [pc, #140]	; (800398c <tft_init+0x630>)
 8003900:	61fb      	str	r3, [r7, #28]
 8003902:	232b      	movs	r3, #43	; 0x2b
 8003904:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8003906:	4b16      	ldr	r3, [pc, #88]	; (8003960 <tft_init+0x604>)
 8003908:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003910:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8003912:	4b14      	ldr	r3, [pc, #80]	; (8003964 <tft_init+0x608>)
 8003914:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800391c:	801a      	strh	r2, [r3, #0]
        break;
 800391e:	e041      	b.n	80039a4 <tft_init+0x648>
    case 0xB505:                //R61505V
    case 0xC505:                //R61505W
        _lcd_capable = 0 | REV_SCREEN | READ_LOWHIGH;
 8003920:	4b0b      	ldr	r3, [pc, #44]	; (8003950 <tft_init+0x5f4>)
 8003922:	f241 0208 	movw	r2, #4104	; 0x1008
 8003926:	801a      	strh	r2, [r3, #0]
            0x0092, 0x0100,
            0x0093, 0x0701,
            TFTLCD_DELAY, 80,
            0x0007, 0x0100,     //BASEE=1--Display On
        };
        init_table16(R61505V_regValues, sizeof(R61505V_regValues));
 8003928:	21b0      	movs	r1, #176	; 0xb0
 800392a:	4819      	ldr	r0, [pc, #100]	; (8003990 <tft_init+0x634>)
 800392c:	f7ff fa89 	bl	8002e42 <init_table16>
        break;
 8003930:	e038      	b.n	80039a4 <tft_init+0x648>

#if defined(SUPPORT_B509_7793)
    case 0x7793:
    case 0xB509:
        _lcd_capable = REV_SCREEN;
 8003932:	4b07      	ldr	r3, [pc, #28]	; (8003950 <tft_init+0x5f4>)
 8003934:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003938:	801a      	strh	r2, [r3, #0]
            TFTLCD_DELAY, 50,

            0x0200, 0x0000,
            0x0201, 0x0000,
        };
        init_table16(R61509V_regValues, sizeof(R61509V_regValues));
 800393a:	21c0      	movs	r1, #192	; 0xc0
 800393c:	4815      	ldr	r0, [pc, #84]	; (8003994 <tft_init+0x638>)
 800393e:	f7ff fa80 	bl	8002e42 <init_table16>
        p16 = (int16_t *) & height;
 8003942:	4b07      	ldr	r3, [pc, #28]	; (8003960 <tft_init+0x604>)
 8003944:	613b      	str	r3, [r7, #16]
        *p16 = 400;
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800394c:	801a      	strh	r2, [r3, #0]
        break;
 800394e:	e029      	b.n	80039a4 <tft_init+0x648>
 8003950:	200003c0 	.word	0x200003c0
 8003954:	0800c94c 	.word	0x0800c94c
 8003958:	0800c990 	.word	0x0800c990
 800395c:	0800c9a4 	.word	0x0800c9a4
 8003960:	08002289 	.word	0x08002289
 8003964:	08002271 	.word	0x08002271
 8003968:	0800c9a8 	.word	0x0800c9a8
 800396c:	0800c9c8 	.word	0x0800c9c8
 8003970:	0800caa0 	.word	0x0800caa0
 8003974:	0800cb6c 	.word	0x0800cb6c
 8003978:	0800cb8c 	.word	0x0800cb8c
 800397c:	0800cb94 	.word	0x0800cb94
 8003980:	0800cb98 	.word	0x0800cb98
 8003984:	0800cc00 	.word	0x0800cc00
 8003988:	0800cc48 	.word	0x0800cc48
 800398c:	0800cc84 	.word	0x0800cc84
 8003990:	0800ccb0 	.word	0x0800ccb0
 8003994:	0800cd60 	.word	0x0800cd60
        p16 = (int16_t *) & width;
        *p16 = 854;
        break;
#endif
    default:
        p16 = (int16_t *) & width;
 8003998:	4b2c      	ldr	r3, [pc, #176]	; (8003a4c <tft_init+0x6f0>)
 800399a:	613b      	str	r3, [r7, #16]
        *p16 = 0;       //error value for width
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	2200      	movs	r2, #0
 80039a0:	801a      	strh	r2, [r3, #0]
        break;
 80039a2:	bf00      	nop
    }
    _lcd_rev = ((_lcd_capable & REV_SCREEN) != 0);
 80039a4:	4b2a      	ldr	r3, [pc, #168]	; (8003a50 <tft_init+0x6f4>)
 80039a6:	881b      	ldrh	r3, [r3, #0]
 80039a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	bf14      	ite	ne
 80039b0:	2301      	movne	r3, #1
 80039b2:	2300      	moveq	r3, #0
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	b29a      	uxth	r2, r3
 80039b8:	4b26      	ldr	r3, [pc, #152]	; (8003a54 <tft_init+0x6f8>)
 80039ba:	801a      	strh	r2, [r3, #0]
    if (table8_ads != NULL) {
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00d      	beq.n	80039de <tft_init+0x682>
        static const uint8_t wake_on[]  = {
			0x11, 0,            //Sleep Out
            TFTLCD_DELAY8, 150,
            0x29, 0,            //Display On
        };
		init_table(&reset_off, sizeof(reset_off));
 80039c2:	2109      	movs	r1, #9
 80039c4:	4824      	ldr	r0, [pc, #144]	; (8003a58 <tft_init+0x6fc>)
 80039c6:	f7ff f9e3 	bl	8002d90 <init_table>
	    init_table(table8_ads, table_size);   //can change PIXFMT
 80039ca:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80039ce:	4619      	mov	r1, r3
 80039d0:	69f8      	ldr	r0, [r7, #28]
 80039d2:	f7ff f9dd 	bl	8002d90 <init_table>
		init_table(&wake_on, sizeof(wake_on));
 80039d6:	2106      	movs	r1, #6
 80039d8:	4820      	ldr	r0, [pc, #128]	; (8003a5c <tft_init+0x700>)
 80039da:	f7ff f9d9 	bl	8002d90 <init_table>
    }
    setRotation(0);             //PORTRAIT
 80039de:	2000      	movs	r0, #0
 80039e0:	f000 ff72 	bl	80048c8 <setRotation>
    invertDisplay(false);
 80039e4:	2000      	movs	r0, #0
 80039e6:	f001 fd5f 	bl	80054a8 <invertDisplay>
#if defined(SUPPORT_9488_555)
    if (_lcd_ID == 0x9488) {
 80039ea:	4b1d      	ldr	r3, [pc, #116]	; (8003a60 <tft_init+0x704>)
 80039ec:	881b      	ldrh	r3, [r3, #0]
 80039ee:	f249 4288 	movw	r2, #38024	; 0x9488
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d125      	bne.n	8003a42 <tft_init+0x6e6>
		is555 = 0;
 80039f6:	4b1b      	ldr	r3, [pc, #108]	; (8003a64 <tft_init+0x708>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	701a      	strb	r2, [r3, #0]
		drawPixel(0, 0, 0xFFE0);
 80039fc:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8003a00:	2100      	movs	r1, #0
 8003a02:	2000      	movs	r0, #0
 8003a04:	f001 f9e6 	bl	8004dd4 <drawPixel>
		if (readPixel(0, 0) == 0xFF1F) {
 8003a08:	2100      	movs	r1, #0
 8003a0a:	2000      	movs	r0, #0
 8003a0c:	f7fe fcdf 	bl	80023ce <readPixel>
 8003a10:	4603      	mov	r3, r0
 8003a12:	461a      	mov	r2, r3
 8003a14:	f64f 731f 	movw	r3, #65311	; 0xff1f
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d112      	bne.n	8003a42 <tft_init+0x6e6>
			uint8_t pixfmt = 0x06;
 8003a1c:	2306      	movs	r3, #6
 8003a1e:	73fb      	strb	r3, [r7, #15]
			pushCommand(0x3A, &pixfmt, 1);
 8003a20:	f107 030f 	add.w	r3, r7, #15
 8003a24:	2201      	movs	r2, #1
 8003a26:	4619      	mov	r1, r3
 8003a28:	203a      	movs	r0, #58	; 0x3a
 8003a2a:	f7fe fcfa 	bl	8002422 <pushCommand>
			_lcd_capable &= ~READ_24BITS;
 8003a2e:	4b08      	ldr	r3, [pc, #32]	; (8003a50 <tft_init+0x6f4>)
 8003a30:	881b      	ldrh	r3, [r3, #0]
 8003a32:	f023 0310 	bic.w	r3, r3, #16
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	4b05      	ldr	r3, [pc, #20]	; (8003a50 <tft_init+0x6f4>)
 8003a3a:	801a      	strh	r2, [r3, #0]
			is555 = 1;
 8003a3c:	4b09      	ldr	r3, [pc, #36]	; (8003a64 <tft_init+0x708>)
 8003a3e:	2201      	movs	r2, #1
 8003a40:	701a      	strb	r2, [r3, #0]
		}
	}
#endif
}
 8003a42:	bf00      	nop
 8003a44:	3720      	adds	r7, #32
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	08002271 	.word	0x08002271
 8003a50:	200003c0 	.word	0x200003c0
 8003a54:	200003c4 	.word	0x200003c4
 8003a58:	0800ce20 	.word	0x0800ce20
 8003a5c:	0800ce2c 	.word	0x0800ce2c
 8003a60:	200003ce 	.word	0x200003ce
 8003a64:	2000021a 	.word	0x2000021a

08003a68 <readID>:


uint16_t readID(void)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
    uint16_t ret, ret2;
    uint8_t msb;
    ret = readReg(0,0);           //forces a reset() if called before begin()
 8003a6e:	2100      	movs	r1, #0
 8003a70:	2000      	movs	r0, #0
 8003a72:	f7ff fb55 	bl	8003120 <readReg>
 8003a76:	4603      	mov	r3, r0
 8003a78:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x5408)          //the SPFD5408 fails the 0xD3D3 test.
 8003a7a:	89fb      	ldrh	r3, [r7, #14]
 8003a7c:	f245 4208 	movw	r2, #21512	; 0x5408
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d102      	bne.n	8003a8a <readID+0x22>
        return 0x5408;
 8003a84:	f245 4308 	movw	r3, #21512	; 0x5408
 8003a88:	e128      	b.n	8003cdc <readID+0x274>
    if (ret == 0x5420)          //the SPFD5420 fails the 0xD3D3 test.
 8003a8a:	89fb      	ldrh	r3, [r7, #14]
 8003a8c:	f245 4220 	movw	r2, #21536	; 0x5420
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d102      	bne.n	8003a9a <readID+0x32>
        return 0x5420;
 8003a94:	f245 4320 	movw	r3, #21536	; 0x5420
 8003a98:	e120      	b.n	8003cdc <readID+0x274>
    if (ret == 0x8989)          //SSD1289 is always 8989
 8003a9a:	89fb      	ldrh	r3, [r7, #14]
 8003a9c:	f648 1289 	movw	r2, #35209	; 0x8989
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d102      	bne.n	8003aaa <readID+0x42>
        return 0x1289;
 8003aa4:	f241 2389 	movw	r3, #4745	; 0x1289
 8003aa8:	e118      	b.n	8003cdc <readID+0x274>
    ret = readReg(0x67,0);        //HX8347-A
 8003aaa:	2100      	movs	r1, #0
 8003aac:	2067      	movs	r0, #103	; 0x67
 8003aae:	f7ff fb37 	bl	8003120 <readReg>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x4747)
 8003ab6:	89fb      	ldrh	r3, [r7, #14]
 8003ab8:	f244 7247 	movw	r2, #18247	; 0x4747
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d102      	bne.n	8003ac6 <readID+0x5e>
        return 0x8347;
 8003ac0:	f248 3347 	movw	r3, #33607	; 0x8347
 8003ac4:	e10a      	b.n	8003cdc <readID+0x274>
//#if defined(SUPPORT_1963) && USING_16BIT_BUS
    ret = readReg32(0xA1);      //SSD1963: [01 57 61 01]
 8003ac6:	20a1      	movs	r0, #161	; 0xa1
 8003ac8:	f7ff fc06 	bl	80032d8 <readReg32>
 8003acc:	4603      	mov	r3, r0
 8003ace:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x6101)
 8003ad0:	89fb      	ldrh	r3, [r7, #14]
 8003ad2:	f246 1201 	movw	r2, #24833	; 0x6101
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d102      	bne.n	8003ae0 <readID+0x78>
        return 0x1963;
 8003ada:	f641 1363 	movw	r3, #6499	; 0x1963
 8003ade:	e0fd      	b.n	8003cdc <readID+0x274>
    if (ret == 0xFFFF)          //R61526: [xx FF FF FF]
 8003ae0:	89fb      	ldrh	r3, [r7, #14]
 8003ae2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d102      	bne.n	8003af0 <readID+0x88>
        return 0x1526;          //subsequent begin() enables Command Access
 8003aea:	f241 5326 	movw	r3, #5414	; 0x1526
 8003aee:	e0f5      	b.n	8003cdc <readID+0x274>
//    if (ret == 0xFF00)          //R61520: [xx FF FF 00]
//        return 0x1520;          //subsequent begin() enables Command Access
//#endif
	ret = readReg40(0xBF);
 8003af0:	20bf      	movs	r0, #191	; 0xbf
 8003af2:	f7ff fc0c 	bl	800330e <readReg40>
 8003af6:	4603      	mov	r3, r0
 8003af8:	81fb      	strh	r3, [r7, #14]
	if (ret == 0x8357)          //HX8357B: [xx 01 62 83 57 FF]
 8003afa:	89fb      	ldrh	r3, [r7, #14]
 8003afc:	f248 3257 	movw	r2, #33623	; 0x8357
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d102      	bne.n	8003b0a <readID+0xa2>
        return 0x8357;
 8003b04:	f248 3357 	movw	r3, #33623	; 0x8357
 8003b08:	e0e8      	b.n	8003cdc <readID+0x274>
	if (ret == 0x9481)          //ILI9481: [xx 02 04 94 81 FF]
 8003b0a:	89fb      	ldrh	r3, [r7, #14]
 8003b0c:	f249 4281 	movw	r2, #38017	; 0x9481
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d102      	bne.n	8003b1a <readID+0xb2>
        return 0x9481;
 8003b14:	f249 4381 	movw	r3, #38017	; 0x9481
 8003b18:	e0e0      	b.n	8003cdc <readID+0x274>
    if (ret == 0x1511)          //?R61511: [xx 02 04 15 11] not tested yet
 8003b1a:	89fb      	ldrh	r3, [r7, #14]
 8003b1c:	f241 5211 	movw	r2, #5393	; 0x1511
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d102      	bne.n	8003b2a <readID+0xc2>
        return 0x1511;
 8003b24:	f241 5311 	movw	r3, #5393	; 0x1511
 8003b28:	e0d8      	b.n	8003cdc <readID+0x274>
    if (ret == 0x1520)          //?R61520: [xx 01 22 15 20]
 8003b2a:	89fb      	ldrh	r3, [r7, #14]
 8003b2c:	f5b3 5fa9 	cmp.w	r3, #5408	; 0x1520
 8003b30:	d102      	bne.n	8003b38 <readID+0xd0>
        return 0x1520;
 8003b32:	f44f 53a9 	mov.w	r3, #5408	; 0x1520
 8003b36:	e0d1      	b.n	8003cdc <readID+0x274>
    if (ret == 0x1526)          //?R61526: [xx 01 22 15 26]
 8003b38:	89fb      	ldrh	r3, [r7, #14]
 8003b3a:	f241 5226 	movw	r2, #5414	; 0x1526
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d102      	bne.n	8003b48 <readID+0xe0>
        return 0x1526;
 8003b42:	f241 5326 	movw	r3, #5414	; 0x1526
 8003b46:	e0c9      	b.n	8003cdc <readID+0x274>
    if (ret == 0x1581)          //R61581:  [xx 01 22 15 81]
 8003b48:	89fb      	ldrh	r3, [r7, #14]
 8003b4a:	f241 5281 	movw	r2, #5505	; 0x1581
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d102      	bne.n	8003b58 <readID+0xf0>
        return 0x1581;
 8003b52:	f241 5381 	movw	r3, #5505	; 0x1581
 8003b56:	e0c1      	b.n	8003cdc <readID+0x274>
    if (ret == 0x1400)          //?RM68140:[xx FF 68 14 00] not tested yet
 8003b58:	89fb      	ldrh	r3, [r7, #14]
 8003b5a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003b5e:	d102      	bne.n	8003b66 <readID+0xfe>
        return 0x6814;
 8003b60:	f646 0314 	movw	r3, #26644	; 0x6814
 8003b64:	e0ba      	b.n	8003cdc <readID+0x274>
    ret = readReg32(0xD4);
 8003b66:	20d4      	movs	r0, #212	; 0xd4
 8003b68:	f7ff fbb6 	bl	80032d8 <readReg32>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x5310)          //NT35310: [xx 01 53 10]
 8003b70:	89fb      	ldrh	r3, [r7, #14]
 8003b72:	f245 3210 	movw	r2, #21264	; 0x5310
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d102      	bne.n	8003b80 <readID+0x118>
        return 0x5310;
 8003b7a:	f245 3310 	movw	r3, #21264	; 0x5310
 8003b7e:	e0ad      	b.n	8003cdc <readID+0x274>
    ret = readReg32(0xD7);
 8003b80:	20d7      	movs	r0, #215	; 0xd7
 8003b82:	f7ff fba9 	bl	80032d8 <readReg32>
 8003b86:	4603      	mov	r3, r0
 8003b88:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x8031)          //weird unknown from BangGood [xx 20 80 31] PrinceCharles
 8003b8a:	89fb      	ldrh	r3, [r7, #14]
 8003b8c:	f248 0231 	movw	r2, #32817	; 0x8031
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d102      	bne.n	8003b9a <readID+0x132>
        return 0x8031;
 8003b94:	f248 0331 	movw	r3, #32817	; 0x8031
 8003b98:	e0a0      	b.n	8003cdc <readID+0x274>
    ret = readReg40(0xEF);      //ILI9327: [xx 02 04 93 27 FF]
 8003b9a:	20ef      	movs	r0, #239	; 0xef
 8003b9c:	f7ff fbb7 	bl	800330e <readReg40>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x9327)
 8003ba4:	89fb      	ldrh	r3, [r7, #14]
 8003ba6:	f249 3227 	movw	r2, #37671	; 0x9327
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d102      	bne.n	8003bb4 <readID+0x14c>
        return 0x9327;
 8003bae:	f249 3327 	movw	r3, #37671	; 0x9327
 8003bb2:	e093      	b.n	8003cdc <readID+0x274>
    ret = readReg32(0xFE) >> 8; //weird unknown from BangGood [04 20 53]
 8003bb4:	20fe      	movs	r0, #254	; 0xfe
 8003bb6:	f7ff fb8f 	bl	80032d8 <readReg32>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	0a1b      	lsrs	r3, r3, #8
 8003bbe:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x2053)
 8003bc0:	89fb      	ldrh	r3, [r7, #14]
 8003bc2:	f242 0253 	movw	r2, #8275	; 0x2053
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d102      	bne.n	8003bd0 <readID+0x168>
        return 0x2053;
 8003bca:	f242 0353 	movw	r3, #8275	; 0x2053
 8003bce:	e085      	b.n	8003cdc <readID+0x274>
    uint32_t ret32 = readReg32(0x04);
 8003bd0:	2004      	movs	r0, #4
 8003bd2:	f7ff fb81 	bl	80032d8 <readReg32>
 8003bd6:	60b8      	str	r0, [r7, #8]
    msb = ret32 >> 16;
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	0c1b      	lsrs	r3, r3, #16
 8003bdc:	71fb      	strb	r3, [r7, #7]
    ret = ret32;
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	81fb      	strh	r3, [r7, #14]
//    if (msb = 0x38 && ret == 0x8000) //unknown [xx 38 80 00] with D3 = 0x1602
    if (msb == 0x00 && ret == 0x8000) { //HX8357-D [xx 00 80 00]
 8003be2:	79fb      	ldrb	r3, [r7, #7]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d122      	bne.n	8003c2e <readID+0x1c6>
 8003be8:	89fb      	ldrh	r3, [r7, #14]
 8003bea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bee:	d11e      	bne.n	8003c2e <readID+0x1c6>
#if 1
        uint8_t cmds[] = {0xFF, 0x83, 0x57};
 8003bf0:	4a3c      	ldr	r2, [pc, #240]	; (8003ce4 <readID+0x27c>)
 8003bf2:	1d3b      	adds	r3, r7, #4
 8003bf4:	6812      	ldr	r2, [r2, #0]
 8003bf6:	4611      	mov	r1, r2
 8003bf8:	8019      	strh	r1, [r3, #0]
 8003bfa:	3302      	adds	r3, #2
 8003bfc:	0c12      	lsrs	r2, r2, #16
 8003bfe:	701a      	strb	r2, [r3, #0]
        pushCommand(0xB9, cmds, 3);
 8003c00:	1d3b      	adds	r3, r7, #4
 8003c02:	2203      	movs	r2, #3
 8003c04:	4619      	mov	r1, r3
 8003c06:	20b9      	movs	r0, #185	; 0xb9
 8003c08:	f7fe fc0b 	bl	8002422 <pushCommand>
        msb = readReg(0xD0,0);
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	20d0      	movs	r0, #208	; 0xd0
 8003c10:	f7ff fa86 	bl	8003120 <readReg>
 8003c14:	4603      	mov	r3, r0
 8003c16:	71fb      	strb	r3, [r7, #7]
        if (msb == 0x99) return 0x0099; //HX8357-D from datasheet
 8003c18:	79fb      	ldrb	r3, [r7, #7]
 8003c1a:	2b99      	cmp	r3, #153	; 0x99
 8003c1c:	d101      	bne.n	8003c22 <readID+0x1ba>
 8003c1e:	2399      	movs	r3, #153	; 0x99
 8003c20:	e05c      	b.n	8003cdc <readID+0x274>
        if (msb == 0x90)        //HX8357-C undocumented
 8003c22:	79fb      	ldrb	r3, [r7, #7]
 8003c24:	2b90      	cmp	r3, #144	; 0x90
 8003c26:	d102      	bne.n	8003c2e <readID+0x1c6>
#endif
            return 0x9090;      //BIG CHANGE: HX8357-D was 0x8357
 8003c28:	f249 0390 	movw	r3, #37008	; 0x9090
 8003c2c:	e056      	b.n	8003cdc <readID+0x274>
    }
//    if (msb == 0xFF && ret == 0xFFFF) //R61526 [xx FF FF FF]
//        return 0x1526;          //subsequent begin() enables Command Access
    if (ret == 0x1526)          //R61526 [xx 06 15 26] if I have written NVM
 8003c2e:	89fb      	ldrh	r3, [r7, #14]
 8003c30:	f241 5226 	movw	r2, #5414	; 0x1526
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d102      	bne.n	8003c3e <readID+0x1d6>
        return 0x1526;          //subsequent begin() enables Command Access
 8003c38:	f241 5326 	movw	r3, #5414	; 0x1526
 8003c3c:	e04e      	b.n	8003cdc <readID+0x274>
	if (ret == 0x89F0)          //ST7735S: [xx 7C 89 F0]
 8003c3e:	89fb      	ldrh	r3, [r7, #14]
 8003c40:	f648 12f0 	movw	r2, #35312	; 0x89f0
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d102      	bne.n	8003c4e <readID+0x1e6>
        return 0x7735;
 8003c48:	f247 7335 	movw	r3, #30517	; 0x7735
 8003c4c:	e046      	b.n	8003cdc <readID+0x274>
	if (ret == 0x8552)          //ST7789V: [xx 85 85 52]
 8003c4e:	89fb      	ldrh	r3, [r7, #14]
 8003c50:	f248 5252 	movw	r2, #34130	; 0x8552
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d102      	bne.n	8003c5e <readID+0x1f6>
        return 0x7789;
 8003c58:	f247 7389 	movw	r3, #30601	; 0x7789
 8003c5c:	e03e      	b.n	8003cdc <readID+0x274>
    if (ret == 0xAC11)          //?unknown [xx 61 AC 11]
 8003c5e:	89fb      	ldrh	r3, [r7, #14]
 8003c60:	f64a 4211 	movw	r2, #44049	; 0xac11
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d102      	bne.n	8003c6e <readID+0x206>
        return 0xAC11;
 8003c68:	f64a 4311 	movw	r3, #44049	; 0xac11
 8003c6c:	e036      	b.n	8003cdc <readID+0x274>
    ret32 = readReg32(0xD3);      //[xx 91 63 00]
 8003c6e:	20d3      	movs	r0, #211	; 0xd3
 8003c70:	f7ff fb32 	bl	80032d8 <readReg32>
 8003c74:	60b8      	str	r0, [r7, #8]
    ret = ret32 >> 8;
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	0a1b      	lsrs	r3, r3, #8
 8003c7a:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x9163) return ret;
 8003c7c:	89fb      	ldrh	r3, [r7, #14]
 8003c7e:	f249 1263 	movw	r2, #37219	; 0x9163
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d101      	bne.n	8003c8a <readID+0x222>
 8003c86:	89fb      	ldrh	r3, [r7, #14]
 8003c88:	e028      	b.n	8003cdc <readID+0x274>
    ret = readReg32(0xD3);      //for ILI9488, 9486, 9340, 9341
 8003c8a:	20d3      	movs	r0, #211	; 0xd3
 8003c8c:	f7ff fb24 	bl	80032d8 <readReg32>
 8003c90:	4603      	mov	r3, r0
 8003c92:	81fb      	strh	r3, [r7, #14]
    msb = ret >> 8;
 8003c94:	89fb      	ldrh	r3, [r7, #14]
 8003c96:	0a1b      	lsrs	r3, r3, #8
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	71fb      	strb	r3, [r7, #7]
    if (msb == 0x93 || msb == 0x94 || msb == 0x98 || msb == 0x77 || msb == 0x16)
 8003c9c:	79fb      	ldrb	r3, [r7, #7]
 8003c9e:	2b93      	cmp	r3, #147	; 0x93
 8003ca0:	d00b      	beq.n	8003cba <readID+0x252>
 8003ca2:	79fb      	ldrb	r3, [r7, #7]
 8003ca4:	2b94      	cmp	r3, #148	; 0x94
 8003ca6:	d008      	beq.n	8003cba <readID+0x252>
 8003ca8:	79fb      	ldrb	r3, [r7, #7]
 8003caa:	2b98      	cmp	r3, #152	; 0x98
 8003cac:	d005      	beq.n	8003cba <readID+0x252>
 8003cae:	79fb      	ldrb	r3, [r7, #7]
 8003cb0:	2b77      	cmp	r3, #119	; 0x77
 8003cb2:	d002      	beq.n	8003cba <readID+0x252>
 8003cb4:	79fb      	ldrb	r3, [r7, #7]
 8003cb6:	2b16      	cmp	r3, #22
 8003cb8:	d101      	bne.n	8003cbe <readID+0x256>
        return ret;             //0x9488, 9486, 9340, 9341, 7796
 8003cba:	89fb      	ldrh	r3, [r7, #14]
 8003cbc:	e00e      	b.n	8003cdc <readID+0x274>
    if (ret == 0x00D3 || ret == 0xD3D3)
 8003cbe:	89fb      	ldrh	r3, [r7, #14]
 8003cc0:	2bd3      	cmp	r3, #211	; 0xd3
 8003cc2:	d004      	beq.n	8003cce <readID+0x266>
 8003cc4:	89fb      	ldrh	r3, [r7, #14]
 8003cc6:	f24d 32d3 	movw	r2, #54227	; 0xd3d3
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d101      	bne.n	8003cd2 <readID+0x26a>
        return ret;             //16-bit write-only bus
 8003cce:	89fb      	ldrh	r3, [r7, #14]
 8003cd0:	e004      	b.n	8003cdc <readID+0x274>
	pushCommand(0xD9, &msb, 1);
	ret = (ret2 << 8) | readReg(0xD3);
//	if (ret2 == 0x93)
    	return ret2;
*/
	return readReg(0,0);          //0154, 7783, 9320, 9325, 9335, B505, B509
 8003cd2:	2100      	movs	r1, #0
 8003cd4:	2000      	movs	r0, #0
 8003cd6:	f7ff fa23 	bl	8003120 <readReg>
 8003cda:	4603      	mov	r3, r0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3710      	adds	r7, #16
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	0800c2c4 	.word	0x0800c2c4

08003ce8 <readGRAM>:


// independent cursor and window registers.   S6D0154, ST7781 increments.  ILI92320/5 do not.
int16_t readGRAM(int16_t x, int16_t y, uint16_t * block, int16_t w, int16_t h)
{
 8003ce8:	b590      	push	{r4, r7, lr}
 8003cea:	b08b      	sub	sp, #44	; 0x2c
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60ba      	str	r2, [r7, #8]
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	81fb      	strh	r3, [r7, #14]
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	81bb      	strh	r3, [r7, #12]
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	80fb      	strh	r3, [r7, #6]
    uint16_t ret, dummy, _MR = _MW;
 8003cfe:	4b1c      	ldr	r3, [pc, #112]	; (8003d70 <readGRAM+0x88>)
 8003d00:	881b      	ldrh	r3, [r3, #0]
 8003d02:	84bb      	strh	r3, [r7, #36]	; 0x24
    int16_t n = w * h, row = 0, col = 0;
 8003d04:	88fa      	ldrh	r2, [r7, #6]
 8003d06:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003d08:	fb12 f303 	smulbb	r3, r2, r3
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	847b      	strh	r3, [r7, #34]	; 0x22
 8003d10:	2300      	movs	r3, #0
 8003d12:	843b      	strh	r3, [r7, #32]
 8003d14:	2300      	movs	r3, #0
 8003d16:	83fb      	strh	r3, [r7, #30]
    uint8_t r, g, b, tmp;
    if (!is8347 && (_lcd_capable & MIPI_DCS_REV1)) // HX8347 uses same register
 8003d18:	4b16      	ldr	r3, [pc, #88]	; (8003d74 <readGRAM+0x8c>)
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d107      	bne.n	8003d30 <readGRAM+0x48>
 8003d20:	4b15      	ldr	r3, [pc, #84]	; (8003d78 <readGRAM+0x90>)
 8003d22:	881b      	ldrh	r3, [r3, #0]
 8003d24:	f003 0301 	and.w	r3, r3, #1
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d001      	beq.n	8003d30 <readGRAM+0x48>
        _MR = 0x2E;
 8003d2c:	232e      	movs	r3, #46	; 0x2e
 8003d2e:	84bb      	strh	r3, [r7, #36]	; 0x24
    if (_lcd_ID == 0x1602) _MR = 0x2E;
 8003d30:	4b12      	ldr	r3, [pc, #72]	; (8003d7c <readGRAM+0x94>)
 8003d32:	881b      	ldrh	r3, [r3, #0]
 8003d34:	f241 6202 	movw	r2, #5634	; 0x1602
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d101      	bne.n	8003d40 <readGRAM+0x58>
 8003d3c:	232e      	movs	r3, #46	; 0x2e
 8003d3e:	84bb      	strh	r3, [r7, #36]	; 0x24
    setAddrWindow(x, y, x + w - 1, y + h - 1);
 8003d40:	89fa      	ldrh	r2, [r7, #14]
 8003d42:	88fb      	ldrh	r3, [r7, #6]
 8003d44:	4413      	add	r3, r2
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	b21c      	sxth	r4, r3
 8003d4e:	89ba      	ldrh	r2, [r7, #12]
 8003d50:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003d52:	4413      	add	r3, r2
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	3b01      	subs	r3, #1
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	b21b      	sxth	r3, r3
 8003d5c:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8003d60:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8003d64:	4622      	mov	r2, r4
 8003d66:	f001 f93b 	bl	8004fe0 <setAddrWindow>
    while (n > 0) {
 8003d6a:	f000 bd86 	b.w	800487a <readGRAM+0xb92>
 8003d6e:	bf00      	nop
 8003d70:	200003be 	.word	0x200003be
 8003d74:	20000219 	.word	0x20000219
 8003d78:	200003c0 	.word	0x200003c0
 8003d7c:	200003ce 	.word	0x200003ce
        if (!(_lcd_capable & MIPI_DCS_REV1)) {
 8003d80:	4ba0      	ldr	r3, [pc, #640]	; (8004004 <readGRAM+0x31c>)
 8003d82:	881b      	ldrh	r3, [r3, #0]
 8003d84:	f003 0301 	and.w	r3, r3, #1
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d111      	bne.n	8003db0 <readGRAM+0xc8>
            WriteCmdData(_MC, x + col);
 8003d8c:	4b9e      	ldr	r3, [pc, #632]	; (8004008 <readGRAM+0x320>)
 8003d8e:	8818      	ldrh	r0, [r3, #0]
 8003d90:	89fa      	ldrh	r2, [r7, #14]
 8003d92:	8bfb      	ldrh	r3, [r7, #30]
 8003d94:	4413      	add	r3, r2
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	4619      	mov	r1, r3
 8003d9a:	f7fe fb30 	bl	80023fe <WriteCmdData>
            WriteCmdData(_MP, y + row);
 8003d9e:	4b9b      	ldr	r3, [pc, #620]	; (800400c <readGRAM+0x324>)
 8003da0:	8818      	ldrh	r0, [r3, #0]
 8003da2:	89ba      	ldrh	r2, [r7, #12]
 8003da4:	8c3b      	ldrh	r3, [r7, #32]
 8003da6:	4413      	add	r3, r2
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	4619      	mov	r1, r3
 8003dac:	f7fe fb27 	bl	80023fe <WriteCmdData>
        }
        CS_ACTIVE;
 8003db0:	2101      	movs	r1, #1
 8003db2:	4897      	ldr	r0, [pc, #604]	; (8004010 <readGRAM+0x328>)
 8003db4:	f7fe fa0e 	bl	80021d4 <PIN_LOW>
        WriteCmd(_MR);
 8003db8:	2110      	movs	r1, #16
 8003dba:	4896      	ldr	r0, [pc, #600]	; (8004014 <readGRAM+0x32c>)
 8003dbc:	f7fe fa0a 	bl	80021d4 <PIN_LOW>
 8003dc0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003dc2:	0a1b      	lsrs	r3, r3, #8
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	777b      	strb	r3, [r7, #29]
 8003dc8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003dca:	773b      	strb	r3, [r7, #28]
 8003dcc:	4b91      	ldr	r3, [pc, #580]	; (8004014 <readGRAM+0x32c>)
 8003dce:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8003dd2:	619a      	str	r2, [r3, #24]
 8003dd4:	4b8e      	ldr	r3, [pc, #568]	; (8004010 <readGRAM+0x328>)
 8003dd6:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8003dda:	619a      	str	r2, [r3, #24]
 8003ddc:	4b8e      	ldr	r3, [pc, #568]	; (8004018 <readGRAM+0x330>)
 8003dde:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003de2:	619a      	str	r2, [r3, #24]
 8003de4:	7f7b      	ldrb	r3, [r7, #29]
 8003de6:	005b      	lsls	r3, r3, #1
 8003de8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8003dec:	7f7b      	ldrb	r3, [r7, #29]
 8003dee:	021b      	lsls	r3, r3, #8
 8003df0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003df4:	431a      	orrs	r2, r3
 8003df6:	7f7b      	ldrb	r3, [r7, #29]
 8003df8:	025b      	lsls	r3, r3, #9
 8003dfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dfe:	431a      	orrs	r2, r3
 8003e00:	4b84      	ldr	r3, [pc, #528]	; (8004014 <readGRAM+0x32c>)
 8003e02:	619a      	str	r2, [r3, #24]
 8003e04:	7f7b      	ldrb	r3, [r7, #29]
 8003e06:	011b      	lsls	r3, r3, #4
 8003e08:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8003e0c:	7f7b      	ldrb	r3, [r7, #29]
 8003e0e:	105b      	asrs	r3, r3, #1
 8003e10:	f003 0310 	and.w	r3, r3, #16
 8003e14:	431a      	orrs	r2, r3
 8003e16:	7f7b      	ldrb	r3, [r7, #29]
 8003e18:	005b      	lsls	r3, r3, #1
 8003e1a:	f003 0320 	and.w	r3, r3, #32
 8003e1e:	431a      	orrs	r2, r3
 8003e20:	7f7b      	ldrb	r3, [r7, #29]
 8003e22:	f003 0308 	and.w	r3, r3, #8
 8003e26:	431a      	orrs	r2, r3
 8003e28:	4b79      	ldr	r3, [pc, #484]	; (8004010 <readGRAM+0x328>)
 8003e2a:	619a      	str	r2, [r3, #24]
 8003e2c:	7f7b      	ldrb	r3, [r7, #29]
 8003e2e:	019b      	lsls	r3, r3, #6
 8003e30:	4a79      	ldr	r2, [pc, #484]	; (8004018 <readGRAM+0x330>)
 8003e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e36:	6193      	str	r3, [r2, #24]
 8003e38:	2102      	movs	r1, #2
 8003e3a:	4876      	ldr	r0, [pc, #472]	; (8004014 <readGRAM+0x32c>)
 8003e3c:	f7fe f9ca 	bl	80021d4 <PIN_LOW>
 8003e40:	2102      	movs	r1, #2
 8003e42:	4874      	ldr	r0, [pc, #464]	; (8004014 <readGRAM+0x32c>)
 8003e44:	f7fe f9c6 	bl	80021d4 <PIN_LOW>
 8003e48:	2102      	movs	r1, #2
 8003e4a:	4872      	ldr	r0, [pc, #456]	; (8004014 <readGRAM+0x32c>)
 8003e4c:	f7fe f9c2 	bl	80021d4 <PIN_LOW>
 8003e50:	2102      	movs	r1, #2
 8003e52:	4870      	ldr	r0, [pc, #448]	; (8004014 <readGRAM+0x32c>)
 8003e54:	f7fe f9ce 	bl	80021f4 <PIN_HIGH>
 8003e58:	2102      	movs	r1, #2
 8003e5a:	486e      	ldr	r0, [pc, #440]	; (8004014 <readGRAM+0x32c>)
 8003e5c:	f7fe f9ca 	bl	80021f4 <PIN_HIGH>
 8003e60:	4b6c      	ldr	r3, [pc, #432]	; (8004014 <readGRAM+0x32c>)
 8003e62:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8003e66:	619a      	str	r2, [r3, #24]
 8003e68:	4b69      	ldr	r3, [pc, #420]	; (8004010 <readGRAM+0x328>)
 8003e6a:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8003e6e:	619a      	str	r2, [r3, #24]
 8003e70:	4b69      	ldr	r3, [pc, #420]	; (8004018 <readGRAM+0x330>)
 8003e72:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003e76:	619a      	str	r2, [r3, #24]
 8003e78:	7f3b      	ldrb	r3, [r7, #28]
 8003e7a:	005b      	lsls	r3, r3, #1
 8003e7c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8003e80:	7f3b      	ldrb	r3, [r7, #28]
 8003e82:	021b      	lsls	r3, r3, #8
 8003e84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e88:	431a      	orrs	r2, r3
 8003e8a:	7f3b      	ldrb	r3, [r7, #28]
 8003e8c:	025b      	lsls	r3, r3, #9
 8003e8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e92:	431a      	orrs	r2, r3
 8003e94:	4b5f      	ldr	r3, [pc, #380]	; (8004014 <readGRAM+0x32c>)
 8003e96:	619a      	str	r2, [r3, #24]
 8003e98:	7f3b      	ldrb	r3, [r7, #28]
 8003e9a:	011b      	lsls	r3, r3, #4
 8003e9c:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8003ea0:	7f3b      	ldrb	r3, [r7, #28]
 8003ea2:	105b      	asrs	r3, r3, #1
 8003ea4:	f003 0310 	and.w	r3, r3, #16
 8003ea8:	431a      	orrs	r2, r3
 8003eaa:	7f3b      	ldrb	r3, [r7, #28]
 8003eac:	005b      	lsls	r3, r3, #1
 8003eae:	f003 0320 	and.w	r3, r3, #32
 8003eb2:	431a      	orrs	r2, r3
 8003eb4:	7f3b      	ldrb	r3, [r7, #28]
 8003eb6:	f003 0308 	and.w	r3, r3, #8
 8003eba:	431a      	orrs	r2, r3
 8003ebc:	4b54      	ldr	r3, [pc, #336]	; (8004010 <readGRAM+0x328>)
 8003ebe:	619a      	str	r2, [r3, #24]
 8003ec0:	7f3b      	ldrb	r3, [r7, #28]
 8003ec2:	019b      	lsls	r3, r3, #6
 8003ec4:	4a54      	ldr	r2, [pc, #336]	; (8004018 <readGRAM+0x330>)
 8003ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eca:	6193      	str	r3, [r2, #24]
 8003ecc:	2102      	movs	r1, #2
 8003ece:	4851      	ldr	r0, [pc, #324]	; (8004014 <readGRAM+0x32c>)
 8003ed0:	f7fe f980 	bl	80021d4 <PIN_LOW>
 8003ed4:	2102      	movs	r1, #2
 8003ed6:	484f      	ldr	r0, [pc, #316]	; (8004014 <readGRAM+0x32c>)
 8003ed8:	f7fe f97c 	bl	80021d4 <PIN_LOW>
 8003edc:	2102      	movs	r1, #2
 8003ede:	484d      	ldr	r0, [pc, #308]	; (8004014 <readGRAM+0x32c>)
 8003ee0:	f7fe f978 	bl	80021d4 <PIN_LOW>
 8003ee4:	2102      	movs	r1, #2
 8003ee6:	484b      	ldr	r0, [pc, #300]	; (8004014 <readGRAM+0x32c>)
 8003ee8:	f7fe f984 	bl	80021f4 <PIN_HIGH>
 8003eec:	2102      	movs	r1, #2
 8003eee:	4849      	ldr	r0, [pc, #292]	; (8004014 <readGRAM+0x32c>)
 8003ef0:	f7fe f980 	bl	80021f4 <PIN_HIGH>
 8003ef4:	2110      	movs	r1, #16
 8003ef6:	4847      	ldr	r0, [pc, #284]	; (8004014 <readGRAM+0x32c>)
 8003ef8:	f7fe f97c 	bl	80021f4 <PIN_HIGH>
        setReadDir();
 8003efc:	f7fe faa4 	bl	8002448 <setReadDir>
        if (_lcd_capable & READ_NODUMMY) {
 8003f00:	4b40      	ldr	r3, [pc, #256]	; (8004004 <readGRAM+0x31c>)
 8003f02:	881b      	ldrh	r3, [r3, #0]
 8003f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	f040 816d 	bne.w	80041e8 <readGRAM+0x500>
            ;
        } else if ((_lcd_capable & MIPI_DCS_REV1) || _lcd_ID == 0x1289) {
 8003f0e:	4b3d      	ldr	r3, [pc, #244]	; (8004004 <readGRAM+0x31c>)
 8003f10:	881b      	ldrh	r3, [r3, #0]
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d105      	bne.n	8003f26 <readGRAM+0x23e>
 8003f1a:	4b40      	ldr	r3, [pc, #256]	; (800401c <readGRAM+0x334>)
 8003f1c:	881b      	ldrh	r3, [r3, #0]
 8003f1e:	f241 2289 	movw	r2, #4745	; 0x1289
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d17c      	bne.n	8004020 <readGRAM+0x338>
            READ_8(r);
 8003f26:	2101      	movs	r1, #1
 8003f28:	483a      	ldr	r0, [pc, #232]	; (8004014 <readGRAM+0x32c>)
 8003f2a:	f7fe f963 	bl	80021f4 <PIN_HIGH>
 8003f2e:	2101      	movs	r1, #1
 8003f30:	4838      	ldr	r0, [pc, #224]	; (8004014 <readGRAM+0x32c>)
 8003f32:	f7fe f94f 	bl	80021d4 <PIN_LOW>
 8003f36:	2101      	movs	r1, #1
 8003f38:	4836      	ldr	r0, [pc, #216]	; (8004014 <readGRAM+0x32c>)
 8003f3a:	f7fe f94b 	bl	80021d4 <PIN_LOW>
 8003f3e:	2101      	movs	r1, #1
 8003f40:	4834      	ldr	r0, [pc, #208]	; (8004014 <readGRAM+0x32c>)
 8003f42:	f7fe f947 	bl	80021d4 <PIN_LOW>
 8003f46:	2101      	movs	r1, #1
 8003f48:	4832      	ldr	r0, [pc, #200]	; (8004014 <readGRAM+0x32c>)
 8003f4a:	f7fe f943 	bl	80021d4 <PIN_LOW>
 8003f4e:	2101      	movs	r1, #1
 8003f50:	4830      	ldr	r0, [pc, #192]	; (8004014 <readGRAM+0x32c>)
 8003f52:	f7fe f93f 	bl	80021d4 <PIN_LOW>
 8003f56:	2101      	movs	r1, #1
 8003f58:	482e      	ldr	r0, [pc, #184]	; (8004014 <readGRAM+0x32c>)
 8003f5a:	f7fe f93b 	bl	80021d4 <PIN_LOW>
 8003f5e:	2101      	movs	r1, #1
 8003f60:	482c      	ldr	r0, [pc, #176]	; (8004014 <readGRAM+0x32c>)
 8003f62:	f7fe f937 	bl	80021d4 <PIN_LOW>
 8003f66:	4b2b      	ldr	r3, [pc, #172]	; (8004014 <readGRAM+0x32c>)
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	085b      	lsrs	r3, r3, #1
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003f72:	b2da      	uxtb	r2, r3
 8003f74:	4b26      	ldr	r3, [pc, #152]	; (8004010 <readGRAM+0x328>)
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	091b      	lsrs	r3, r3, #4
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	4313      	orrs	r3, r2
 8003f84:	b2da      	uxtb	r2, r3
 8003f86:	4b22      	ldr	r3, [pc, #136]	; (8004010 <readGRAM+0x328>)
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	005b      	lsls	r3, r3, #1
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	f003 0320 	and.w	r3, r3, #32
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	4313      	orrs	r3, r2
 8003f98:	b2da      	uxtb	r2, r3
 8003f9a:	4b1d      	ldr	r3, [pc, #116]	; (8004010 <readGRAM+0x328>)
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	085b      	lsrs	r3, r3, #1
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	f003 0310 	and.w	r3, r3, #16
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	b2da      	uxtb	r2, r3
 8003fac:	4b18      	ldr	r3, [pc, #96]	; (8004010 <readGRAM+0x328>)
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	f003 0308 	and.w	r3, r3, #8
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	b2da      	uxtb	r2, r3
 8003fbc:	4b15      	ldr	r3, [pc, #84]	; (8004014 <readGRAM+0x32c>)
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	0a1b      	lsrs	r3, r3, #8
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	f003 0304 	and.w	r3, r3, #4
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	b2da      	uxtb	r2, r3
 8003fce:	4b12      	ldr	r3, [pc, #72]	; (8004018 <readGRAM+0x330>)
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	099b      	lsrs	r3, r3, #6
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	f003 0302 	and.w	r3, r3, #2
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	b2da      	uxtb	r2, r3
 8003fe0:	4b0c      	ldr	r3, [pc, #48]	; (8004014 <readGRAM+0x32c>)
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	0a5b      	lsrs	r3, r3, #9
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	f003 0301 	and.w	r3, r3, #1
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	75fb      	strb	r3, [r7, #23]
 8003ff2:	2101      	movs	r1, #1
 8003ff4:	4807      	ldr	r0, [pc, #28]	; (8004014 <readGRAM+0x32c>)
 8003ff6:	f7fe f8fd 	bl	80021f4 <PIN_HIGH>
 8003ffa:	2101      	movs	r1, #1
 8003ffc:	4805      	ldr	r0, [pc, #20]	; (8004014 <readGRAM+0x32c>)
 8003ffe:	f7fe f8f9 	bl	80021f4 <PIN_HIGH>
 8004002:	e0f1      	b.n	80041e8 <readGRAM+0x500>
 8004004:	200003c0 	.word	0x200003c0
 8004008:	200003c8 	.word	0x200003c8
 800400c:	200003c6 	.word	0x200003c6
 8004010:	40020400 	.word	0x40020400
 8004014:	40020000 	.word	0x40020000
 8004018:	40020800 	.word	0x40020800
 800401c:	200003ce 	.word	0x200003ce
        } else {
            READ_16(dummy);
 8004020:	2101      	movs	r1, #1
 8004022:	48ac      	ldr	r0, [pc, #688]	; (80042d4 <readGRAM+0x5ec>)
 8004024:	f7fe f8e6 	bl	80021f4 <PIN_HIGH>
 8004028:	2101      	movs	r1, #1
 800402a:	48aa      	ldr	r0, [pc, #680]	; (80042d4 <readGRAM+0x5ec>)
 800402c:	f7fe f8d2 	bl	80021d4 <PIN_LOW>
 8004030:	2101      	movs	r1, #1
 8004032:	48a8      	ldr	r0, [pc, #672]	; (80042d4 <readGRAM+0x5ec>)
 8004034:	f7fe f8ce 	bl	80021d4 <PIN_LOW>
 8004038:	2101      	movs	r1, #1
 800403a:	48a6      	ldr	r0, [pc, #664]	; (80042d4 <readGRAM+0x5ec>)
 800403c:	f7fe f8ca 	bl	80021d4 <PIN_LOW>
 8004040:	2101      	movs	r1, #1
 8004042:	48a4      	ldr	r0, [pc, #656]	; (80042d4 <readGRAM+0x5ec>)
 8004044:	f7fe f8c6 	bl	80021d4 <PIN_LOW>
 8004048:	2101      	movs	r1, #1
 800404a:	48a2      	ldr	r0, [pc, #648]	; (80042d4 <readGRAM+0x5ec>)
 800404c:	f7fe f8c2 	bl	80021d4 <PIN_LOW>
 8004050:	2101      	movs	r1, #1
 8004052:	48a0      	ldr	r0, [pc, #640]	; (80042d4 <readGRAM+0x5ec>)
 8004054:	f7fe f8be 	bl	80021d4 <PIN_LOW>
 8004058:	2101      	movs	r1, #1
 800405a:	489e      	ldr	r0, [pc, #632]	; (80042d4 <readGRAM+0x5ec>)
 800405c:	f7fe f8ba 	bl	80021d4 <PIN_LOW>
 8004060:	4b9c      	ldr	r3, [pc, #624]	; (80042d4 <readGRAM+0x5ec>)
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	085b      	lsrs	r3, r3, #1
 8004066:	b2db      	uxtb	r3, r3
 8004068:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800406c:	b2da      	uxtb	r2, r3
 800406e:	4b9a      	ldr	r3, [pc, #616]	; (80042d8 <readGRAM+0x5f0>)
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	091b      	lsrs	r3, r3, #4
 8004074:	b2db      	uxtb	r3, r3
 8004076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800407a:	b2db      	uxtb	r3, r3
 800407c:	4313      	orrs	r3, r2
 800407e:	b2da      	uxtb	r2, r3
 8004080:	4b95      	ldr	r3, [pc, #596]	; (80042d8 <readGRAM+0x5f0>)
 8004082:	691b      	ldr	r3, [r3, #16]
 8004084:	b2db      	uxtb	r3, r3
 8004086:	005b      	lsls	r3, r3, #1
 8004088:	b2db      	uxtb	r3, r3
 800408a:	f003 0320 	and.w	r3, r3, #32
 800408e:	b2db      	uxtb	r3, r3
 8004090:	4313      	orrs	r3, r2
 8004092:	b2da      	uxtb	r2, r3
 8004094:	4b90      	ldr	r3, [pc, #576]	; (80042d8 <readGRAM+0x5f0>)
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	085b      	lsrs	r3, r3, #1
 800409a:	b2db      	uxtb	r3, r3
 800409c:	f003 0310 	and.w	r3, r3, #16
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	4313      	orrs	r3, r2
 80040a4:	b2da      	uxtb	r2, r3
 80040a6:	4b8c      	ldr	r3, [pc, #560]	; (80042d8 <readGRAM+0x5f0>)
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	f003 0308 	and.w	r3, r3, #8
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	4313      	orrs	r3, r2
 80040b4:	b2da      	uxtb	r2, r3
 80040b6:	4b87      	ldr	r3, [pc, #540]	; (80042d4 <readGRAM+0x5ec>)
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	0a1b      	lsrs	r3, r3, #8
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	f003 0304 	and.w	r3, r3, #4
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	4313      	orrs	r3, r2
 80040c6:	b2da      	uxtb	r2, r3
 80040c8:	4b84      	ldr	r3, [pc, #528]	; (80042dc <readGRAM+0x5f4>)
 80040ca:	691b      	ldr	r3, [r3, #16]
 80040cc:	099b      	lsrs	r3, r3, #6
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	f003 0302 	and.w	r3, r3, #2
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	4313      	orrs	r3, r2
 80040d8:	b2da      	uxtb	r2, r3
 80040da:	4b7e      	ldr	r3, [pc, #504]	; (80042d4 <readGRAM+0x5ec>)
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	0a5b      	lsrs	r3, r3, #9
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	4313      	orrs	r3, r2
 80040ea:	76fb      	strb	r3, [r7, #27]
 80040ec:	2101      	movs	r1, #1
 80040ee:	4879      	ldr	r0, [pc, #484]	; (80042d4 <readGRAM+0x5ec>)
 80040f0:	f7fe f880 	bl	80021f4 <PIN_HIGH>
 80040f4:	2101      	movs	r1, #1
 80040f6:	4877      	ldr	r0, [pc, #476]	; (80042d4 <readGRAM+0x5ec>)
 80040f8:	f7fe f87c 	bl	80021f4 <PIN_HIGH>
 80040fc:	2101      	movs	r1, #1
 80040fe:	4875      	ldr	r0, [pc, #468]	; (80042d4 <readGRAM+0x5ec>)
 8004100:	f7fe f878 	bl	80021f4 <PIN_HIGH>
 8004104:	2101      	movs	r1, #1
 8004106:	4873      	ldr	r0, [pc, #460]	; (80042d4 <readGRAM+0x5ec>)
 8004108:	f7fe f864 	bl	80021d4 <PIN_LOW>
 800410c:	2101      	movs	r1, #1
 800410e:	4871      	ldr	r0, [pc, #452]	; (80042d4 <readGRAM+0x5ec>)
 8004110:	f7fe f860 	bl	80021d4 <PIN_LOW>
 8004114:	2101      	movs	r1, #1
 8004116:	486f      	ldr	r0, [pc, #444]	; (80042d4 <readGRAM+0x5ec>)
 8004118:	f7fe f85c 	bl	80021d4 <PIN_LOW>
 800411c:	2101      	movs	r1, #1
 800411e:	486d      	ldr	r0, [pc, #436]	; (80042d4 <readGRAM+0x5ec>)
 8004120:	f7fe f858 	bl	80021d4 <PIN_LOW>
 8004124:	2101      	movs	r1, #1
 8004126:	486b      	ldr	r0, [pc, #428]	; (80042d4 <readGRAM+0x5ec>)
 8004128:	f7fe f854 	bl	80021d4 <PIN_LOW>
 800412c:	2101      	movs	r1, #1
 800412e:	4869      	ldr	r0, [pc, #420]	; (80042d4 <readGRAM+0x5ec>)
 8004130:	f7fe f850 	bl	80021d4 <PIN_LOW>
 8004134:	2101      	movs	r1, #1
 8004136:	4867      	ldr	r0, [pc, #412]	; (80042d4 <readGRAM+0x5ec>)
 8004138:	f7fe f84c 	bl	80021d4 <PIN_LOW>
 800413c:	4b65      	ldr	r3, [pc, #404]	; (80042d4 <readGRAM+0x5ec>)
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	085b      	lsrs	r3, r3, #1
 8004142:	b29b      	uxth	r3, r3
 8004144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004148:	b29a      	uxth	r2, r3
 800414a:	4b63      	ldr	r3, [pc, #396]	; (80042d8 <readGRAM+0x5f0>)
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	091b      	lsrs	r3, r3, #4
 8004150:	b29b      	uxth	r3, r3
 8004152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004156:	b29b      	uxth	r3, r3
 8004158:	4313      	orrs	r3, r2
 800415a:	b29a      	uxth	r2, r3
 800415c:	4b5e      	ldr	r3, [pc, #376]	; (80042d8 <readGRAM+0x5f0>)
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	b29b      	uxth	r3, r3
 8004162:	005b      	lsls	r3, r3, #1
 8004164:	b29b      	uxth	r3, r3
 8004166:	f003 0320 	and.w	r3, r3, #32
 800416a:	b29b      	uxth	r3, r3
 800416c:	4313      	orrs	r3, r2
 800416e:	b29a      	uxth	r2, r3
 8004170:	4b59      	ldr	r3, [pc, #356]	; (80042d8 <readGRAM+0x5f0>)
 8004172:	691b      	ldr	r3, [r3, #16]
 8004174:	085b      	lsrs	r3, r3, #1
 8004176:	b29b      	uxth	r3, r3
 8004178:	f003 0310 	and.w	r3, r3, #16
 800417c:	b29b      	uxth	r3, r3
 800417e:	4313      	orrs	r3, r2
 8004180:	b29a      	uxth	r2, r3
 8004182:	4b55      	ldr	r3, [pc, #340]	; (80042d8 <readGRAM+0x5f0>)
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	b29b      	uxth	r3, r3
 8004188:	f003 0308 	and.w	r3, r3, #8
 800418c:	b29b      	uxth	r3, r3
 800418e:	4313      	orrs	r3, r2
 8004190:	b29a      	uxth	r2, r3
 8004192:	4b50      	ldr	r3, [pc, #320]	; (80042d4 <readGRAM+0x5ec>)
 8004194:	691b      	ldr	r3, [r3, #16]
 8004196:	0a1b      	lsrs	r3, r3, #8
 8004198:	b29b      	uxth	r3, r3
 800419a:	f003 0304 	and.w	r3, r3, #4
 800419e:	b29b      	uxth	r3, r3
 80041a0:	4313      	orrs	r3, r2
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	4b4d      	ldr	r3, [pc, #308]	; (80042dc <readGRAM+0x5f4>)
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	099b      	lsrs	r3, r3, #6
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	f003 0302 	and.w	r3, r3, #2
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	4313      	orrs	r3, r2
 80041b4:	b29a      	uxth	r2, r3
 80041b6:	4b47      	ldr	r3, [pc, #284]	; (80042d4 <readGRAM+0x5ec>)
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	0a5b      	lsrs	r3, r3, #9
 80041bc:	b29b      	uxth	r3, r3
 80041be:	f003 0301 	and.w	r3, r3, #1
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	4313      	orrs	r3, r2
 80041c6:	833b      	strh	r3, [r7, #24]
 80041c8:	2101      	movs	r1, #1
 80041ca:	4842      	ldr	r0, [pc, #264]	; (80042d4 <readGRAM+0x5ec>)
 80041cc:	f7fe f812 	bl	80021f4 <PIN_HIGH>
 80041d0:	2101      	movs	r1, #1
 80041d2:	4840      	ldr	r0, [pc, #256]	; (80042d4 <readGRAM+0x5ec>)
 80041d4:	f7fe f80e 	bl	80021f4 <PIN_HIGH>
 80041d8:	7efb      	ldrb	r3, [r7, #27]
 80041da:	021b      	lsls	r3, r3, #8
 80041dc:	b21a      	sxth	r2, r3
 80041de:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	b21b      	sxth	r3, r3
 80041e6:	833b      	strh	r3, [r7, #24]
        }
		if (_lcd_ID == 0x1511) READ_8(r);   //extra dummy for R61511
 80041e8:	4b3d      	ldr	r3, [pc, #244]	; (80042e0 <readGRAM+0x5f8>)
 80041ea:	881b      	ldrh	r3, [r3, #0]
 80041ec:	f241 5211 	movw	r2, #5393	; 0x1511
 80041f0:	4293      	cmp	r3, r2
 80041f2:	f040 830f 	bne.w	8004814 <readGRAM+0xb2c>
 80041f6:	2101      	movs	r1, #1
 80041f8:	4836      	ldr	r0, [pc, #216]	; (80042d4 <readGRAM+0x5ec>)
 80041fa:	f7fd fffb 	bl	80021f4 <PIN_HIGH>
 80041fe:	2101      	movs	r1, #1
 8004200:	4834      	ldr	r0, [pc, #208]	; (80042d4 <readGRAM+0x5ec>)
 8004202:	f7fd ffe7 	bl	80021d4 <PIN_LOW>
 8004206:	2101      	movs	r1, #1
 8004208:	4832      	ldr	r0, [pc, #200]	; (80042d4 <readGRAM+0x5ec>)
 800420a:	f7fd ffe3 	bl	80021d4 <PIN_LOW>
 800420e:	2101      	movs	r1, #1
 8004210:	4830      	ldr	r0, [pc, #192]	; (80042d4 <readGRAM+0x5ec>)
 8004212:	f7fd ffdf 	bl	80021d4 <PIN_LOW>
 8004216:	2101      	movs	r1, #1
 8004218:	482e      	ldr	r0, [pc, #184]	; (80042d4 <readGRAM+0x5ec>)
 800421a:	f7fd ffdb 	bl	80021d4 <PIN_LOW>
 800421e:	2101      	movs	r1, #1
 8004220:	482c      	ldr	r0, [pc, #176]	; (80042d4 <readGRAM+0x5ec>)
 8004222:	f7fd ffd7 	bl	80021d4 <PIN_LOW>
 8004226:	2101      	movs	r1, #1
 8004228:	482a      	ldr	r0, [pc, #168]	; (80042d4 <readGRAM+0x5ec>)
 800422a:	f7fd ffd3 	bl	80021d4 <PIN_LOW>
 800422e:	2101      	movs	r1, #1
 8004230:	4828      	ldr	r0, [pc, #160]	; (80042d4 <readGRAM+0x5ec>)
 8004232:	f7fd ffcf 	bl	80021d4 <PIN_LOW>
 8004236:	4b27      	ldr	r3, [pc, #156]	; (80042d4 <readGRAM+0x5ec>)
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	085b      	lsrs	r3, r3, #1
 800423c:	b2db      	uxtb	r3, r3
 800423e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004242:	b2da      	uxtb	r2, r3
 8004244:	4b24      	ldr	r3, [pc, #144]	; (80042d8 <readGRAM+0x5f0>)
 8004246:	691b      	ldr	r3, [r3, #16]
 8004248:	091b      	lsrs	r3, r3, #4
 800424a:	b2db      	uxtb	r3, r3
 800424c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004250:	b2db      	uxtb	r3, r3
 8004252:	4313      	orrs	r3, r2
 8004254:	b2da      	uxtb	r2, r3
 8004256:	4b20      	ldr	r3, [pc, #128]	; (80042d8 <readGRAM+0x5f0>)
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	b2db      	uxtb	r3, r3
 800425c:	005b      	lsls	r3, r3, #1
 800425e:	b2db      	uxtb	r3, r3
 8004260:	f003 0320 	and.w	r3, r3, #32
 8004264:	b2db      	uxtb	r3, r3
 8004266:	4313      	orrs	r3, r2
 8004268:	b2da      	uxtb	r2, r3
 800426a:	4b1b      	ldr	r3, [pc, #108]	; (80042d8 <readGRAM+0x5f0>)
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	085b      	lsrs	r3, r3, #1
 8004270:	b2db      	uxtb	r3, r3
 8004272:	f003 0310 	and.w	r3, r3, #16
 8004276:	b2db      	uxtb	r3, r3
 8004278:	4313      	orrs	r3, r2
 800427a:	b2da      	uxtb	r2, r3
 800427c:	4b16      	ldr	r3, [pc, #88]	; (80042d8 <readGRAM+0x5f0>)
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	b2db      	uxtb	r3, r3
 8004282:	f003 0308 	and.w	r3, r3, #8
 8004286:	b2db      	uxtb	r3, r3
 8004288:	4313      	orrs	r3, r2
 800428a:	b2da      	uxtb	r2, r3
 800428c:	4b11      	ldr	r3, [pc, #68]	; (80042d4 <readGRAM+0x5ec>)
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	0a1b      	lsrs	r3, r3, #8
 8004292:	b2db      	uxtb	r3, r3
 8004294:	f003 0304 	and.w	r3, r3, #4
 8004298:	b2db      	uxtb	r3, r3
 800429a:	4313      	orrs	r3, r2
 800429c:	b2da      	uxtb	r2, r3
 800429e:	4b0f      	ldr	r3, [pc, #60]	; (80042dc <readGRAM+0x5f4>)
 80042a0:	691b      	ldr	r3, [r3, #16]
 80042a2:	099b      	lsrs	r3, r3, #6
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	f003 0302 	and.w	r3, r3, #2
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	4313      	orrs	r3, r2
 80042ae:	b2da      	uxtb	r2, r3
 80042b0:	4b08      	ldr	r3, [pc, #32]	; (80042d4 <readGRAM+0x5ec>)
 80042b2:	691b      	ldr	r3, [r3, #16]
 80042b4:	0a5b      	lsrs	r3, r3, #9
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	f003 0301 	and.w	r3, r3, #1
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	4313      	orrs	r3, r2
 80042c0:	75fb      	strb	r3, [r7, #23]
 80042c2:	2101      	movs	r1, #1
 80042c4:	4803      	ldr	r0, [pc, #12]	; (80042d4 <readGRAM+0x5ec>)
 80042c6:	f7fd ff95 	bl	80021f4 <PIN_HIGH>
 80042ca:	2101      	movs	r1, #1
 80042cc:	4801      	ldr	r0, [pc, #4]	; (80042d4 <readGRAM+0x5ec>)
 80042ce:	f7fd ff91 	bl	80021f4 <PIN_HIGH>
        while (n)
 80042d2:	e29f      	b.n	8004814 <readGRAM+0xb2c>
 80042d4:	40020000 	.word	0x40020000
 80042d8:	40020400 	.word	0x40020400
 80042dc:	40020800 	.word	0x40020800
 80042e0:	200003ce 	.word	0x200003ce
        {
            if (_lcd_capable & READ_24BITS)
 80042e4:	4bab      	ldr	r3, [pc, #684]	; (8004594 <readGRAM+0x8ac>)
 80042e6:	881b      	ldrh	r3, [r3, #0]
 80042e8:	f003 0310 	and.w	r3, r3, #16
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	f000 816b 	beq.w	80045c8 <readGRAM+0x8e0>
            {
                READ_8(r);
 80042f2:	2101      	movs	r1, #1
 80042f4:	48a8      	ldr	r0, [pc, #672]	; (8004598 <readGRAM+0x8b0>)
 80042f6:	f7fd ff7d 	bl	80021f4 <PIN_HIGH>
 80042fa:	2101      	movs	r1, #1
 80042fc:	48a6      	ldr	r0, [pc, #664]	; (8004598 <readGRAM+0x8b0>)
 80042fe:	f7fd ff69 	bl	80021d4 <PIN_LOW>
 8004302:	2101      	movs	r1, #1
 8004304:	48a4      	ldr	r0, [pc, #656]	; (8004598 <readGRAM+0x8b0>)
 8004306:	f7fd ff65 	bl	80021d4 <PIN_LOW>
 800430a:	2101      	movs	r1, #1
 800430c:	48a2      	ldr	r0, [pc, #648]	; (8004598 <readGRAM+0x8b0>)
 800430e:	f7fd ff61 	bl	80021d4 <PIN_LOW>
 8004312:	2101      	movs	r1, #1
 8004314:	48a0      	ldr	r0, [pc, #640]	; (8004598 <readGRAM+0x8b0>)
 8004316:	f7fd ff5d 	bl	80021d4 <PIN_LOW>
 800431a:	2101      	movs	r1, #1
 800431c:	489e      	ldr	r0, [pc, #632]	; (8004598 <readGRAM+0x8b0>)
 800431e:	f7fd ff59 	bl	80021d4 <PIN_LOW>
 8004322:	2101      	movs	r1, #1
 8004324:	489c      	ldr	r0, [pc, #624]	; (8004598 <readGRAM+0x8b0>)
 8004326:	f7fd ff55 	bl	80021d4 <PIN_LOW>
 800432a:	2101      	movs	r1, #1
 800432c:	489a      	ldr	r0, [pc, #616]	; (8004598 <readGRAM+0x8b0>)
 800432e:	f7fd ff51 	bl	80021d4 <PIN_LOW>
 8004332:	4b99      	ldr	r3, [pc, #612]	; (8004598 <readGRAM+0x8b0>)
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	085b      	lsrs	r3, r3, #1
 8004338:	b2db      	uxtb	r3, r3
 800433a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800433e:	b2da      	uxtb	r2, r3
 8004340:	4b96      	ldr	r3, [pc, #600]	; (800459c <readGRAM+0x8b4>)
 8004342:	691b      	ldr	r3, [r3, #16]
 8004344:	091b      	lsrs	r3, r3, #4
 8004346:	b2db      	uxtb	r3, r3
 8004348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800434c:	b2db      	uxtb	r3, r3
 800434e:	4313      	orrs	r3, r2
 8004350:	b2da      	uxtb	r2, r3
 8004352:	4b92      	ldr	r3, [pc, #584]	; (800459c <readGRAM+0x8b4>)
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	b2db      	uxtb	r3, r3
 8004358:	005b      	lsls	r3, r3, #1
 800435a:	b2db      	uxtb	r3, r3
 800435c:	f003 0320 	and.w	r3, r3, #32
 8004360:	b2db      	uxtb	r3, r3
 8004362:	4313      	orrs	r3, r2
 8004364:	b2da      	uxtb	r2, r3
 8004366:	4b8d      	ldr	r3, [pc, #564]	; (800459c <readGRAM+0x8b4>)
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	085b      	lsrs	r3, r3, #1
 800436c:	b2db      	uxtb	r3, r3
 800436e:	f003 0310 	and.w	r3, r3, #16
 8004372:	b2db      	uxtb	r3, r3
 8004374:	4313      	orrs	r3, r2
 8004376:	b2da      	uxtb	r2, r3
 8004378:	4b88      	ldr	r3, [pc, #544]	; (800459c <readGRAM+0x8b4>)
 800437a:	691b      	ldr	r3, [r3, #16]
 800437c:	b2db      	uxtb	r3, r3
 800437e:	f003 0308 	and.w	r3, r3, #8
 8004382:	b2db      	uxtb	r3, r3
 8004384:	4313      	orrs	r3, r2
 8004386:	b2da      	uxtb	r2, r3
 8004388:	4b83      	ldr	r3, [pc, #524]	; (8004598 <readGRAM+0x8b0>)
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	0a1b      	lsrs	r3, r3, #8
 800438e:	b2db      	uxtb	r3, r3
 8004390:	f003 0304 	and.w	r3, r3, #4
 8004394:	b2db      	uxtb	r3, r3
 8004396:	4313      	orrs	r3, r2
 8004398:	b2da      	uxtb	r2, r3
 800439a:	4b81      	ldr	r3, [pc, #516]	; (80045a0 <readGRAM+0x8b8>)
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	099b      	lsrs	r3, r3, #6
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	f003 0302 	and.w	r3, r3, #2
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	4313      	orrs	r3, r2
 80043aa:	b2da      	uxtb	r2, r3
 80043ac:	4b7a      	ldr	r3, [pc, #488]	; (8004598 <readGRAM+0x8b0>)
 80043ae:	691b      	ldr	r3, [r3, #16]
 80043b0:	0a5b      	lsrs	r3, r3, #9
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	f003 0301 	and.w	r3, r3, #1
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	4313      	orrs	r3, r2
 80043bc:	75fb      	strb	r3, [r7, #23]
 80043be:	2101      	movs	r1, #1
 80043c0:	4875      	ldr	r0, [pc, #468]	; (8004598 <readGRAM+0x8b0>)
 80043c2:	f7fd ff17 	bl	80021f4 <PIN_HIGH>
 80043c6:	2101      	movs	r1, #1
 80043c8:	4873      	ldr	r0, [pc, #460]	; (8004598 <readGRAM+0x8b0>)
 80043ca:	f7fd ff13 	bl	80021f4 <PIN_HIGH>
                READ_8(g);
 80043ce:	2101      	movs	r1, #1
 80043d0:	4871      	ldr	r0, [pc, #452]	; (8004598 <readGRAM+0x8b0>)
 80043d2:	f7fd ff0f 	bl	80021f4 <PIN_HIGH>
 80043d6:	2101      	movs	r1, #1
 80043d8:	486f      	ldr	r0, [pc, #444]	; (8004598 <readGRAM+0x8b0>)
 80043da:	f7fd fefb 	bl	80021d4 <PIN_LOW>
 80043de:	2101      	movs	r1, #1
 80043e0:	486d      	ldr	r0, [pc, #436]	; (8004598 <readGRAM+0x8b0>)
 80043e2:	f7fd fef7 	bl	80021d4 <PIN_LOW>
 80043e6:	2101      	movs	r1, #1
 80043e8:	486b      	ldr	r0, [pc, #428]	; (8004598 <readGRAM+0x8b0>)
 80043ea:	f7fd fef3 	bl	80021d4 <PIN_LOW>
 80043ee:	2101      	movs	r1, #1
 80043f0:	4869      	ldr	r0, [pc, #420]	; (8004598 <readGRAM+0x8b0>)
 80043f2:	f7fd feef 	bl	80021d4 <PIN_LOW>
 80043f6:	2101      	movs	r1, #1
 80043f8:	4867      	ldr	r0, [pc, #412]	; (8004598 <readGRAM+0x8b0>)
 80043fa:	f7fd feeb 	bl	80021d4 <PIN_LOW>
 80043fe:	2101      	movs	r1, #1
 8004400:	4865      	ldr	r0, [pc, #404]	; (8004598 <readGRAM+0x8b0>)
 8004402:	f7fd fee7 	bl	80021d4 <PIN_LOW>
 8004406:	2101      	movs	r1, #1
 8004408:	4863      	ldr	r0, [pc, #396]	; (8004598 <readGRAM+0x8b0>)
 800440a:	f7fd fee3 	bl	80021d4 <PIN_LOW>
 800440e:	4b62      	ldr	r3, [pc, #392]	; (8004598 <readGRAM+0x8b0>)
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	085b      	lsrs	r3, r3, #1
 8004414:	b2db      	uxtb	r3, r3
 8004416:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800441a:	b2da      	uxtb	r2, r3
 800441c:	4b5f      	ldr	r3, [pc, #380]	; (800459c <readGRAM+0x8b4>)
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	091b      	lsrs	r3, r3, #4
 8004422:	b2db      	uxtb	r3, r3
 8004424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004428:	b2db      	uxtb	r3, r3
 800442a:	4313      	orrs	r3, r2
 800442c:	b2da      	uxtb	r2, r3
 800442e:	4b5b      	ldr	r3, [pc, #364]	; (800459c <readGRAM+0x8b4>)
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	b2db      	uxtb	r3, r3
 8004434:	005b      	lsls	r3, r3, #1
 8004436:	b2db      	uxtb	r3, r3
 8004438:	f003 0320 	and.w	r3, r3, #32
 800443c:	b2db      	uxtb	r3, r3
 800443e:	4313      	orrs	r3, r2
 8004440:	b2da      	uxtb	r2, r3
 8004442:	4b56      	ldr	r3, [pc, #344]	; (800459c <readGRAM+0x8b4>)
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	085b      	lsrs	r3, r3, #1
 8004448:	b2db      	uxtb	r3, r3
 800444a:	f003 0310 	and.w	r3, r3, #16
 800444e:	b2db      	uxtb	r3, r3
 8004450:	4313      	orrs	r3, r2
 8004452:	b2da      	uxtb	r2, r3
 8004454:	4b51      	ldr	r3, [pc, #324]	; (800459c <readGRAM+0x8b4>)
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	b2db      	uxtb	r3, r3
 800445a:	f003 0308 	and.w	r3, r3, #8
 800445e:	b2db      	uxtb	r3, r3
 8004460:	4313      	orrs	r3, r2
 8004462:	b2da      	uxtb	r2, r3
 8004464:	4b4c      	ldr	r3, [pc, #304]	; (8004598 <readGRAM+0x8b0>)
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	0a1b      	lsrs	r3, r3, #8
 800446a:	b2db      	uxtb	r3, r3
 800446c:	f003 0304 	and.w	r3, r3, #4
 8004470:	b2db      	uxtb	r3, r3
 8004472:	4313      	orrs	r3, r2
 8004474:	b2da      	uxtb	r2, r3
 8004476:	4b4a      	ldr	r3, [pc, #296]	; (80045a0 <readGRAM+0x8b8>)
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	099b      	lsrs	r3, r3, #6
 800447c:	b2db      	uxtb	r3, r3
 800447e:	f003 0302 	and.w	r3, r3, #2
 8004482:	b2db      	uxtb	r3, r3
 8004484:	4313      	orrs	r3, r2
 8004486:	b2da      	uxtb	r2, r3
 8004488:	4b43      	ldr	r3, [pc, #268]	; (8004598 <readGRAM+0x8b0>)
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	0a5b      	lsrs	r3, r3, #9
 800448e:	b2db      	uxtb	r3, r3
 8004490:	f003 0301 	and.w	r3, r3, #1
 8004494:	b2db      	uxtb	r3, r3
 8004496:	4313      	orrs	r3, r2
 8004498:	757b      	strb	r3, [r7, #21]
 800449a:	2101      	movs	r1, #1
 800449c:	483e      	ldr	r0, [pc, #248]	; (8004598 <readGRAM+0x8b0>)
 800449e:	f7fd fea9 	bl	80021f4 <PIN_HIGH>
 80044a2:	2101      	movs	r1, #1
 80044a4:	483c      	ldr	r0, [pc, #240]	; (8004598 <readGRAM+0x8b0>)
 80044a6:	f7fd fea5 	bl	80021f4 <PIN_HIGH>
                READ_8(b);
 80044aa:	2101      	movs	r1, #1
 80044ac:	483a      	ldr	r0, [pc, #232]	; (8004598 <readGRAM+0x8b0>)
 80044ae:	f7fd fea1 	bl	80021f4 <PIN_HIGH>
 80044b2:	2101      	movs	r1, #1
 80044b4:	4838      	ldr	r0, [pc, #224]	; (8004598 <readGRAM+0x8b0>)
 80044b6:	f7fd fe8d 	bl	80021d4 <PIN_LOW>
 80044ba:	2101      	movs	r1, #1
 80044bc:	4836      	ldr	r0, [pc, #216]	; (8004598 <readGRAM+0x8b0>)
 80044be:	f7fd fe89 	bl	80021d4 <PIN_LOW>
 80044c2:	2101      	movs	r1, #1
 80044c4:	4834      	ldr	r0, [pc, #208]	; (8004598 <readGRAM+0x8b0>)
 80044c6:	f7fd fe85 	bl	80021d4 <PIN_LOW>
 80044ca:	2101      	movs	r1, #1
 80044cc:	4832      	ldr	r0, [pc, #200]	; (8004598 <readGRAM+0x8b0>)
 80044ce:	f7fd fe81 	bl	80021d4 <PIN_LOW>
 80044d2:	2101      	movs	r1, #1
 80044d4:	4830      	ldr	r0, [pc, #192]	; (8004598 <readGRAM+0x8b0>)
 80044d6:	f7fd fe7d 	bl	80021d4 <PIN_LOW>
 80044da:	2101      	movs	r1, #1
 80044dc:	482e      	ldr	r0, [pc, #184]	; (8004598 <readGRAM+0x8b0>)
 80044de:	f7fd fe79 	bl	80021d4 <PIN_LOW>
 80044e2:	2101      	movs	r1, #1
 80044e4:	482c      	ldr	r0, [pc, #176]	; (8004598 <readGRAM+0x8b0>)
 80044e6:	f7fd fe75 	bl	80021d4 <PIN_LOW>
 80044ea:	4b2b      	ldr	r3, [pc, #172]	; (8004598 <readGRAM+0x8b0>)
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	085b      	lsrs	r3, r3, #1
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80044f6:	b2da      	uxtb	r2, r3
 80044f8:	4b28      	ldr	r3, [pc, #160]	; (800459c <readGRAM+0x8b4>)
 80044fa:	691b      	ldr	r3, [r3, #16]
 80044fc:	091b      	lsrs	r3, r3, #4
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004504:	b2db      	uxtb	r3, r3
 8004506:	4313      	orrs	r3, r2
 8004508:	b2da      	uxtb	r2, r3
 800450a:	4b24      	ldr	r3, [pc, #144]	; (800459c <readGRAM+0x8b4>)
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	b2db      	uxtb	r3, r3
 8004510:	005b      	lsls	r3, r3, #1
 8004512:	b2db      	uxtb	r3, r3
 8004514:	f003 0320 	and.w	r3, r3, #32
 8004518:	b2db      	uxtb	r3, r3
 800451a:	4313      	orrs	r3, r2
 800451c:	b2da      	uxtb	r2, r3
 800451e:	4b1f      	ldr	r3, [pc, #124]	; (800459c <readGRAM+0x8b4>)
 8004520:	691b      	ldr	r3, [r3, #16]
 8004522:	085b      	lsrs	r3, r3, #1
 8004524:	b2db      	uxtb	r3, r3
 8004526:	f003 0310 	and.w	r3, r3, #16
 800452a:	b2db      	uxtb	r3, r3
 800452c:	4313      	orrs	r3, r2
 800452e:	b2da      	uxtb	r2, r3
 8004530:	4b1a      	ldr	r3, [pc, #104]	; (800459c <readGRAM+0x8b4>)
 8004532:	691b      	ldr	r3, [r3, #16]
 8004534:	b2db      	uxtb	r3, r3
 8004536:	f003 0308 	and.w	r3, r3, #8
 800453a:	b2db      	uxtb	r3, r3
 800453c:	4313      	orrs	r3, r2
 800453e:	b2da      	uxtb	r2, r3
 8004540:	4b15      	ldr	r3, [pc, #84]	; (8004598 <readGRAM+0x8b0>)
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	0a1b      	lsrs	r3, r3, #8
 8004546:	b2db      	uxtb	r3, r3
 8004548:	f003 0304 	and.w	r3, r3, #4
 800454c:	b2db      	uxtb	r3, r3
 800454e:	4313      	orrs	r3, r2
 8004550:	b2da      	uxtb	r2, r3
 8004552:	4b13      	ldr	r3, [pc, #76]	; (80045a0 <readGRAM+0x8b8>)
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	099b      	lsrs	r3, r3, #6
 8004558:	b2db      	uxtb	r3, r3
 800455a:	f003 0302 	and.w	r3, r3, #2
 800455e:	b2db      	uxtb	r3, r3
 8004560:	4313      	orrs	r3, r2
 8004562:	b2da      	uxtb	r2, r3
 8004564:	4b0c      	ldr	r3, [pc, #48]	; (8004598 <readGRAM+0x8b0>)
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	0a5b      	lsrs	r3, r3, #9
 800456a:	b2db      	uxtb	r3, r3
 800456c:	f003 0301 	and.w	r3, r3, #1
 8004570:	b2db      	uxtb	r3, r3
 8004572:	4313      	orrs	r3, r2
 8004574:	753b      	strb	r3, [r7, #20]
 8004576:	2101      	movs	r1, #1
 8004578:	4807      	ldr	r0, [pc, #28]	; (8004598 <readGRAM+0x8b0>)
 800457a:	f7fd fe3b 	bl	80021f4 <PIN_HIGH>
 800457e:	2101      	movs	r1, #1
 8004580:	4805      	ldr	r0, [pc, #20]	; (8004598 <readGRAM+0x8b0>)
 8004582:	f7fd fe37 	bl	80021f4 <PIN_HIGH>
                if (_lcd_capable & READ_BGR)
 8004586:	4b03      	ldr	r3, [pc, #12]	; (8004594 <readGRAM+0x8ac>)
 8004588:	881b      	ldrh	r3, [r3, #0]
 800458a:	f003 0304 	and.w	r3, r3, #4
 800458e:	2b00      	cmp	r3, #0
 8004590:	d011      	beq.n	80045b6 <readGRAM+0x8ce>
 8004592:	e007      	b.n	80045a4 <readGRAM+0x8bc>
 8004594:	200003c0 	.word	0x200003c0
 8004598:	40020000 	.word	0x40020000
 800459c:	40020400 	.word	0x40020400
 80045a0:	40020800 	.word	0x40020800
                    ret = color565(b, g, r);
 80045a4:	7dfa      	ldrb	r2, [r7, #23]
 80045a6:	7d79      	ldrb	r1, [r7, #21]
 80045a8:	7d3b      	ldrb	r3, [r7, #20]
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7fd fee9 	bl	8002382 <color565>
 80045b0:	4603      	mov	r3, r0
 80045b2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80045b4:	e113      	b.n	80047de <readGRAM+0xaf6>
                else
                    ret = color565(r, g, b);
 80045b6:	7d3a      	ldrb	r2, [r7, #20]
 80045b8:	7d79      	ldrb	r1, [r7, #21]
 80045ba:	7dfb      	ldrb	r3, [r7, #23]
 80045bc:	4618      	mov	r0, r3
 80045be:	f7fd fee0 	bl	8002382 <color565>
 80045c2:	4603      	mov	r3, r0
 80045c4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80045c6:	e10a      	b.n	80047de <readGRAM+0xaf6>
            } else
            {
                READ_16(ret);
 80045c8:	2101      	movs	r1, #1
 80045ca:	4895      	ldr	r0, [pc, #596]	; (8004820 <readGRAM+0xb38>)
 80045cc:	f7fd fe12 	bl	80021f4 <PIN_HIGH>
 80045d0:	2101      	movs	r1, #1
 80045d2:	4893      	ldr	r0, [pc, #588]	; (8004820 <readGRAM+0xb38>)
 80045d4:	f7fd fdfe 	bl	80021d4 <PIN_LOW>
 80045d8:	2101      	movs	r1, #1
 80045da:	4891      	ldr	r0, [pc, #580]	; (8004820 <readGRAM+0xb38>)
 80045dc:	f7fd fdfa 	bl	80021d4 <PIN_LOW>
 80045e0:	2101      	movs	r1, #1
 80045e2:	488f      	ldr	r0, [pc, #572]	; (8004820 <readGRAM+0xb38>)
 80045e4:	f7fd fdf6 	bl	80021d4 <PIN_LOW>
 80045e8:	2101      	movs	r1, #1
 80045ea:	488d      	ldr	r0, [pc, #564]	; (8004820 <readGRAM+0xb38>)
 80045ec:	f7fd fdf2 	bl	80021d4 <PIN_LOW>
 80045f0:	2101      	movs	r1, #1
 80045f2:	488b      	ldr	r0, [pc, #556]	; (8004820 <readGRAM+0xb38>)
 80045f4:	f7fd fdee 	bl	80021d4 <PIN_LOW>
 80045f8:	2101      	movs	r1, #1
 80045fa:	4889      	ldr	r0, [pc, #548]	; (8004820 <readGRAM+0xb38>)
 80045fc:	f7fd fdea 	bl	80021d4 <PIN_LOW>
 8004600:	2101      	movs	r1, #1
 8004602:	4887      	ldr	r0, [pc, #540]	; (8004820 <readGRAM+0xb38>)
 8004604:	f7fd fde6 	bl	80021d4 <PIN_LOW>
 8004608:	4b85      	ldr	r3, [pc, #532]	; (8004820 <readGRAM+0xb38>)
 800460a:	691b      	ldr	r3, [r3, #16]
 800460c:	085b      	lsrs	r3, r3, #1
 800460e:	b2db      	uxtb	r3, r3
 8004610:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004614:	b2da      	uxtb	r2, r3
 8004616:	4b83      	ldr	r3, [pc, #524]	; (8004824 <readGRAM+0xb3c>)
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	091b      	lsrs	r3, r3, #4
 800461c:	b2db      	uxtb	r3, r3
 800461e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004622:	b2db      	uxtb	r3, r3
 8004624:	4313      	orrs	r3, r2
 8004626:	b2da      	uxtb	r2, r3
 8004628:	4b7e      	ldr	r3, [pc, #504]	; (8004824 <readGRAM+0xb3c>)
 800462a:	691b      	ldr	r3, [r3, #16]
 800462c:	b2db      	uxtb	r3, r3
 800462e:	005b      	lsls	r3, r3, #1
 8004630:	b2db      	uxtb	r3, r3
 8004632:	f003 0320 	and.w	r3, r3, #32
 8004636:	b2db      	uxtb	r3, r3
 8004638:	4313      	orrs	r3, r2
 800463a:	b2da      	uxtb	r2, r3
 800463c:	4b79      	ldr	r3, [pc, #484]	; (8004824 <readGRAM+0xb3c>)
 800463e:	691b      	ldr	r3, [r3, #16]
 8004640:	085b      	lsrs	r3, r3, #1
 8004642:	b2db      	uxtb	r3, r3
 8004644:	f003 0310 	and.w	r3, r3, #16
 8004648:	b2db      	uxtb	r3, r3
 800464a:	4313      	orrs	r3, r2
 800464c:	b2da      	uxtb	r2, r3
 800464e:	4b75      	ldr	r3, [pc, #468]	; (8004824 <readGRAM+0xb3c>)
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	b2db      	uxtb	r3, r3
 8004654:	f003 0308 	and.w	r3, r3, #8
 8004658:	b2db      	uxtb	r3, r3
 800465a:	4313      	orrs	r3, r2
 800465c:	b2da      	uxtb	r2, r3
 800465e:	4b70      	ldr	r3, [pc, #448]	; (8004820 <readGRAM+0xb38>)
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	0a1b      	lsrs	r3, r3, #8
 8004664:	b2db      	uxtb	r3, r3
 8004666:	f003 0304 	and.w	r3, r3, #4
 800466a:	b2db      	uxtb	r3, r3
 800466c:	4313      	orrs	r3, r2
 800466e:	b2da      	uxtb	r2, r3
 8004670:	4b6d      	ldr	r3, [pc, #436]	; (8004828 <readGRAM+0xb40>)
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	099b      	lsrs	r3, r3, #6
 8004676:	b2db      	uxtb	r3, r3
 8004678:	f003 0302 	and.w	r3, r3, #2
 800467c:	b2db      	uxtb	r3, r3
 800467e:	4313      	orrs	r3, r2
 8004680:	b2da      	uxtb	r2, r3
 8004682:	4b67      	ldr	r3, [pc, #412]	; (8004820 <readGRAM+0xb38>)
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	0a5b      	lsrs	r3, r3, #9
 8004688:	b2db      	uxtb	r3, r3
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	b2db      	uxtb	r3, r3
 8004690:	4313      	orrs	r3, r2
 8004692:	75bb      	strb	r3, [r7, #22]
 8004694:	2101      	movs	r1, #1
 8004696:	4862      	ldr	r0, [pc, #392]	; (8004820 <readGRAM+0xb38>)
 8004698:	f7fd fdac 	bl	80021f4 <PIN_HIGH>
 800469c:	2101      	movs	r1, #1
 800469e:	4860      	ldr	r0, [pc, #384]	; (8004820 <readGRAM+0xb38>)
 80046a0:	f7fd fda8 	bl	80021f4 <PIN_HIGH>
 80046a4:	2101      	movs	r1, #1
 80046a6:	485e      	ldr	r0, [pc, #376]	; (8004820 <readGRAM+0xb38>)
 80046a8:	f7fd fda4 	bl	80021f4 <PIN_HIGH>
 80046ac:	2101      	movs	r1, #1
 80046ae:	485c      	ldr	r0, [pc, #368]	; (8004820 <readGRAM+0xb38>)
 80046b0:	f7fd fd90 	bl	80021d4 <PIN_LOW>
 80046b4:	2101      	movs	r1, #1
 80046b6:	485a      	ldr	r0, [pc, #360]	; (8004820 <readGRAM+0xb38>)
 80046b8:	f7fd fd8c 	bl	80021d4 <PIN_LOW>
 80046bc:	2101      	movs	r1, #1
 80046be:	4858      	ldr	r0, [pc, #352]	; (8004820 <readGRAM+0xb38>)
 80046c0:	f7fd fd88 	bl	80021d4 <PIN_LOW>
 80046c4:	2101      	movs	r1, #1
 80046c6:	4856      	ldr	r0, [pc, #344]	; (8004820 <readGRAM+0xb38>)
 80046c8:	f7fd fd84 	bl	80021d4 <PIN_LOW>
 80046cc:	2101      	movs	r1, #1
 80046ce:	4854      	ldr	r0, [pc, #336]	; (8004820 <readGRAM+0xb38>)
 80046d0:	f7fd fd80 	bl	80021d4 <PIN_LOW>
 80046d4:	2101      	movs	r1, #1
 80046d6:	4852      	ldr	r0, [pc, #328]	; (8004820 <readGRAM+0xb38>)
 80046d8:	f7fd fd7c 	bl	80021d4 <PIN_LOW>
 80046dc:	2101      	movs	r1, #1
 80046de:	4850      	ldr	r0, [pc, #320]	; (8004820 <readGRAM+0xb38>)
 80046e0:	f7fd fd78 	bl	80021d4 <PIN_LOW>
 80046e4:	4b4e      	ldr	r3, [pc, #312]	; (8004820 <readGRAM+0xb38>)
 80046e6:	691b      	ldr	r3, [r3, #16]
 80046e8:	085b      	lsrs	r3, r3, #1
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046f0:	b29a      	uxth	r2, r3
 80046f2:	4b4c      	ldr	r3, [pc, #304]	; (8004824 <readGRAM+0xb3c>)
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	091b      	lsrs	r3, r3, #4
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046fe:	b29b      	uxth	r3, r3
 8004700:	4313      	orrs	r3, r2
 8004702:	b29a      	uxth	r2, r3
 8004704:	4b47      	ldr	r3, [pc, #284]	; (8004824 <readGRAM+0xb3c>)
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	b29b      	uxth	r3, r3
 800470a:	005b      	lsls	r3, r3, #1
 800470c:	b29b      	uxth	r3, r3
 800470e:	f003 0320 	and.w	r3, r3, #32
 8004712:	b29b      	uxth	r3, r3
 8004714:	4313      	orrs	r3, r2
 8004716:	b29a      	uxth	r2, r3
 8004718:	4b42      	ldr	r3, [pc, #264]	; (8004824 <readGRAM+0xb3c>)
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	085b      	lsrs	r3, r3, #1
 800471e:	b29b      	uxth	r3, r3
 8004720:	f003 0310 	and.w	r3, r3, #16
 8004724:	b29b      	uxth	r3, r3
 8004726:	4313      	orrs	r3, r2
 8004728:	b29a      	uxth	r2, r3
 800472a:	4b3e      	ldr	r3, [pc, #248]	; (8004824 <readGRAM+0xb3c>)
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	b29b      	uxth	r3, r3
 8004730:	f003 0308 	and.w	r3, r3, #8
 8004734:	b29b      	uxth	r3, r3
 8004736:	4313      	orrs	r3, r2
 8004738:	b29a      	uxth	r2, r3
 800473a:	4b39      	ldr	r3, [pc, #228]	; (8004820 <readGRAM+0xb38>)
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	0a1b      	lsrs	r3, r3, #8
 8004740:	b29b      	uxth	r3, r3
 8004742:	f003 0304 	and.w	r3, r3, #4
 8004746:	b29b      	uxth	r3, r3
 8004748:	4313      	orrs	r3, r2
 800474a:	b29a      	uxth	r2, r3
 800474c:	4b36      	ldr	r3, [pc, #216]	; (8004828 <readGRAM+0xb40>)
 800474e:	691b      	ldr	r3, [r3, #16]
 8004750:	099b      	lsrs	r3, r3, #6
 8004752:	b29b      	uxth	r3, r3
 8004754:	f003 0302 	and.w	r3, r3, #2
 8004758:	b29b      	uxth	r3, r3
 800475a:	4313      	orrs	r3, r2
 800475c:	b29a      	uxth	r2, r3
 800475e:	4b30      	ldr	r3, [pc, #192]	; (8004820 <readGRAM+0xb38>)
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	0a5b      	lsrs	r3, r3, #9
 8004764:	b29b      	uxth	r3, r3
 8004766:	f003 0301 	and.w	r3, r3, #1
 800476a:	b29b      	uxth	r3, r3
 800476c:	4313      	orrs	r3, r2
 800476e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004770:	2101      	movs	r1, #1
 8004772:	482b      	ldr	r0, [pc, #172]	; (8004820 <readGRAM+0xb38>)
 8004774:	f7fd fd3e 	bl	80021f4 <PIN_HIGH>
 8004778:	2101      	movs	r1, #1
 800477a:	4829      	ldr	r0, [pc, #164]	; (8004820 <readGRAM+0xb38>)
 800477c:	f7fd fd3a 	bl	80021f4 <PIN_HIGH>
 8004780:	7dbb      	ldrb	r3, [r7, #22]
 8004782:	021b      	lsls	r3, r3, #8
 8004784:	b21a      	sxth	r2, r3
 8004786:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800478a:	4313      	orrs	r3, r2
 800478c:	b21b      	sxth	r3, r3
 800478e:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (_lcd_capable & READ_LOWHIGH)
 8004790:	4b26      	ldr	r3, [pc, #152]	; (800482c <readGRAM+0xb44>)
 8004792:	881b      	ldrh	r3, [r3, #0]
 8004794:	f003 0308 	and.w	r3, r3, #8
 8004798:	2b00      	cmp	r3, #0
 800479a:	d009      	beq.n	80047b0 <readGRAM+0xac8>
                    ret = (ret >> 8) | (ret << 8);
 800479c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800479e:	0a1b      	lsrs	r3, r3, #8
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	b21a      	sxth	r2, r3
 80047a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80047a6:	021b      	lsls	r3, r3, #8
 80047a8:	b21b      	sxth	r3, r3
 80047aa:	4313      	orrs	r3, r2
 80047ac:	b21b      	sxth	r3, r3
 80047ae:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (_lcd_capable & READ_BGR)
 80047b0:	4b1e      	ldr	r3, [pc, #120]	; (800482c <readGRAM+0xb44>)
 80047b2:	881b      	ldrh	r3, [r3, #0]
 80047b4:	f003 0304 	and.w	r3, r3, #4
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d010      	beq.n	80047de <readGRAM+0xaf6>
                    ret = (ret & 0x07E0) | (ret >> 11) | (ret << 11);
 80047bc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80047c0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80047c4:	b21a      	sxth	r2, r3
 80047c6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80047c8:	0adb      	lsrs	r3, r3, #11
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	b21b      	sxth	r3, r3
 80047ce:	4313      	orrs	r3, r2
 80047d0:	b21a      	sxth	r2, r3
 80047d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80047d4:	02db      	lsls	r3, r3, #11
 80047d6:	b21b      	sxth	r3, r3
 80047d8:	4313      	orrs	r3, r2
 80047da:	b21b      	sxth	r3, r3
 80047dc:	84fb      	strh	r3, [r7, #38]	; 0x26
            }
#if defined(SUPPORT_9488_555)
    if (is555) ret = color555_to_565(ret);
 80047de:	4b14      	ldr	r3, [pc, #80]	; (8004830 <readGRAM+0xb48>)
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d005      	beq.n	80047f2 <readGRAM+0xb0a>
 80047e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80047e8:	4618      	mov	r0, r3
 80047ea:	f7fd fd79 	bl	80022e0 <color555_to_565>
 80047ee:	4603      	mov	r3, r0
 80047f0:	84fb      	strh	r3, [r7, #38]	; 0x26
#endif
            *block++ = ret;
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	1c9a      	adds	r2, r3, #2
 80047f6:	60ba      	str	r2, [r7, #8]
 80047f8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80047fa:	801a      	strh	r2, [r3, #0]
            n--;
 80047fc:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8004800:	b29b      	uxth	r3, r3
 8004802:	3b01      	subs	r3, #1
 8004804:	b29b      	uxth	r3, r3
 8004806:	847b      	strh	r3, [r7, #34]	; 0x22
            if (!(_lcd_capable & AUTO_READINC))
 8004808:	4b08      	ldr	r3, [pc, #32]	; (800482c <readGRAM+0xb44>)
 800480a:	881b      	ldrh	r3, [r3, #0]
 800480c:	f003 0302 	and.w	r3, r3, #2
 8004810:	2b00      	cmp	r3, #0
 8004812:	d00f      	beq.n	8004834 <readGRAM+0xb4c>
        while (n)
 8004814:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8004818:	2b00      	cmp	r3, #0
 800481a:	f47f ad63 	bne.w	80042e4 <readGRAM+0x5fc>
 800481e:	e00a      	b.n	8004836 <readGRAM+0xb4e>
 8004820:	40020000 	.word	0x40020000
 8004824:	40020400 	.word	0x40020400
 8004828:	40020800 	.word	0x40020800
 800482c:	200003c0 	.word	0x200003c0
 8004830:	2000021a 	.word	0x2000021a
                break;
 8004834:	bf00      	nop
        }
        if (++col >= w) {
 8004836:	8bfb      	ldrh	r3, [r7, #30]
 8004838:	3301      	adds	r3, #1
 800483a:	b29b      	uxth	r3, r3
 800483c:	83fb      	strh	r3, [r7, #30]
 800483e:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8004842:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004846:	429a      	cmp	r2, r3
 8004848:	db0d      	blt.n	8004866 <readGRAM+0xb7e>
            col = 0;
 800484a:	2300      	movs	r3, #0
 800484c:	83fb      	strh	r3, [r7, #30]
            if (++row >= h)
 800484e:	8c3b      	ldrh	r3, [r7, #32]
 8004850:	3301      	adds	r3, #1
 8004852:	b29b      	uxth	r3, r3
 8004854:	843b      	strh	r3, [r7, #32]
 8004856:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800485a:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 800485e:	429a      	cmp	r2, r3
 8004860:	db01      	blt.n	8004866 <readGRAM+0xb7e>
                row = 0;
 8004862:	2300      	movs	r3, #0
 8004864:	843b      	strh	r3, [r7, #32]
        }
        RD_IDLE;
 8004866:	2101      	movs	r1, #1
 8004868:	4814      	ldr	r0, [pc, #80]	; (80048bc <readGRAM+0xbd4>)
 800486a:	f7fd fcc3 	bl	80021f4 <PIN_HIGH>
        CS_IDLE;
 800486e:	2101      	movs	r1, #1
 8004870:	4813      	ldr	r0, [pc, #76]	; (80048c0 <readGRAM+0xbd8>)
 8004872:	f7fd fcbf 	bl	80021f4 <PIN_HIGH>
        setWriteDir();
 8004876:	f7fd fe15 	bl	80024a4 <setWriteDir>
    while (n > 0) {
 800487a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800487e:	2b00      	cmp	r3, #0
 8004880:	f73f aa7e 	bgt.w	8003d80 <readGRAM+0x98>
    }
    if (!(_lcd_capable & MIPI_DCS_REV1))
 8004884:	4b0f      	ldr	r3, [pc, #60]	; (80048c4 <readGRAM+0xbdc>)
 8004886:	881b      	ldrh	r3, [r3, #0]
 8004888:	f003 0301 	and.w	r3, r3, #1
 800488c:	2b00      	cmp	r3, #0
 800488e:	d110      	bne.n	80048b2 <readGRAM+0xbca>
        setAddrWindow(0, 0, width() - 1, height() - 1);
 8004890:	f7fd fcee 	bl	8002270 <width>
 8004894:	4603      	mov	r3, r0
 8004896:	3b01      	subs	r3, #1
 8004898:	b29b      	uxth	r3, r3
 800489a:	b21c      	sxth	r4, r3
 800489c:	f7fd fcf4 	bl	8002288 <height>
 80048a0:	4603      	mov	r3, r0
 80048a2:	3b01      	subs	r3, #1
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	b21b      	sxth	r3, r3
 80048a8:	4622      	mov	r2, r4
 80048aa:	2100      	movs	r1, #0
 80048ac:	2000      	movs	r0, #0
 80048ae:	f000 fb97 	bl	8004fe0 <setAddrWindow>
    return 0;
 80048b2:	2300      	movs	r3, #0
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	372c      	adds	r7, #44	; 0x2c
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd90      	pop	{r4, r7, pc}
 80048bc:	40020000 	.word	0x40020000
 80048c0:	40020400 	.word	0x40020400
 80048c4:	200003c0 	.word	0x200003c0

080048c8 <setRotation>:


void setRotation(uint8_t r)
{
 80048c8:	b590      	push	{r4, r7, lr}
 80048ca:	b087      	sub	sp, #28
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	4603      	mov	r3, r0
 80048d0:	71fb      	strb	r3, [r7, #7]
   uint16_t GS, SS_v, ORG, REV = _lcd_rev;
 80048d2:	4bab      	ldr	r3, [pc, #684]	; (8004b80 <setRotation+0x2b8>)
 80048d4:	881b      	ldrh	r3, [r3, #0]
 80048d6:	827b      	strh	r3, [r7, #18]
   uint8_t val, d[3];
   rotation = r & 3;           // just perform the operation ourselves on the protected variables
 80048d8:	79fb      	ldrb	r3, [r7, #7]
 80048da:	f003 0303 	and.w	r3, r3, #3
 80048de:	b2da      	uxtb	r2, r3
 80048e0:	4ba8      	ldr	r3, [pc, #672]	; (8004b84 <setRotation+0x2bc>)
 80048e2:	701a      	strb	r2, [r3, #0]
   _width = (rotation & 1) ? HEIGHT : WIDTH;
 80048e4:	4ba7      	ldr	r3, [pc, #668]	; (8004b84 <setRotation+0x2bc>)
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	f003 0301 	and.w	r3, r3, #1
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d002      	beq.n	80048f6 <setRotation+0x2e>
 80048f0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80048f4:	e000      	b.n	80048f8 <setRotation+0x30>
 80048f6:	22f0      	movs	r2, #240	; 0xf0
 80048f8:	4ba3      	ldr	r3, [pc, #652]	; (8004b88 <setRotation+0x2c0>)
 80048fa:	801a      	strh	r2, [r3, #0]
   _height = (rotation & 1) ? WIDTH : HEIGHT;
 80048fc:	4ba1      	ldr	r3, [pc, #644]	; (8004b84 <setRotation+0x2bc>)
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	f003 0301 	and.w	r3, r3, #1
 8004904:	2b00      	cmp	r3, #0
 8004906:	d001      	beq.n	800490c <setRotation+0x44>
 8004908:	22f0      	movs	r2, #240	; 0xf0
 800490a:	e001      	b.n	8004910 <setRotation+0x48>
 800490c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004910:	4b9e      	ldr	r3, [pc, #632]	; (8004b8c <setRotation+0x2c4>)
 8004912:	801a      	strh	r2, [r3, #0]
   switch (rotation) {
 8004914:	4b9b      	ldr	r3, [pc, #620]	; (8004b84 <setRotation+0x2bc>)
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	2b03      	cmp	r3, #3
 800491a:	d817      	bhi.n	800494c <setRotation+0x84>
 800491c:	a201      	add	r2, pc, #4	; (adr r2, 8004924 <setRotation+0x5c>)
 800491e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004922:	bf00      	nop
 8004924:	08004935 	.word	0x08004935
 8004928:	0800493b 	.word	0x0800493b
 800492c:	08004941 	.word	0x08004941
 8004930:	08004947 	.word	0x08004947
   case 0:                    //PORTRAIT:
       val = 0x48;             //MY=0, MX=1, MV=0, ML=0, BGR=1
 8004934:	2348      	movs	r3, #72	; 0x48
 8004936:	72fb      	strb	r3, [r7, #11]
       break;
 8004938:	e008      	b.n	800494c <setRotation+0x84>
   case 1:                    //LANDSCAPE: 90 degrees
       val = 0x28;             //MY=0, MX=0, MV=1, ML=0, BGR=1
 800493a:	2328      	movs	r3, #40	; 0x28
 800493c:	72fb      	strb	r3, [r7, #11]
       break;
 800493e:	e005      	b.n	800494c <setRotation+0x84>
   case 2:                    //PORTRAIT_REV: 180 degrees
       val = 0x98;             //MY=1, MX=0, MV=0, ML=1, BGR=1
 8004940:	2398      	movs	r3, #152	; 0x98
 8004942:	72fb      	strb	r3, [r7, #11]
       break;
 8004944:	e002      	b.n	800494c <setRotation+0x84>
   case 3:                    //LANDSCAPE_REV: 270 degrees
       val = 0xF8;             //MY=1, MX=1, MV=1, ML=1, BGR=1
 8004946:	23f8      	movs	r3, #248	; 0xf8
 8004948:	72fb      	strb	r3, [r7, #11]
       break;
 800494a:	bf00      	nop
   }
   if (_lcd_capable & INVERT_GS)
 800494c:	4b90      	ldr	r3, [pc, #576]	; (8004b90 <setRotation+0x2c8>)
 800494e:	881b      	ldrh	r3, [r3, #0]
 8004950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004954:	2b00      	cmp	r3, #0
 8004956:	d005      	beq.n	8004964 <setRotation+0x9c>
       val ^= 0x80;
 8004958:	7afb      	ldrb	r3, [r7, #11]
 800495a:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
 800495e:	43db      	mvns	r3, r3
 8004960:	b2db      	uxtb	r3, r3
 8004962:	72fb      	strb	r3, [r7, #11]
   if (_lcd_capable & INVERT_SS)
 8004964:	4b8a      	ldr	r3, [pc, #552]	; (8004b90 <setRotation+0x2c8>)
 8004966:	881b      	ldrh	r3, [r3, #0]
 8004968:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800496c:	2b00      	cmp	r3, #0
 800496e:	d004      	beq.n	800497a <setRotation+0xb2>
       val ^= 0x40;
 8004970:	7afb      	ldrb	r3, [r7, #11]
 8004972:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 8004976:	b2db      	uxtb	r3, r3
 8004978:	72fb      	strb	r3, [r7, #11]
   if (_lcd_capable & INVERT_RGB)
 800497a:	4b85      	ldr	r3, [pc, #532]	; (8004b90 <setRotation+0x2c8>)
 800497c:	881b      	ldrh	r3, [r3, #0]
 800497e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004982:	2b00      	cmp	r3, #0
 8004984:	d004      	beq.n	8004990 <setRotation+0xc8>
       val ^= 0x08;
 8004986:	7afb      	ldrb	r3, [r7, #11]
 8004988:	f083 0308 	eor.w	r3, r3, #8
 800498c:	b2db      	uxtb	r3, r3
 800498e:	72fb      	strb	r3, [r7, #11]
   if (_lcd_capable & MIPI_DCS_REV1) {
 8004990:	4b7f      	ldr	r3, [pc, #508]	; (8004b90 <setRotation+0x2c8>)
 8004992:	881b      	ldrh	r3, [r3, #0]
 8004994:	f003 0301 	and.w	r3, r3, #1
 8004998:	2b00      	cmp	r3, #0
 800499a:	f000 8119 	beq.w	8004bd0 <setRotation+0x308>
       if (_lcd_ID == 0x6814) {  //.kbv my weird 0x9486 might be 68140
 800499e:	4b7d      	ldr	r3, [pc, #500]	; (8004b94 <setRotation+0x2cc>)
 80049a0:	881b      	ldrh	r3, [r3, #0]
 80049a2:	f646 0214 	movw	r2, #26644	; 0x6814
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d128      	bne.n	80049fc <setRotation+0x134>
           GS = (val & 0x80) ? (1 << 6) : 0;   //MY
 80049aa:	7afb      	ldrb	r3, [r7, #11]
 80049ac:	b25b      	sxtb	r3, r3
 80049ae:	105b      	asrs	r3, r3, #1
 80049b0:	b25b      	sxtb	r3, r3
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049b8:	823b      	strh	r3, [r7, #16]
           SS_v = (val & 0x40) ? (1 << 5) : 0;   //MX
 80049ba:	7afb      	ldrb	r3, [r7, #11]
 80049bc:	105b      	asrs	r3, r3, #1
 80049be:	b29b      	uxth	r3, r3
 80049c0:	f003 0320 	and.w	r3, r3, #32
 80049c4:	81fb      	strh	r3, [r7, #14]
           val &= 0x28;        //keep MV, BGR, MY=0, MX=0, ML=0
 80049c6:	7afb      	ldrb	r3, [r7, #11]
 80049c8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	72fb      	strb	r3, [r7, #11]
           d[0] = 0;
 80049d0:	2300      	movs	r3, #0
 80049d2:	723b      	strb	r3, [r7, #8]
           d[1] = GS | SS_v | 0x02;      //MY, MX
 80049d4:	8a3b      	ldrh	r3, [r7, #16]
 80049d6:	b2da      	uxtb	r2, r3
 80049d8:	89fb      	ldrh	r3, [r7, #14]
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	4313      	orrs	r3, r2
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	f043 0302 	orr.w	r3, r3, #2
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	727b      	strb	r3, [r7, #9]
           d[2] = 0x3B;
 80049e8:	233b      	movs	r3, #59	; 0x3b
 80049ea:	72bb      	strb	r3, [r7, #10]
           WriteCmdParamN(0xB6, 3, d);
 80049ec:	f107 0308 	add.w	r3, r7, #8
 80049f0:	461a      	mov	r2, r3
 80049f2:	2103      	movs	r1, #3
 80049f4:	20b6      	movs	r0, #182	; 0xb6
 80049f6:	f7fd ffd9 	bl	80029ac <WriteCmdParamN>
           goto common_MC;
 80049fa:	e0a4      	b.n	8004b46 <setRotation+0x27e>
       }
       else if (_lcd_ID == 0x1963 || _lcd_ID == 0x9481 || _lcd_ID == 0x1511) {
 80049fc:	4b65      	ldr	r3, [pc, #404]	; (8004b94 <setRotation+0x2cc>)
 80049fe:	881b      	ldrh	r3, [r3, #0]
 8004a00:	f641 1263 	movw	r2, #6499	; 0x1963
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d00b      	beq.n	8004a20 <setRotation+0x158>
 8004a08:	4b62      	ldr	r3, [pc, #392]	; (8004b94 <setRotation+0x2cc>)
 8004a0a:	881b      	ldrh	r3, [r3, #0]
 8004a0c:	f249 4281 	movw	r2, #38017	; 0x9481
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d005      	beq.n	8004a20 <setRotation+0x158>
 8004a14:	4b5f      	ldr	r3, [pc, #380]	; (8004b94 <setRotation+0x2cc>)
 8004a16:	881b      	ldrh	r3, [r3, #0]
 8004a18:	f241 5211 	movw	r2, #5393	; 0x1511
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d139      	bne.n	8004a94 <setRotation+0x1cc>
           if (val & 0x80)
 8004a20:	7afb      	ldrb	r3, [r7, #11]
 8004a22:	b25b      	sxtb	r3, r3
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	da04      	bge.n	8004a32 <setRotation+0x16a>
               val |= 0x01;    //GS
 8004a28:	7afb      	ldrb	r3, [r7, #11]
 8004a2a:	f043 0301 	orr.w	r3, r3, #1
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	72fb      	strb	r3, [r7, #11]
           if ((val & 0x40))
 8004a32:	7afb      	ldrb	r3, [r7, #11]
 8004a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d004      	beq.n	8004a46 <setRotation+0x17e>
               val |= 0x02;    //SS
 8004a3c:	7afb      	ldrb	r3, [r7, #11]
 8004a3e:	f043 0302 	orr.w	r3, r3, #2
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	72fb      	strb	r3, [r7, #11]
           if (_lcd_ID == 0x1963) val &= ~0xC0;
 8004a46:	4b53      	ldr	r3, [pc, #332]	; (8004b94 <setRotation+0x2cc>)
 8004a48:	881b      	ldrh	r3, [r3, #0]
 8004a4a:	f641 1263 	movw	r2, #6499	; 0x1963
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d104      	bne.n	8004a5c <setRotation+0x194>
 8004a52:	7afb      	ldrb	r3, [r7, #11]
 8004a54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	72fb      	strb	r3, [r7, #11]
           if (_lcd_ID == 0x9481) val &= ~0xD0;
 8004a5c:	4b4d      	ldr	r3, [pc, #308]	; (8004b94 <setRotation+0x2cc>)
 8004a5e:	881b      	ldrh	r3, [r3, #0]
 8004a60:	f249 4281 	movw	r2, #38017	; 0x9481
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d104      	bne.n	8004a72 <setRotation+0x1aa>
 8004a68:	7afb      	ldrb	r3, [r7, #11]
 8004a6a:	f003 032f 	and.w	r3, r3, #47	; 0x2f
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	72fb      	strb	r3, [r7, #11]
           if (_lcd_ID == 0x1511) {
 8004a72:	4b48      	ldr	r3, [pc, #288]	; (8004b94 <setRotation+0x2cc>)
 8004a74:	881b      	ldrh	r3, [r3, #0]
 8004a76:	f241 5211 	movw	r2, #5393	; 0x1511
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d160      	bne.n	8004b40 <setRotation+0x278>
               val &= ~0x10;   //remove ML
 8004a7e:	7afb      	ldrb	r3, [r7, #11]
 8004a80:	f023 0310 	bic.w	r3, r3, #16
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	72fb      	strb	r3, [r7, #11]
               val |= 0xC0;    //force penguin 180 rotation
 8004a88:	7afb      	ldrb	r3, [r7, #11]
 8004a8a:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	72fb      	strb	r3, [r7, #11]
           }
//            val &= (_lcd_ID == 0x1963) ? ~0xC0 : ~0xD0; //MY=0, MX=0 with ML=0 for ILI9481
           goto common_MC;
 8004a92:	e055      	b.n	8004b40 <setRotation+0x278>
      }
       else if (is8347) {
 8004a94:	4b40      	ldr	r3, [pc, #256]	; (8004b98 <setRotation+0x2d0>)
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d053      	beq.n	8004b44 <setRotation+0x27c>
           _MC = 0x02, _MP = 0x06, _MW = 0x22, _SC = 0x02, _EC = 0x04, _SP = 0x06, _EP = 0x08;
 8004a9c:	4b3f      	ldr	r3, [pc, #252]	; (8004b9c <setRotation+0x2d4>)
 8004a9e:	2202      	movs	r2, #2
 8004aa0:	801a      	strh	r2, [r3, #0]
 8004aa2:	4b3f      	ldr	r3, [pc, #252]	; (8004ba0 <setRotation+0x2d8>)
 8004aa4:	2206      	movs	r2, #6
 8004aa6:	801a      	strh	r2, [r3, #0]
 8004aa8:	4b3e      	ldr	r3, [pc, #248]	; (8004ba4 <setRotation+0x2dc>)
 8004aaa:	2222      	movs	r2, #34	; 0x22
 8004aac:	801a      	strh	r2, [r3, #0]
 8004aae:	4b3e      	ldr	r3, [pc, #248]	; (8004ba8 <setRotation+0x2e0>)
 8004ab0:	2202      	movs	r2, #2
 8004ab2:	801a      	strh	r2, [r3, #0]
 8004ab4:	4b3d      	ldr	r3, [pc, #244]	; (8004bac <setRotation+0x2e4>)
 8004ab6:	2204      	movs	r2, #4
 8004ab8:	801a      	strh	r2, [r3, #0]
 8004aba:	4b3d      	ldr	r3, [pc, #244]	; (8004bb0 <setRotation+0x2e8>)
 8004abc:	2206      	movs	r2, #6
 8004abe:	801a      	strh	r2, [r3, #0]
 8004ac0:	4b3c      	ldr	r3, [pc, #240]	; (8004bb4 <setRotation+0x2ec>)
 8004ac2:	2208      	movs	r2, #8
 8004ac4:	801a      	strh	r2, [r3, #0]
           if (_lcd_ID == 0x0065) {             //HX8352-B
 8004ac6:	4b33      	ldr	r3, [pc, #204]	; (8004b94 <setRotation+0x2cc>)
 8004ac8:	881b      	ldrh	r3, [r3, #0]
 8004aca:	2b65      	cmp	r3, #101	; 0x65
 8004acc:	d121      	bne.n	8004b12 <setRotation+0x24a>
               val |= 0x01;    //GS=1
 8004ace:	7afb      	ldrb	r3, [r7, #11]
 8004ad0:	f043 0301 	orr.w	r3, r3, #1
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	72fb      	strb	r3, [r7, #11]
               if ((val & 0x10)) val ^= 0xD3;  //(ML) flip MY, MX, ML, SS, GS
 8004ad8:	7afb      	ldrb	r3, [r7, #11]
 8004ada:	f003 0310 	and.w	r3, r3, #16
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d005      	beq.n	8004aee <setRotation+0x226>
 8004ae2:	7afb      	ldrb	r3, [r7, #11]
 8004ae4:	f083 032c 	eor.w	r3, r3, #44	; 0x2c
 8004ae8:	43db      	mvns	r3, r3
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	72fb      	strb	r3, [r7, #11]
               if (r & 1) _MC = 0x82, _MP = 0x80;
 8004aee:	79fb      	ldrb	r3, [r7, #7]
 8004af0:	f003 0301 	and.w	r3, r3, #1
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d006      	beq.n	8004b06 <setRotation+0x23e>
 8004af8:	4b28      	ldr	r3, [pc, #160]	; (8004b9c <setRotation+0x2d4>)
 8004afa:	2282      	movs	r2, #130	; 0x82
 8004afc:	801a      	strh	r2, [r3, #0]
 8004afe:	4b28      	ldr	r3, [pc, #160]	; (8004ba0 <setRotation+0x2d8>)
 8004b00:	2280      	movs	r2, #128	; 0x80
 8004b02:	801a      	strh	r2, [r3, #0]
 8004b04:	e005      	b.n	8004b12 <setRotation+0x24a>
               else _MC = 0x80, _MP = 0x82;
 8004b06:	4b25      	ldr	r3, [pc, #148]	; (8004b9c <setRotation+0x2d4>)
 8004b08:	2280      	movs	r2, #128	; 0x80
 8004b0a:	801a      	strh	r2, [r3, #0]
 8004b0c:	4b24      	ldr	r3, [pc, #144]	; (8004ba0 <setRotation+0x2d8>)
 8004b0e:	2282      	movs	r2, #130	; 0x82
 8004b10:	801a      	strh	r2, [r3, #0]
           }
           if (_lcd_ID == 0x5252) {             //HX8352-A
 8004b12:	4b20      	ldr	r3, [pc, #128]	; (8004b94 <setRotation+0x2cc>)
 8004b14:	881b      	ldrh	r3, [r3, #0]
 8004b16:	f245 2252 	movw	r2, #21074	; 0x5252
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d129      	bne.n	8004b72 <setRotation+0x2aa>
               val |= 0x02;   //VERT_SCROLLON
 8004b1e:	7afb      	ldrb	r3, [r7, #11]
 8004b20:	f043 0302 	orr.w	r3, r3, #2
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	72fb      	strb	r3, [r7, #11]
               if ((val & 0x10)) val ^= 0xD4;  //(ML) flip MY, MX, SS. GS=1
 8004b28:	7afb      	ldrb	r3, [r7, #11]
 8004b2a:	f003 0310 	and.w	r3, r3, #16
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d01f      	beq.n	8004b72 <setRotation+0x2aa>
 8004b32:	7afb      	ldrb	r3, [r7, #11]
 8004b34:	f083 032b 	eor.w	r3, r3, #43	; 0x2b
 8004b38:	43db      	mvns	r3, r3
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	72fb      	strb	r3, [r7, #11]
           }
			goto common_BGR;
 8004b3e:	e018      	b.n	8004b72 <setRotation+0x2aa>
           goto common_MC;
 8004b40:	bf00      	nop
 8004b42:	e000      	b.n	8004b46 <setRotation+0x27e>
       }
     common_MC:
 8004b44:	bf00      	nop
       _MC = 0x2A, _MP = 0x2B, _MW = 0x2C, _SC = 0x2A, _EC = 0x2A, _SP = 0x2B, _EP = 0x2B;
 8004b46:	4b15      	ldr	r3, [pc, #84]	; (8004b9c <setRotation+0x2d4>)
 8004b48:	222a      	movs	r2, #42	; 0x2a
 8004b4a:	801a      	strh	r2, [r3, #0]
 8004b4c:	4b14      	ldr	r3, [pc, #80]	; (8004ba0 <setRotation+0x2d8>)
 8004b4e:	222b      	movs	r2, #43	; 0x2b
 8004b50:	801a      	strh	r2, [r3, #0]
 8004b52:	4b14      	ldr	r3, [pc, #80]	; (8004ba4 <setRotation+0x2dc>)
 8004b54:	222c      	movs	r2, #44	; 0x2c
 8004b56:	801a      	strh	r2, [r3, #0]
 8004b58:	4b13      	ldr	r3, [pc, #76]	; (8004ba8 <setRotation+0x2e0>)
 8004b5a:	222a      	movs	r2, #42	; 0x2a
 8004b5c:	801a      	strh	r2, [r3, #0]
 8004b5e:	4b13      	ldr	r3, [pc, #76]	; (8004bac <setRotation+0x2e4>)
 8004b60:	222a      	movs	r2, #42	; 0x2a
 8004b62:	801a      	strh	r2, [r3, #0]
 8004b64:	4b12      	ldr	r3, [pc, #72]	; (8004bb0 <setRotation+0x2e8>)
 8004b66:	222b      	movs	r2, #43	; 0x2b
 8004b68:	801a      	strh	r2, [r3, #0]
 8004b6a:	4b12      	ldr	r3, [pc, #72]	; (8004bb4 <setRotation+0x2ec>)
 8004b6c:	222b      	movs	r2, #43	; 0x2b
 8004b6e:	801a      	strh	r2, [r3, #0]
 8004b70:	e000      	b.n	8004b74 <setRotation+0x2ac>
			goto common_BGR;
 8004b72:	bf00      	nop
     common_BGR:
       WriteCmdParamN(is8347 ? 0x16 : 0x36, 1, &val);
 8004b74:	4b08      	ldr	r3, [pc, #32]	; (8004b98 <setRotation+0x2d0>)
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d01d      	beq.n	8004bb8 <setRotation+0x2f0>
 8004b7c:	2316      	movs	r3, #22
 8004b7e:	e01c      	b.n	8004bba <setRotation+0x2f2>
 8004b80:	200003c4 	.word	0x200003c4
 8004b84:	2000021e 	.word	0x2000021e
 8004b88:	20000010 	.word	0x20000010
 8004b8c:	20000012 	.word	0x20000012
 8004b90:	200003c0 	.word	0x200003c0
 8004b94:	200003ce 	.word	0x200003ce
 8004b98:	20000219 	.word	0x20000219
 8004b9c:	200003c8 	.word	0x200003c8
 8004ba0:	200003c6 	.word	0x200003c6
 8004ba4:	200003be 	.word	0x200003be
 8004ba8:	200003ca 	.word	0x200003ca
 8004bac:	200003d2 	.word	0x200003d2
 8004bb0:	200003c2 	.word	0x200003c2
 8004bb4:	200003cc 	.word	0x200003cc
 8004bb8:	2336      	movs	r3, #54	; 0x36
 8004bba:	f107 020b 	add.w	r2, r7, #11
 8004bbe:	2101      	movs	r1, #1
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f7fd fef3 	bl	80029ac <WriteCmdParamN>
       _lcd_madctl = val;
 8004bc6:	7afb      	ldrb	r3, [r7, #11]
 8004bc8:	b29a      	uxth	r2, r3
 8004bca:	4b77      	ldr	r3, [pc, #476]	; (8004da8 <setRotation+0x4e0>)
 8004bcc:	801a      	strh	r2, [r3, #0]
 8004bce:	e0a5      	b.n	8004d1c <setRotation+0x454>
//	    if (_lcd_ID	== 0x1963) WriteCmdParamN(0x13, 0, NULL);   //NORMAL mode
   }
   // cope with 9320 variants
   else {
       switch (_lcd_ID) {
 8004bd0:	4b76      	ldr	r3, [pc, #472]	; (8004dac <setRotation+0x4e4>)
 8004bd2:	881b      	ldrh	r3, [r3, #0]
 8004bd4:	f24b 5209 	movw	r2, #46345	; 0xb509
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d013      	beq.n	8004c04 <setRotation+0x33c>
 8004bdc:	f24b 5209 	movw	r2, #46345	; 0xb509
 8004be0:	4293      	cmp	r3, r2
 8004be2:	dc4f      	bgt.n	8004c84 <setRotation+0x3bc>
 8004be4:	f249 3226 	movw	r2, #37670	; 0x9326
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d00b      	beq.n	8004c04 <setRotation+0x33c>
 8004bec:	f249 3226 	movw	r2, #37670	; 0x9326
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	dc47      	bgt.n	8004c84 <setRotation+0x3bc>
 8004bf4:	f245 4220 	movw	r2, #21536	; 0x5420
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d003      	beq.n	8004c04 <setRotation+0x33c>
 8004bfc:	f247 7293 	movw	r2, #30611	; 0x7793
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d13f      	bne.n	8004c84 <setRotation+0x3bc>
#endif
       case 0x5420:
       case 0x7793:
       case 0x9326:
		case 0xB509:
           _MC = 0x200, _MP = 0x201, _MW = 0x202, _SC = 0x210, _EC = 0x211, _SP = 0x212, _EP = 0x213;
 8004c04:	4b6a      	ldr	r3, [pc, #424]	; (8004db0 <setRotation+0x4e8>)
 8004c06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c0a:	801a      	strh	r2, [r3, #0]
 8004c0c:	4b69      	ldr	r3, [pc, #420]	; (8004db4 <setRotation+0x4ec>)
 8004c0e:	f240 2201 	movw	r2, #513	; 0x201
 8004c12:	801a      	strh	r2, [r3, #0]
 8004c14:	4b68      	ldr	r3, [pc, #416]	; (8004db8 <setRotation+0x4f0>)
 8004c16:	f240 2202 	movw	r2, #514	; 0x202
 8004c1a:	801a      	strh	r2, [r3, #0]
 8004c1c:	4b67      	ldr	r3, [pc, #412]	; (8004dbc <setRotation+0x4f4>)
 8004c1e:	f44f 7204 	mov.w	r2, #528	; 0x210
 8004c22:	801a      	strh	r2, [r3, #0]
 8004c24:	4b66      	ldr	r3, [pc, #408]	; (8004dc0 <setRotation+0x4f8>)
 8004c26:	f240 2211 	movw	r2, #529	; 0x211
 8004c2a:	801a      	strh	r2, [r3, #0]
 8004c2c:	4b65      	ldr	r3, [pc, #404]	; (8004dc4 <setRotation+0x4fc>)
 8004c2e:	f240 2212 	movw	r2, #530	; 0x212
 8004c32:	801a      	strh	r2, [r3, #0]
 8004c34:	4b64      	ldr	r3, [pc, #400]	; (8004dc8 <setRotation+0x500>)
 8004c36:	f240 2213 	movw	r2, #531	; 0x213
 8004c3a:	801a      	strh	r2, [r3, #0]
           GS = (val & 0x80) ? (1 << 15) : 0;
 8004c3c:	7afb      	ldrb	r3, [r7, #11]
 8004c3e:	b25b      	sxtb	r3, r3
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004c46:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004c4a:	823b      	strh	r3, [r7, #16]
			uint16_t NL;
			NL = ((432 / 8) - 1) << 9;
 8004c4c:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8004c50:	82bb      	strh	r3, [r7, #20]
           if (_lcd_ID == 0x9326 || _lcd_ID == 0x5420) NL >>= 1;
 8004c52:	4b56      	ldr	r3, [pc, #344]	; (8004dac <setRotation+0x4e4>)
 8004c54:	881b      	ldrh	r3, [r3, #0]
 8004c56:	f249 3226 	movw	r2, #37670	; 0x9326
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d005      	beq.n	8004c6a <setRotation+0x3a2>
 8004c5e:	4b53      	ldr	r3, [pc, #332]	; (8004dac <setRotation+0x4e4>)
 8004c60:	881b      	ldrh	r3, [r3, #0]
 8004c62:	f245 4220 	movw	r2, #21536	; 0x5420
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d102      	bne.n	8004c70 <setRotation+0x3a8>
 8004c6a:	8abb      	ldrh	r3, [r7, #20]
 8004c6c:	085b      	lsrs	r3, r3, #1
 8004c6e:	82bb      	strh	r3, [r7, #20]
           WriteCmdData(0x400, GS | NL);
 8004c70:	8a3a      	ldrh	r2, [r7, #16]
 8004c72:	8abb      	ldrh	r3, [r7, #20]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	4619      	mov	r1, r3
 8004c7a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004c7e:	f7fd fbbe 	bl	80023fe <WriteCmdData>
           goto common_SS;
 8004c82:	e024      	b.n	8004cce <setRotation+0x406>
       default:
           _MC = 0x20, _MP = 0x21, _MW = 0x22, _SC = 0x50, _EC = 0x51, _SP = 0x52, _EP = 0x53;
 8004c84:	4b4a      	ldr	r3, [pc, #296]	; (8004db0 <setRotation+0x4e8>)
 8004c86:	2220      	movs	r2, #32
 8004c88:	801a      	strh	r2, [r3, #0]
 8004c8a:	4b4a      	ldr	r3, [pc, #296]	; (8004db4 <setRotation+0x4ec>)
 8004c8c:	2221      	movs	r2, #33	; 0x21
 8004c8e:	801a      	strh	r2, [r3, #0]
 8004c90:	4b49      	ldr	r3, [pc, #292]	; (8004db8 <setRotation+0x4f0>)
 8004c92:	2222      	movs	r2, #34	; 0x22
 8004c94:	801a      	strh	r2, [r3, #0]
 8004c96:	4b49      	ldr	r3, [pc, #292]	; (8004dbc <setRotation+0x4f4>)
 8004c98:	2250      	movs	r2, #80	; 0x50
 8004c9a:	801a      	strh	r2, [r3, #0]
 8004c9c:	4b48      	ldr	r3, [pc, #288]	; (8004dc0 <setRotation+0x4f8>)
 8004c9e:	2251      	movs	r2, #81	; 0x51
 8004ca0:	801a      	strh	r2, [r3, #0]
 8004ca2:	4b48      	ldr	r3, [pc, #288]	; (8004dc4 <setRotation+0x4fc>)
 8004ca4:	2252      	movs	r2, #82	; 0x52
 8004ca6:	801a      	strh	r2, [r3, #0]
 8004ca8:	4b47      	ldr	r3, [pc, #284]	; (8004dc8 <setRotation+0x500>)
 8004caa:	2253      	movs	r2, #83	; 0x53
 8004cac:	801a      	strh	r2, [r3, #0]
           GS = (val & 0x80) ? (1 << 15) : 0;
 8004cae:	7afb      	ldrb	r3, [r7, #11]
 8004cb0:	b25b      	sxtb	r3, r3
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004cb8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004cbc:	823b      	strh	r3, [r7, #16]
           WriteCmdData(0x60, GS | 0x2700);    // Gate Scan Line (0xA700)
 8004cbe:	8a3b      	ldrh	r3, [r7, #16]
 8004cc0:	f443 531c 	orr.w	r3, r3, #9984	; 0x2700
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	2060      	movs	r0, #96	; 0x60
 8004cca:	f7fd fb98 	bl	80023fe <WriteCmdData>
         common_SS:
           SS_v = (val & 0x40) ? (1 << 8) : 0;
 8004cce:	7afb      	ldrb	r3, [r7, #11]
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cd8:	81fb      	strh	r3, [r7, #14]
           WriteCmdData(0x01, SS_v);     // set Driver Output Control
 8004cda:	89fb      	ldrh	r3, [r7, #14]
 8004cdc:	4619      	mov	r1, r3
 8004cde:	2001      	movs	r0, #1
 8004ce0:	f7fd fb8d 	bl	80023fe <WriteCmdData>
         common_ORG:
           ORG = (val & 0x20) ? (1 << 3) : 0;
 8004ce4:	7afb      	ldrb	r3, [r7, #11]
 8004ce6:	109b      	asrs	r3, r3, #2
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	f003 0308 	and.w	r3, r3, #8
 8004cee:	82fb      	strh	r3, [r7, #22]
               if (rotation == 1 || rotation == 2) {
                   val ^= 0x08;        // change BGR bit for LANDSCAPE and PORTRAIT_REV
               }
           }
#endif
           if (val & 0x08)
 8004cf0:	7afb      	ldrb	r3, [r7, #11]
 8004cf2:	f003 0308 	and.w	r3, r3, #8
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d003      	beq.n	8004d02 <setRotation+0x43a>
               ORG |= 0x1000;  //BGR
 8004cfa:	8afb      	ldrh	r3, [r7, #22]
 8004cfc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004d00:	82fb      	strh	r3, [r7, #22]
           _lcd_madctl = ORG | 0x0030;
 8004d02:	8afb      	ldrh	r3, [r7, #22]
 8004d04:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8004d08:	b29a      	uxth	r2, r3
 8004d0a:	4b27      	ldr	r3, [pc, #156]	; (8004da8 <setRotation+0x4e0>)
 8004d0c:	801a      	strh	r2, [r3, #0]
           WriteCmdData(0x03, _lcd_madctl);    // set GRAM write direction and BGR=1.
 8004d0e:	4b26      	ldr	r3, [pc, #152]	; (8004da8 <setRotation+0x4e0>)
 8004d10:	881b      	ldrh	r3, [r3, #0]
 8004d12:	4619      	mov	r1, r3
 8004d14:	2003      	movs	r0, #3
 8004d16:	f7fd fb72 	bl	80023fe <WriteCmdData>
           break;
 8004d1a:	bf00      	nop
           WriteCmdData(0x11, ORG | 0x6070);   // DFM=3, EN=0, TY=1
           break;
#endif
		}
   }
   if ((rotation & 1) && ((_lcd_capable & MV_AXIS) == 0)) {
 8004d1c:	4b2b      	ldr	r3, [pc, #172]	; (8004dcc <setRotation+0x504>)
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	f003 0301 	and.w	r3, r3, #1
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d023      	beq.n	8004d70 <setRotation+0x4a8>
 8004d28:	4b29      	ldr	r3, [pc, #164]	; (8004dd0 <setRotation+0x508>)
 8004d2a:	881b      	ldrh	r3, [r3, #0]
 8004d2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d11d      	bne.n	8004d70 <setRotation+0x4a8>
       uint16_t x;
       x = _MC, _MC = _MP, _MP = x;
 8004d34:	4b1e      	ldr	r3, [pc, #120]	; (8004db0 <setRotation+0x4e8>)
 8004d36:	881b      	ldrh	r3, [r3, #0]
 8004d38:	81bb      	strh	r3, [r7, #12]
 8004d3a:	4b1e      	ldr	r3, [pc, #120]	; (8004db4 <setRotation+0x4ec>)
 8004d3c:	881a      	ldrh	r2, [r3, #0]
 8004d3e:	4b1c      	ldr	r3, [pc, #112]	; (8004db0 <setRotation+0x4e8>)
 8004d40:	801a      	strh	r2, [r3, #0]
 8004d42:	4a1c      	ldr	r2, [pc, #112]	; (8004db4 <setRotation+0x4ec>)
 8004d44:	89bb      	ldrh	r3, [r7, #12]
 8004d46:	8013      	strh	r3, [r2, #0]
       x = _SC, _SC = _SP, _SP = x;    //.kbv check 0139
 8004d48:	4b1c      	ldr	r3, [pc, #112]	; (8004dbc <setRotation+0x4f4>)
 8004d4a:	881b      	ldrh	r3, [r3, #0]
 8004d4c:	81bb      	strh	r3, [r7, #12]
 8004d4e:	4b1d      	ldr	r3, [pc, #116]	; (8004dc4 <setRotation+0x4fc>)
 8004d50:	881a      	ldrh	r2, [r3, #0]
 8004d52:	4b1a      	ldr	r3, [pc, #104]	; (8004dbc <setRotation+0x4f4>)
 8004d54:	801a      	strh	r2, [r3, #0]
 8004d56:	4a1b      	ldr	r2, [pc, #108]	; (8004dc4 <setRotation+0x4fc>)
 8004d58:	89bb      	ldrh	r3, [r7, #12]
 8004d5a:	8013      	strh	r3, [r2, #0]
       x = _EC, _EC = _EP, _EP = x;    //.kbv check 0139
 8004d5c:	4b18      	ldr	r3, [pc, #96]	; (8004dc0 <setRotation+0x4f8>)
 8004d5e:	881b      	ldrh	r3, [r3, #0]
 8004d60:	81bb      	strh	r3, [r7, #12]
 8004d62:	4b19      	ldr	r3, [pc, #100]	; (8004dc8 <setRotation+0x500>)
 8004d64:	881a      	ldrh	r2, [r3, #0]
 8004d66:	4b16      	ldr	r3, [pc, #88]	; (8004dc0 <setRotation+0x4f8>)
 8004d68:	801a      	strh	r2, [r3, #0]
 8004d6a:	4a17      	ldr	r2, [pc, #92]	; (8004dc8 <setRotation+0x500>)
 8004d6c:	89bb      	ldrh	r3, [r7, #12]
 8004d6e:	8013      	strh	r3, [r2, #0]
   }
   setAddrWindow(0, 0, width() - 1, height() - 1);
 8004d70:	f7fd fa7e 	bl	8002270 <width>
 8004d74:	4603      	mov	r3, r0
 8004d76:	3b01      	subs	r3, #1
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	b21c      	sxth	r4, r3
 8004d7c:	f7fd fa84 	bl	8002288 <height>
 8004d80:	4603      	mov	r3, r0
 8004d82:	3b01      	subs	r3, #1
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	b21b      	sxth	r3, r3
 8004d88:	4622      	mov	r2, r4
 8004d8a:	2100      	movs	r1, #0
 8004d8c:	2000      	movs	r0, #0
 8004d8e:	f000 f927 	bl	8004fe0 <setAddrWindow>
   vertScroll(0, HEIGHT, 0);   //reset scrolling after a rotation
 8004d92:	2200      	movs	r2, #0
 8004d94:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004d98:	2000      	movs	r0, #0
 8004d9a:	f000 fa45 	bl	8005228 <vertScroll>
}
 8004d9e:	bf00      	nop
 8004da0:	371c      	adds	r7, #28
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd90      	pop	{r4, r7, pc}
 8004da6:	bf00      	nop
 8004da8:	200003d4 	.word	0x200003d4
 8004dac:	200003ce 	.word	0x200003ce
 8004db0:	200003c8 	.word	0x200003c8
 8004db4:	200003c6 	.word	0x200003c6
 8004db8:	200003be 	.word	0x200003be
 8004dbc:	200003ca 	.word	0x200003ca
 8004dc0:	200003d2 	.word	0x200003d2
 8004dc4:	200003c2 	.word	0x200003c2
 8004dc8:	200003cc 	.word	0x200003cc
 8004dcc:	2000021e 	.word	0x2000021e
 8004dd0:	200003c0 	.word	0x200003c0

08004dd4 <drawPixel>:


void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 8004dd4:	b590      	push	{r4, r7, lr}
 8004dd6:	b085      	sub	sp, #20
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	4603      	mov	r3, r0
 8004ddc:	80fb      	strh	r3, [r7, #6]
 8004dde:	460b      	mov	r3, r1
 8004de0:	80bb      	strh	r3, [r7, #4]
 8004de2:	4613      	mov	r3, r2
 8004de4:	807b      	strh	r3, [r7, #2]
   // MCUFRIEND just plots at edge if you try to write outside of the box:
   if (x < 0 || y < 0 || x >= width() || y >= height())
 8004de6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	f2c0 80e7 	blt.w	8004fbe <drawPixel+0x1ea>
 8004df0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	f2c0 80e2 	blt.w	8004fbe <drawPixel+0x1ea>
 8004dfa:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8004dfe:	f7fd fa37 	bl	8002270 <width>
 8004e02:	4603      	mov	r3, r0
 8004e04:	429c      	cmp	r4, r3
 8004e06:	f280 80da 	bge.w	8004fbe <drawPixel+0x1ea>
 8004e0a:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8004e0e:	f7fd fa3b 	bl	8002288 <height>
 8004e12:	4603      	mov	r3, r0
 8004e14:	429c      	cmp	r4, r3
 8004e16:	f280 80d2 	bge.w	8004fbe <drawPixel+0x1ea>
       return;
#if defined(SUPPORT_9488_555)
   if (is555) color = color565_to_555(color);
 8004e1a:	4b6b      	ldr	r3, [pc, #428]	; (8004fc8 <drawPixel+0x1f4>)
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d005      	beq.n	8004e2e <drawPixel+0x5a>
 8004e22:	887b      	ldrh	r3, [r7, #2]
 8004e24:	4618      	mov	r0, r3
 8004e26:	f7fd fa3b 	bl	80022a0 <color565_to_555>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	807b      	strh	r3, [r7, #2]
#endif
   setAddrWindow(x, y, x, y);
 8004e2e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004e32:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004e36:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004e3a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004e3e:	f000 f8cf 	bl	8004fe0 <setAddrWindow>
//    CS_ACTIVE; WriteCmd(_MW); write16(color); CS_IDLE; //-0.01s +98B
   if (is9797) { CS_ACTIVE; WriteCmd(_MW); write24(color); CS_IDLE;} else
 8004e42:	4b62      	ldr	r3, [pc, #392]	; (8004fcc <drawPixel+0x1f8>)
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	f000 80b1 	beq.w	8004fae <drawPixel+0x1da>
 8004e4c:	2101      	movs	r1, #1
 8004e4e:	4860      	ldr	r0, [pc, #384]	; (8004fd0 <drawPixel+0x1fc>)
 8004e50:	f7fd f9c0 	bl	80021d4 <PIN_LOW>
 8004e54:	2110      	movs	r1, #16
 8004e56:	485f      	ldr	r0, [pc, #380]	; (8004fd4 <drawPixel+0x200>)
 8004e58:	f7fd f9bc 	bl	80021d4 <PIN_LOW>
 8004e5c:	4b5e      	ldr	r3, [pc, #376]	; (8004fd8 <drawPixel+0x204>)
 8004e5e:	881b      	ldrh	r3, [r3, #0]
 8004e60:	0a1b      	lsrs	r3, r3, #8
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	73fb      	strb	r3, [r7, #15]
 8004e66:	4b5c      	ldr	r3, [pc, #368]	; (8004fd8 <drawPixel+0x204>)
 8004e68:	881b      	ldrh	r3, [r3, #0]
 8004e6a:	73bb      	strb	r3, [r7, #14]
 8004e6c:	4b59      	ldr	r3, [pc, #356]	; (8004fd4 <drawPixel+0x200>)
 8004e6e:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8004e72:	619a      	str	r2, [r3, #24]
 8004e74:	4b56      	ldr	r3, [pc, #344]	; (8004fd0 <drawPixel+0x1fc>)
 8004e76:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8004e7a:	619a      	str	r2, [r3, #24]
 8004e7c:	4b57      	ldr	r3, [pc, #348]	; (8004fdc <drawPixel+0x208>)
 8004e7e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004e82:	619a      	str	r2, [r3, #24]
 8004e84:	7bfb      	ldrb	r3, [r7, #15]
 8004e86:	005b      	lsls	r3, r3, #1
 8004e88:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8004e8c:	7bfb      	ldrb	r3, [r7, #15]
 8004e8e:	021b      	lsls	r3, r3, #8
 8004e90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e94:	431a      	orrs	r2, r3
 8004e96:	7bfb      	ldrb	r3, [r7, #15]
 8004e98:	025b      	lsls	r3, r3, #9
 8004e9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e9e:	431a      	orrs	r2, r3
 8004ea0:	4b4c      	ldr	r3, [pc, #304]	; (8004fd4 <drawPixel+0x200>)
 8004ea2:	619a      	str	r2, [r3, #24]
 8004ea4:	7bfb      	ldrb	r3, [r7, #15]
 8004ea6:	011b      	lsls	r3, r3, #4
 8004ea8:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8004eac:	7bfb      	ldrb	r3, [r7, #15]
 8004eae:	105b      	asrs	r3, r3, #1
 8004eb0:	f003 0310 	and.w	r3, r3, #16
 8004eb4:	431a      	orrs	r2, r3
 8004eb6:	7bfb      	ldrb	r3, [r7, #15]
 8004eb8:	005b      	lsls	r3, r3, #1
 8004eba:	f003 0320 	and.w	r3, r3, #32
 8004ebe:	431a      	orrs	r2, r3
 8004ec0:	7bfb      	ldrb	r3, [r7, #15]
 8004ec2:	f003 0308 	and.w	r3, r3, #8
 8004ec6:	431a      	orrs	r2, r3
 8004ec8:	4b41      	ldr	r3, [pc, #260]	; (8004fd0 <drawPixel+0x1fc>)
 8004eca:	619a      	str	r2, [r3, #24]
 8004ecc:	7bfb      	ldrb	r3, [r7, #15]
 8004ece:	019b      	lsls	r3, r3, #6
 8004ed0:	4a42      	ldr	r2, [pc, #264]	; (8004fdc <drawPixel+0x208>)
 8004ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ed6:	6193      	str	r3, [r2, #24]
 8004ed8:	2102      	movs	r1, #2
 8004eda:	483e      	ldr	r0, [pc, #248]	; (8004fd4 <drawPixel+0x200>)
 8004edc:	f7fd f97a 	bl	80021d4 <PIN_LOW>
 8004ee0:	2102      	movs	r1, #2
 8004ee2:	483c      	ldr	r0, [pc, #240]	; (8004fd4 <drawPixel+0x200>)
 8004ee4:	f7fd f976 	bl	80021d4 <PIN_LOW>
 8004ee8:	2102      	movs	r1, #2
 8004eea:	483a      	ldr	r0, [pc, #232]	; (8004fd4 <drawPixel+0x200>)
 8004eec:	f7fd f972 	bl	80021d4 <PIN_LOW>
 8004ef0:	2102      	movs	r1, #2
 8004ef2:	4838      	ldr	r0, [pc, #224]	; (8004fd4 <drawPixel+0x200>)
 8004ef4:	f7fd f97e 	bl	80021f4 <PIN_HIGH>
 8004ef8:	2102      	movs	r1, #2
 8004efa:	4836      	ldr	r0, [pc, #216]	; (8004fd4 <drawPixel+0x200>)
 8004efc:	f7fd f97a 	bl	80021f4 <PIN_HIGH>
 8004f00:	4b34      	ldr	r3, [pc, #208]	; (8004fd4 <drawPixel+0x200>)
 8004f02:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8004f06:	619a      	str	r2, [r3, #24]
 8004f08:	4b31      	ldr	r3, [pc, #196]	; (8004fd0 <drawPixel+0x1fc>)
 8004f0a:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8004f0e:	619a      	str	r2, [r3, #24]
 8004f10:	4b32      	ldr	r3, [pc, #200]	; (8004fdc <drawPixel+0x208>)
 8004f12:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004f16:	619a      	str	r2, [r3, #24]
 8004f18:	7bbb      	ldrb	r3, [r7, #14]
 8004f1a:	005b      	lsls	r3, r3, #1
 8004f1c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8004f20:	7bbb      	ldrb	r3, [r7, #14]
 8004f22:	021b      	lsls	r3, r3, #8
 8004f24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f28:	431a      	orrs	r2, r3
 8004f2a:	7bbb      	ldrb	r3, [r7, #14]
 8004f2c:	025b      	lsls	r3, r3, #9
 8004f2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f32:	431a      	orrs	r2, r3
 8004f34:	4b27      	ldr	r3, [pc, #156]	; (8004fd4 <drawPixel+0x200>)
 8004f36:	619a      	str	r2, [r3, #24]
 8004f38:	7bbb      	ldrb	r3, [r7, #14]
 8004f3a:	011b      	lsls	r3, r3, #4
 8004f3c:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8004f40:	7bbb      	ldrb	r3, [r7, #14]
 8004f42:	105b      	asrs	r3, r3, #1
 8004f44:	f003 0310 	and.w	r3, r3, #16
 8004f48:	431a      	orrs	r2, r3
 8004f4a:	7bbb      	ldrb	r3, [r7, #14]
 8004f4c:	005b      	lsls	r3, r3, #1
 8004f4e:	f003 0320 	and.w	r3, r3, #32
 8004f52:	431a      	orrs	r2, r3
 8004f54:	7bbb      	ldrb	r3, [r7, #14]
 8004f56:	f003 0308 	and.w	r3, r3, #8
 8004f5a:	431a      	orrs	r2, r3
 8004f5c:	4b1c      	ldr	r3, [pc, #112]	; (8004fd0 <drawPixel+0x1fc>)
 8004f5e:	619a      	str	r2, [r3, #24]
 8004f60:	7bbb      	ldrb	r3, [r7, #14]
 8004f62:	019b      	lsls	r3, r3, #6
 8004f64:	4a1d      	ldr	r2, [pc, #116]	; (8004fdc <drawPixel+0x208>)
 8004f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f6a:	6193      	str	r3, [r2, #24]
 8004f6c:	2102      	movs	r1, #2
 8004f6e:	4819      	ldr	r0, [pc, #100]	; (8004fd4 <drawPixel+0x200>)
 8004f70:	f7fd f930 	bl	80021d4 <PIN_LOW>
 8004f74:	2102      	movs	r1, #2
 8004f76:	4817      	ldr	r0, [pc, #92]	; (8004fd4 <drawPixel+0x200>)
 8004f78:	f7fd f92c 	bl	80021d4 <PIN_LOW>
 8004f7c:	2102      	movs	r1, #2
 8004f7e:	4815      	ldr	r0, [pc, #84]	; (8004fd4 <drawPixel+0x200>)
 8004f80:	f7fd f928 	bl	80021d4 <PIN_LOW>
 8004f84:	2102      	movs	r1, #2
 8004f86:	4813      	ldr	r0, [pc, #76]	; (8004fd4 <drawPixel+0x200>)
 8004f88:	f7fd f934 	bl	80021f4 <PIN_HIGH>
 8004f8c:	2102      	movs	r1, #2
 8004f8e:	4811      	ldr	r0, [pc, #68]	; (8004fd4 <drawPixel+0x200>)
 8004f90:	f7fd f930 	bl	80021f4 <PIN_HIGH>
 8004f94:	2110      	movs	r1, #16
 8004f96:	480f      	ldr	r0, [pc, #60]	; (8004fd4 <drawPixel+0x200>)
 8004f98:	f7fd f92c 	bl	80021f4 <PIN_HIGH>
 8004f9c:	887b      	ldrh	r3, [r7, #2]
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f7fd faae 	bl	8002500 <write24>
 8004fa4:	2101      	movs	r1, #1
 8004fa6:	480a      	ldr	r0, [pc, #40]	; (8004fd0 <drawPixel+0x1fc>)
 8004fa8:	f7fd f924 	bl	80021f4 <PIN_HIGH>
 8004fac:	e008      	b.n	8004fc0 <drawPixel+0x1ec>
   WriteCmdData(_MW, color);
 8004fae:	4b0a      	ldr	r3, [pc, #40]	; (8004fd8 <drawPixel+0x204>)
 8004fb0:	881b      	ldrh	r3, [r3, #0]
 8004fb2:	887a      	ldrh	r2, [r7, #2]
 8004fb4:	4611      	mov	r1, r2
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f7fd fa21 	bl	80023fe <WriteCmdData>
 8004fbc:	e000      	b.n	8004fc0 <drawPixel+0x1ec>
       return;
 8004fbe:	bf00      	nop
}
 8004fc0:	3714      	adds	r7, #20
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd90      	pop	{r4, r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	2000021a 	.word	0x2000021a
 8004fcc:	2000021b 	.word	0x2000021b
 8004fd0:	40020400 	.word	0x40020400
 8004fd4:	40020000 	.word	0x40020000
 8004fd8:	200003be 	.word	0x200003be
 8004fdc:	40020800 	.word	0x40020800

08004fe0 <setAddrWindow>:


void setAddrWindow(int16_t x, int16_t y, int16_t x1, int16_t y1)
{
 8004fe0:	b590      	push	{r4, r7, lr}
 8004fe2:	b087      	sub	sp, #28
 8004fe4:	af02      	add	r7, sp, #8
 8004fe6:	4604      	mov	r4, r0
 8004fe8:	4608      	mov	r0, r1
 8004fea:	4611      	mov	r1, r2
 8004fec:	461a      	mov	r2, r3
 8004fee:	4623      	mov	r3, r4
 8004ff0:	80fb      	strh	r3, [r7, #6]
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	80bb      	strh	r3, [r7, #4]
 8004ff6:	460b      	mov	r3, r1
 8004ff8:	807b      	strh	r3, [r7, #2]
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	803b      	strh	r3, [r7, #0]
#if defined(OFFSET_9327)
	if (_lcd_ID == 0x9327) {
 8004ffe:	4b80      	ldr	r3, [pc, #512]	; (8005200 <setAddrWindow+0x220>)
 8005000:	881b      	ldrh	r3, [r3, #0]
 8005002:	f249 3227 	movw	r2, #37671	; 0x9327
 8005006:	4293      	cmp	r3, r2
 8005008:	d117      	bne.n	800503a <setAddrWindow+0x5a>
	    if (rotation == 2) y += OFFSET_9327, y1 += OFFSET_9327;
 800500a:	4b7e      	ldr	r3, [pc, #504]	; (8005204 <setAddrWindow+0x224>)
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	2b02      	cmp	r3, #2
 8005010:	d107      	bne.n	8005022 <setAddrWindow+0x42>
 8005012:	88bb      	ldrh	r3, [r7, #4]
 8005014:	3320      	adds	r3, #32
 8005016:	b29b      	uxth	r3, r3
 8005018:	80bb      	strh	r3, [r7, #4]
 800501a:	883b      	ldrh	r3, [r7, #0]
 800501c:	3320      	adds	r3, #32
 800501e:	b29b      	uxth	r3, r3
 8005020:	803b      	strh	r3, [r7, #0]
	    if (rotation == 3) x += OFFSET_9327, x1 += OFFSET_9327;
 8005022:	4b78      	ldr	r3, [pc, #480]	; (8005204 <setAddrWindow+0x224>)
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	2b03      	cmp	r3, #3
 8005028:	d107      	bne.n	800503a <setAddrWindow+0x5a>
 800502a:	88fb      	ldrh	r3, [r7, #6]
 800502c:	3320      	adds	r3, #32
 800502e:	b29b      	uxth	r3, r3
 8005030:	80fb      	strh	r3, [r7, #6]
 8005032:	887b      	ldrh	r3, [r7, #2]
 8005034:	3320      	adds	r3, #32
 8005036:	b29b      	uxth	r3, r3
 8005038:	807b      	strh	r3, [r7, #2]
   }
#endif
#if 1
   if (_lcd_ID == 0x1526 && (rotation & 1)) {
 800503a:	4b71      	ldr	r3, [pc, #452]	; (8005200 <setAddrWindow+0x220>)
 800503c:	881b      	ldrh	r3, [r3, #0]
 800503e:	f241 5226 	movw	r2, #5414	; 0x1526
 8005042:	4293      	cmp	r3, r2
 8005044:	d128      	bne.n	8005098 <setAddrWindow+0xb8>
 8005046:	4b6f      	ldr	r3, [pc, #444]	; (8005204 <setAddrWindow+0x224>)
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	f003 0301 	and.w	r3, r3, #1
 800504e:	2b00      	cmp	r3, #0
 8005050:	d022      	beq.n	8005098 <setAddrWindow+0xb8>
		int16_t dx = x1 - x, dy = y1 - y;
 8005052:	887a      	ldrh	r2, [r7, #2]
 8005054:	88fb      	ldrh	r3, [r7, #6]
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	b29b      	uxth	r3, r3
 800505a:	81fb      	strh	r3, [r7, #14]
 800505c:	883a      	ldrh	r2, [r7, #0]
 800505e:	88bb      	ldrh	r3, [r7, #4]
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	b29b      	uxth	r3, r3
 8005064:	81bb      	strh	r3, [r7, #12]
		if (dy == 0) { y1++; }
 8005066:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d106      	bne.n	800507c <setAddrWindow+0x9c>
 800506e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005072:	b29b      	uxth	r3, r3
 8005074:	3301      	adds	r3, #1
 8005076:	b29b      	uxth	r3, r3
 8005078:	803b      	strh	r3, [r7, #0]
 800507a:	e00d      	b.n	8005098 <setAddrWindow+0xb8>
		else if (dx == 0) { x1 += dy; y1 -= dy; }
 800507c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d109      	bne.n	8005098 <setAddrWindow+0xb8>
 8005084:	887a      	ldrh	r2, [r7, #2]
 8005086:	89bb      	ldrh	r3, [r7, #12]
 8005088:	4413      	add	r3, r2
 800508a:	b29b      	uxth	r3, r3
 800508c:	807b      	strh	r3, [r7, #2]
 800508e:	883a      	ldrh	r2, [r7, #0]
 8005090:	89bb      	ldrh	r3, [r7, #12]
 8005092:	1ad3      	subs	r3, r2, r3
 8005094:	b29b      	uxth	r3, r3
 8005096:	803b      	strh	r3, [r7, #0]
   }
#endif
   if (_lcd_capable & MIPI_DCS_REV1) {
 8005098:	4b5b      	ldr	r3, [pc, #364]	; (8005208 <setAddrWindow+0x228>)
 800509a:	881b      	ldrh	r3, [r3, #0]
 800509c:	f003 0301 	and.w	r3, r3, #1
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d054      	beq.n	800514e <setAddrWindow+0x16e>
       WriteCmdParam4(_SC, x >> 8, x, x1 >> 8, x1);   //Start column instead of _MC
 80050a4:	4b59      	ldr	r3, [pc, #356]	; (800520c <setAddrWindow+0x22c>)
 80050a6:	881b      	ldrh	r3, [r3, #0]
 80050a8:	b2d8      	uxtb	r0, r3
 80050aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80050ae:	121b      	asrs	r3, r3, #8
 80050b0:	b21b      	sxth	r3, r3
 80050b2:	b2d9      	uxtb	r1, r3
 80050b4:	88fb      	ldrh	r3, [r7, #6]
 80050b6:	b2da      	uxtb	r2, r3
 80050b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80050bc:	121b      	asrs	r3, r3, #8
 80050be:	b21b      	sxth	r3, r3
 80050c0:	b2dc      	uxtb	r4, r3
 80050c2:	887b      	ldrh	r3, [r7, #2]
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	9300      	str	r3, [sp, #0]
 80050c8:	4623      	mov	r3, r4
 80050ca:	f7fd fe3d 	bl	8002d48 <WriteCmdParam4>
       WriteCmdParam4(_SP, y >> 8, y, y1 >> 8, y1);   //
 80050ce:	4b50      	ldr	r3, [pc, #320]	; (8005210 <setAddrWindow+0x230>)
 80050d0:	881b      	ldrh	r3, [r3, #0]
 80050d2:	b2d8      	uxtb	r0, r3
 80050d4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80050d8:	121b      	asrs	r3, r3, #8
 80050da:	b21b      	sxth	r3, r3
 80050dc:	b2d9      	uxtb	r1, r3
 80050de:	88bb      	ldrh	r3, [r7, #4]
 80050e0:	b2da      	uxtb	r2, r3
 80050e2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80050e6:	121b      	asrs	r3, r3, #8
 80050e8:	b21b      	sxth	r3, r3
 80050ea:	b2dc      	uxtb	r4, r3
 80050ec:	883b      	ldrh	r3, [r7, #0]
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	9300      	str	r3, [sp, #0]
 80050f2:	4623      	mov	r3, r4
 80050f4:	f7fd fe28 	bl	8002d48 <WriteCmdParam4>
       if (is8347 && _lcd_ID == 0x0065) {             //HX8352-B has separate _MC, _SC
 80050f8:	4b46      	ldr	r3, [pc, #280]	; (8005214 <setAddrWindow+0x234>)
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d07b      	beq.n	80051f8 <setAddrWindow+0x218>
 8005100:	4b3f      	ldr	r3, [pc, #252]	; (8005200 <setAddrWindow+0x220>)
 8005102:	881b      	ldrh	r3, [r3, #0]
 8005104:	2b65      	cmp	r3, #101	; 0x65
 8005106:	d177      	bne.n	80051f8 <setAddrWindow+0x218>
           uint8_t d[2];
           d[0] = x >> 8; d[1] = x;
 8005108:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800510c:	121b      	asrs	r3, r3, #8
 800510e:	b21b      	sxth	r3, r3
 8005110:	b2db      	uxtb	r3, r3
 8005112:	723b      	strb	r3, [r7, #8]
 8005114:	88fb      	ldrh	r3, [r7, #6]
 8005116:	b2db      	uxtb	r3, r3
 8005118:	727b      	strb	r3, [r7, #9]
           WriteCmdParamN(_MC, 2, d);                 //allows !MV_AXIS to work
 800511a:	4b3f      	ldr	r3, [pc, #252]	; (8005218 <setAddrWindow+0x238>)
 800511c:	881b      	ldrh	r3, [r3, #0]
 800511e:	f107 0208 	add.w	r2, r7, #8
 8005122:	2102      	movs	r1, #2
 8005124:	4618      	mov	r0, r3
 8005126:	f7fd fc41 	bl	80029ac <WriteCmdParamN>
           d[0] = y >> 8; d[1] = y;
 800512a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800512e:	121b      	asrs	r3, r3, #8
 8005130:	b21b      	sxth	r3, r3
 8005132:	b2db      	uxtb	r3, r3
 8005134:	723b      	strb	r3, [r7, #8]
 8005136:	88bb      	ldrh	r3, [r7, #4]
 8005138:	b2db      	uxtb	r3, r3
 800513a:	727b      	strb	r3, [r7, #9]
           WriteCmdParamN(_MP, 2, d);
 800513c:	4b37      	ldr	r3, [pc, #220]	; (800521c <setAddrWindow+0x23c>)
 800513e:	881b      	ldrh	r3, [r3, #0]
 8005140:	f107 0208 	add.w	r2, r7, #8
 8005144:	2102      	movs	r1, #2
 8005146:	4618      	mov	r0, r3
 8005148:	f7fd fc30 	bl	80029ac <WriteCmdParamN>
           WriteCmdData(_SP, y);
           WriteCmdData(_EC, x1);
           WriteCmdData(_EP, y1);
       }
   }
}
 800514c:	e054      	b.n	80051f8 <setAddrWindow+0x218>
       WriteCmdData(_MC, x);
 800514e:	4b32      	ldr	r3, [pc, #200]	; (8005218 <setAddrWindow+0x238>)
 8005150:	881b      	ldrh	r3, [r3, #0]
 8005152:	88fa      	ldrh	r2, [r7, #6]
 8005154:	4611      	mov	r1, r2
 8005156:	4618      	mov	r0, r3
 8005158:	f7fd f951 	bl	80023fe <WriteCmdData>
       WriteCmdData(_MP, y);
 800515c:	4b2f      	ldr	r3, [pc, #188]	; (800521c <setAddrWindow+0x23c>)
 800515e:	881b      	ldrh	r3, [r3, #0]
 8005160:	88ba      	ldrh	r2, [r7, #4]
 8005162:	4611      	mov	r1, r2
 8005164:	4618      	mov	r0, r3
 8005166:	f7fd f94a 	bl	80023fe <WriteCmdData>
       if (!(x == x1 && y == y1)) {  //only need MC,MP for drawPixel
 800516a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800516e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005172:	429a      	cmp	r2, r3
 8005174:	d105      	bne.n	8005182 <setAddrWindow+0x1a2>
 8005176:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800517a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800517e:	429a      	cmp	r2, r3
 8005180:	d03a      	beq.n	80051f8 <setAddrWindow+0x218>
           if (_lcd_capable & XSA_XEA_16BIT) {
 8005182:	4b21      	ldr	r3, [pc, #132]	; (8005208 <setAddrWindow+0x228>)
 8005184:	881b      	ldrh	r3, [r3, #0]
 8005186:	f003 0320 	and.w	r3, r3, #32
 800518a:	2b00      	cmp	r3, #0
 800518c:	d018      	beq.n	80051c0 <setAddrWindow+0x1e0>
               if (rotation & 1)
 800518e:	4b1d      	ldr	r3, [pc, #116]	; (8005204 <setAddrWindow+0x224>)
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	f003 0301 	and.w	r3, r3, #1
 8005196:	2b00      	cmp	r3, #0
 8005198:	d009      	beq.n	80051ae <setAddrWindow+0x1ce>
                   y1 = y = (y1 << 8) | y;
 800519a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800519e:	021b      	lsls	r3, r3, #8
 80051a0:	b21a      	sxth	r2, r3
 80051a2:	88bb      	ldrh	r3, [r7, #4]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	80bb      	strh	r3, [r7, #4]
 80051a8:	88bb      	ldrh	r3, [r7, #4]
 80051aa:	803b      	strh	r3, [r7, #0]
 80051ac:	e008      	b.n	80051c0 <setAddrWindow+0x1e0>
                   x1 = x = (x1 << 8) | x;
 80051ae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80051b2:	021b      	lsls	r3, r3, #8
 80051b4:	b21a      	sxth	r2, r3
 80051b6:	88fb      	ldrh	r3, [r7, #6]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	80fb      	strh	r3, [r7, #6]
 80051bc:	88fb      	ldrh	r3, [r7, #6]
 80051be:	807b      	strh	r3, [r7, #2]
           WriteCmdData(_SC, x);
 80051c0:	4b12      	ldr	r3, [pc, #72]	; (800520c <setAddrWindow+0x22c>)
 80051c2:	881b      	ldrh	r3, [r3, #0]
 80051c4:	88fa      	ldrh	r2, [r7, #6]
 80051c6:	4611      	mov	r1, r2
 80051c8:	4618      	mov	r0, r3
 80051ca:	f7fd f918 	bl	80023fe <WriteCmdData>
           WriteCmdData(_SP, y);
 80051ce:	4b10      	ldr	r3, [pc, #64]	; (8005210 <setAddrWindow+0x230>)
 80051d0:	881b      	ldrh	r3, [r3, #0]
 80051d2:	88ba      	ldrh	r2, [r7, #4]
 80051d4:	4611      	mov	r1, r2
 80051d6:	4618      	mov	r0, r3
 80051d8:	f7fd f911 	bl	80023fe <WriteCmdData>
           WriteCmdData(_EC, x1);
 80051dc:	4b10      	ldr	r3, [pc, #64]	; (8005220 <setAddrWindow+0x240>)
 80051de:	881b      	ldrh	r3, [r3, #0]
 80051e0:	887a      	ldrh	r2, [r7, #2]
 80051e2:	4611      	mov	r1, r2
 80051e4:	4618      	mov	r0, r3
 80051e6:	f7fd f90a 	bl	80023fe <WriteCmdData>
           WriteCmdData(_EP, y1);
 80051ea:	4b0e      	ldr	r3, [pc, #56]	; (8005224 <setAddrWindow+0x244>)
 80051ec:	881b      	ldrh	r3, [r3, #0]
 80051ee:	883a      	ldrh	r2, [r7, #0]
 80051f0:	4611      	mov	r1, r2
 80051f2:	4618      	mov	r0, r3
 80051f4:	f7fd f903 	bl	80023fe <WriteCmdData>
}
 80051f8:	bf00      	nop
 80051fa:	3714      	adds	r7, #20
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd90      	pop	{r4, r7, pc}
 8005200:	200003ce 	.word	0x200003ce
 8005204:	2000021e 	.word	0x2000021e
 8005208:	200003c0 	.word	0x200003c0
 800520c:	200003ca 	.word	0x200003ca
 8005210:	200003c2 	.word	0x200003c2
 8005214:	20000219 	.word	0x20000219
 8005218:	200003c8 	.word	0x200003c8
 800521c:	200003c6 	.word	0x200003c6
 8005220:	200003d2 	.word	0x200003d2
 8005224:	200003cc 	.word	0x200003cc

08005228 <vertScroll>:


void vertScroll(int16_t top, int16_t scrollines, int16_t offset)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b086      	sub	sp, #24
 800522c:	af00      	add	r7, sp, #0
 800522e:	4603      	mov	r3, r0
 8005230:	80fb      	strh	r3, [r7, #6]
 8005232:	460b      	mov	r3, r1
 8005234:	80bb      	strh	r3, [r7, #4]
 8005236:	4613      	mov	r3, r2
 8005238:	807b      	strh	r3, [r7, #2]
#if defined(OFFSET_9327)
	if (_lcd_ID == 0x9327) {
 800523a:	4b89      	ldr	r3, [pc, #548]	; (8005460 <vertScroll+0x238>)
 800523c:	881b      	ldrh	r3, [r3, #0]
 800523e:	f249 3227 	movw	r2, #37671	; 0x9327
 8005242:	4293      	cmp	r3, r2
 8005244:	d10b      	bne.n	800525e <vertScroll+0x36>
	    if (rotation == 2 || rotation == 3) top += OFFSET_9327;
 8005246:	4b87      	ldr	r3, [pc, #540]	; (8005464 <vertScroll+0x23c>)
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	2b02      	cmp	r3, #2
 800524c:	d003      	beq.n	8005256 <vertScroll+0x2e>
 800524e:	4b85      	ldr	r3, [pc, #532]	; (8005464 <vertScroll+0x23c>)
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	2b03      	cmp	r3, #3
 8005254:	d103      	bne.n	800525e <vertScroll+0x36>
 8005256:	88fb      	ldrh	r3, [r7, #6]
 8005258:	3320      	adds	r3, #32
 800525a:	b29b      	uxth	r3, r3
 800525c:	80fb      	strh	r3, [r7, #6]
    }
#endif
    int16_t bfa = HEIGHT - top - scrollines;  // bottom fixed area
 800525e:	88fa      	ldrh	r2, [r7, #6]
 8005260:	88bb      	ldrh	r3, [r7, #4]
 8005262:	4413      	add	r3, r2
 8005264:	b29b      	uxth	r3, r3
 8005266:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 800526a:	b29b      	uxth	r3, r3
 800526c:	82fb      	strh	r3, [r7, #22]
    int16_t vsp;
    int16_t sea = top;
 800526e:	88fb      	ldrh	r3, [r7, #6]
 8005270:	827b      	strh	r3, [r7, #18]
	if (_lcd_ID == 0x9327) bfa += 32;
 8005272:	4b7b      	ldr	r3, [pc, #492]	; (8005460 <vertScroll+0x238>)
 8005274:	881b      	ldrh	r3, [r3, #0]
 8005276:	f249 3227 	movw	r2, #37671	; 0x9327
 800527a:	4293      	cmp	r3, r2
 800527c:	d103      	bne.n	8005286 <vertScroll+0x5e>
 800527e:	8afb      	ldrh	r3, [r7, #22]
 8005280:	3320      	adds	r3, #32
 8005282:	b29b      	uxth	r3, r3
 8005284:	82fb      	strh	r3, [r7, #22]
    if (offset <= -scrollines || offset >= scrollines) offset = 0; //valid scroll
 8005286:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800528a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800528e:	425b      	negs	r3, r3
 8005290:	429a      	cmp	r2, r3
 8005292:	dd05      	ble.n	80052a0 <vertScroll+0x78>
 8005294:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005298:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800529c:	429a      	cmp	r2, r3
 800529e:	db01      	blt.n	80052a4 <vertScroll+0x7c>
 80052a0:	2300      	movs	r3, #0
 80052a2:	807b      	strh	r3, [r7, #2]
	vsp = top + offset; // vertical start position
 80052a4:	88fa      	ldrh	r2, [r7, #6]
 80052a6:	887b      	ldrh	r3, [r7, #2]
 80052a8:	4413      	add	r3, r2
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	82bb      	strh	r3, [r7, #20]
    if (offset < 0)
 80052ae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	da04      	bge.n	80052c0 <vertScroll+0x98>
        vsp += scrollines;          //keep in unsigned range
 80052b6:	8aba      	ldrh	r2, [r7, #20]
 80052b8:	88bb      	ldrh	r3, [r7, #4]
 80052ba:	4413      	add	r3, r2
 80052bc:	b29b      	uxth	r3, r3
 80052be:	82bb      	strh	r3, [r7, #20]
    sea = top + scrollines - 1;
 80052c0:	88fa      	ldrh	r2, [r7, #6]
 80052c2:	88bb      	ldrh	r3, [r7, #4]
 80052c4:	4413      	add	r3, r2
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	3b01      	subs	r3, #1
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	827b      	strh	r3, [r7, #18]
    if (_lcd_capable & MIPI_DCS_REV1) {
 80052ce:	4b66      	ldr	r3, [pc, #408]	; (8005468 <vertScroll+0x240>)
 80052d0:	881b      	ldrh	r3, [r3, #0]
 80052d2:	f003 0301 	and.w	r3, r3, #1
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d071      	beq.n	80053be <vertScroll+0x196>
        uint8_t d[6];           // for multi-byte parameters
        d[0] = top >> 8;        //TFA
 80052da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052de:	121b      	asrs	r3, r3, #8
 80052e0:	b21b      	sxth	r3, r3
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	733b      	strb	r3, [r7, #12]
        d[1] = top;
 80052e6:	88fb      	ldrh	r3, [r7, #6]
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	737b      	strb	r3, [r7, #13]
        d[2] = scrollines >> 8; //VSA
 80052ec:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80052f0:	121b      	asrs	r3, r3, #8
 80052f2:	b21b      	sxth	r3, r3
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	73bb      	strb	r3, [r7, #14]
        d[3] = scrollines;
 80052f8:	88bb      	ldrh	r3, [r7, #4]
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	73fb      	strb	r3, [r7, #15]
        d[4] = bfa >> 8;        //BFA
 80052fe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005302:	121b      	asrs	r3, r3, #8
 8005304:	b21b      	sxth	r3, r3
 8005306:	b2db      	uxtb	r3, r3
 8005308:	743b      	strb	r3, [r7, #16]
        d[5] = bfa;
 800530a:	8afb      	ldrh	r3, [r7, #22]
 800530c:	b2db      	uxtb	r3, r3
 800530e:	747b      	strb	r3, [r7, #17]
        WriteCmdParamN(is8347 ? 0x0E : 0x33, 6, d);
 8005310:	4b56      	ldr	r3, [pc, #344]	; (800546c <vertScroll+0x244>)
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d001      	beq.n	800531c <vertScroll+0xf4>
 8005318:	230e      	movs	r3, #14
 800531a:	e000      	b.n	800531e <vertScroll+0xf6>
 800531c:	2333      	movs	r3, #51	; 0x33
 800531e:	f107 020c 	add.w	r2, r7, #12
 8005322:	2106      	movs	r1, #6
 8005324:	4618      	mov	r0, r3
 8005326:	f7fd fb41 	bl	80029ac <WriteCmdParamN>
//        if (offset == 0 && rotation > 1) vsp = top + scrollines;   //make non-valid
		d[0] = vsp >> 8;        //VSP
 800532a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800532e:	121b      	asrs	r3, r3, #8
 8005330:	b21b      	sxth	r3, r3
 8005332:	b2db      	uxtb	r3, r3
 8005334:	733b      	strb	r3, [r7, #12]
        d[1] = vsp;
 8005336:	8abb      	ldrh	r3, [r7, #20]
 8005338:	b2db      	uxtb	r3, r3
 800533a:	737b      	strb	r3, [r7, #13]
        WriteCmdParamN(is8347 ? 0x14 : 0x37, 2, d);
 800533c:	4b4b      	ldr	r3, [pc, #300]	; (800546c <vertScroll+0x244>)
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d001      	beq.n	8005348 <vertScroll+0x120>
 8005344:	2314      	movs	r3, #20
 8005346:	e000      	b.n	800534a <vertScroll+0x122>
 8005348:	2337      	movs	r3, #55	; 0x37
 800534a:	f107 020c 	add.w	r2, r7, #12
 800534e:	2102      	movs	r1, #2
 8005350:	4618      	mov	r0, r3
 8005352:	f7fd fb2b 	bl	80029ac <WriteCmdParamN>
		if (is8347) {
 8005356:	4b45      	ldr	r3, [pc, #276]	; (800546c <vertScroll+0x244>)
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d01f      	beq.n	800539e <vertScroll+0x176>
		    d[0] = (offset != 0) ? (_lcd_ID == 0x8347 ? 0x02 : 0x08) : 0;
 800535e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d009      	beq.n	800537a <vertScroll+0x152>
 8005366:	4b3e      	ldr	r3, [pc, #248]	; (8005460 <vertScroll+0x238>)
 8005368:	881b      	ldrh	r3, [r3, #0]
 800536a:	f248 3247 	movw	r2, #33607	; 0x8347
 800536e:	4293      	cmp	r3, r2
 8005370:	d101      	bne.n	8005376 <vertScroll+0x14e>
 8005372:	2302      	movs	r3, #2
 8005374:	e002      	b.n	800537c <vertScroll+0x154>
 8005376:	2308      	movs	r3, #8
 8005378:	e000      	b.n	800537c <vertScroll+0x154>
 800537a:	2300      	movs	r3, #0
 800537c:	733b      	strb	r3, [r7, #12]
			WriteCmdParamN(_lcd_ID == 0x8347 ? 0x18 : 0x01, 1, d);  //HX8347-D
 800537e:	4b38      	ldr	r3, [pc, #224]	; (8005460 <vertScroll+0x238>)
 8005380:	881b      	ldrh	r3, [r3, #0]
 8005382:	f248 3247 	movw	r2, #33607	; 0x8347
 8005386:	4293      	cmp	r3, r2
 8005388:	d101      	bne.n	800538e <vertScroll+0x166>
 800538a:	2318      	movs	r3, #24
 800538c:	e000      	b.n	8005390 <vertScroll+0x168>
 800538e:	2301      	movs	r3, #1
 8005390:	f107 020c 	add.w	r2, r7, #12
 8005394:	2101      	movs	r1, #1
 8005396:	4618      	mov	r0, r3
 8005398:	f7fd fb08 	bl	80029ac <WriteCmdParamN>
 800539c:	e05d      	b.n	800545a <vertScroll+0x232>
		} else if (offset == 0 && (_lcd_capable & MIPI_DCS_REV1)) {
 800539e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d159      	bne.n	800545a <vertScroll+0x232>
 80053a6:	4b30      	ldr	r3, [pc, #192]	; (8005468 <vertScroll+0x240>)
 80053a8:	881b      	ldrh	r3, [r3, #0]
 80053aa:	f003 0301 	and.w	r3, r3, #1
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d053      	beq.n	800545a <vertScroll+0x232>
			WriteCmdParamN(0x13, 0, NULL);    //NORMAL i.e. disable scroll
 80053b2:	2200      	movs	r2, #0
 80053b4:	2100      	movs	r1, #0
 80053b6:	2013      	movs	r0, #19
 80053b8:	f7fd faf8 	bl	80029ac <WriteCmdParamN>
 80053bc:	e04d      	b.n	800545a <vertScroll+0x232>
		}
		return;
    }
    // cope with 9320 style variants:
    switch (_lcd_ID) {
 80053be:	4b28      	ldr	r3, [pc, #160]	; (8005460 <vertScroll+0x238>)
 80053c0:	881b      	ldrh	r3, [r3, #0]
 80053c2:	f24b 5209 	movw	r2, #46345	; 0xb509
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d027      	beq.n	800541a <vertScroll+0x1f2>
 80053ca:	f24b 5209 	movw	r2, #46345	; 0xb509
 80053ce:	4293      	cmp	r3, r2
 80053d0:	dc34      	bgt.n	800543c <vertScroll+0x214>
 80053d2:	f249 3226 	movw	r2, #37670	; 0x9326
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d01f      	beq.n	800541a <vertScroll+0x1f2>
 80053da:	f249 3226 	movw	r2, #37670	; 0x9326
 80053de:	4293      	cmp	r3, r2
 80053e0:	dc2c      	bgt.n	800543c <vertScroll+0x214>
 80053e2:	f247 7293 	movw	r2, #30611	; 0x7793
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d017      	beq.n	800541a <vertScroll+0x1f2>
 80053ea:	f247 7293 	movw	r2, #30611	; 0x7793
 80053ee:	4293      	cmp	r3, r2
 80053f0:	dc24      	bgt.n	800543c <vertScroll+0x214>
 80053f2:	f245 4220 	movw	r2, #21536	; 0x5420
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d00f      	beq.n	800541a <vertScroll+0x1f2>
 80053fa:	f247 7283 	movw	r2, #30595	; 0x7783
 80053fe:	4293      	cmp	r3, r2
 8005400:	d11c      	bne.n	800543c <vertScroll+0x214>
    case 0x7783:
        WriteCmdData(0x61, _lcd_rev);   //!NDL, !VLE, REV
 8005402:	4b1b      	ldr	r3, [pc, #108]	; (8005470 <vertScroll+0x248>)
 8005404:	881b      	ldrh	r3, [r3, #0]
 8005406:	4619      	mov	r1, r3
 8005408:	2061      	movs	r0, #97	; 0x61
 800540a:	f7fc fff8 	bl	80023fe <WriteCmdData>
        WriteCmdData(0x6A, vsp);        //VL#
 800540e:	8abb      	ldrh	r3, [r7, #20]
 8005410:	4619      	mov	r1, r3
 8005412:	206a      	movs	r0, #106	; 0x6a
 8005414:	f7fc fff3 	bl	80023fe <WriteCmdData>
        break;
 8005418:	e01f      	b.n	800545a <vertScroll+0x232>
#endif
	case 0x5420:
    case 0x7793:
	case 0x9326:
	case 0xB509:
        WriteCmdData(0x401, (1 << 1) | _lcd_rev);       //VLE, REV
 800541a:	4b15      	ldr	r3, [pc, #84]	; (8005470 <vertScroll+0x248>)
 800541c:	881b      	ldrh	r3, [r3, #0]
 800541e:	f043 0302 	orr.w	r3, r3, #2
 8005422:	b29b      	uxth	r3, r3
 8005424:	4619      	mov	r1, r3
 8005426:	f240 4001 	movw	r0, #1025	; 0x401
 800542a:	f7fc ffe8 	bl	80023fe <WriteCmdData>
        WriteCmdData(0x404, vsp);       //VL#
 800542e:	8abb      	ldrh	r3, [r7, #20]
 8005430:	4619      	mov	r1, r3
 8005432:	f240 4004 	movw	r0, #1028	; 0x404
 8005436:	f7fc ffe2 	bl	80023fe <WriteCmdData>
        break;
 800543a:	e00e      	b.n	800545a <vertScroll+0x232>
    default:
        // 0x6809, 0x9320, 0x9325, 0x9335, 0xB505 can only scroll whole screen
        WriteCmdData(0x61, (1 << 1) | _lcd_rev);        //!NDL, VLE, REV
 800543c:	4b0c      	ldr	r3, [pc, #48]	; (8005470 <vertScroll+0x248>)
 800543e:	881b      	ldrh	r3, [r3, #0]
 8005440:	f043 0302 	orr.w	r3, r3, #2
 8005444:	b29b      	uxth	r3, r3
 8005446:	4619      	mov	r1, r3
 8005448:	2061      	movs	r0, #97	; 0x61
 800544a:	f7fc ffd8 	bl	80023fe <WriteCmdData>
        WriteCmdData(0x6A, vsp);        //VL#
 800544e:	8abb      	ldrh	r3, [r7, #20]
 8005450:	4619      	mov	r1, r3
 8005452:	206a      	movs	r0, #106	; 0x6a
 8005454:	f7fc ffd3 	bl	80023fe <WriteCmdData>
        break;
 8005458:	bf00      	nop
    }
}
 800545a:	3718      	adds	r7, #24
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}
 8005460:	200003ce 	.word	0x200003ce
 8005464:	2000021e 	.word	0x2000021e
 8005468:	200003c0 	.word	0x200003c0
 800546c:	20000219 	.word	0x20000219
 8005470:	200003c4 	.word	0x200003c4

08005474 <fillScreen>:
    pushColors_any(_MW, (uint8_t *)block, n, first, bigend ? 3 : 1);
}


void fillScreen(uint16_t color)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af02      	add	r7, sp, #8
 800547a:	4603      	mov	r3, r0
 800547c:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 800547e:	4b08      	ldr	r3, [pc, #32]	; (80054a0 <fillScreen+0x2c>)
 8005480:	881b      	ldrh	r3, [r3, #0]
 8005482:	b21a      	sxth	r2, r3
 8005484:	4b07      	ldr	r3, [pc, #28]	; (80054a4 <fillScreen+0x30>)
 8005486:	881b      	ldrh	r3, [r3, #0]
 8005488:	b219      	sxth	r1, r3
 800548a:	88fb      	ldrh	r3, [r7, #6]
 800548c:	9300      	str	r3, [sp, #0]
 800548e:	460b      	mov	r3, r1
 8005490:	2100      	movs	r1, #0
 8005492:	2000      	movs	r0, #0
 8005494:	f000 facc 	bl	8005a30 <fillRect>
}
 8005498:	bf00      	nop
 800549a:	3708      	adds	r7, #8
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	20000010 	.word	0x20000010
 80054a4:	20000012 	.word	0x20000012

080054a8 <invertDisplay>:


void invertDisplay(uint8_t i)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	4603      	mov	r3, r0
 80054b0:	71fb      	strb	r3, [r7, #7]
    uint8_t val;
    _lcd_rev = ((_lcd_capable & REV_SCREEN) != 0) ^ i;
 80054b2:	4b4c      	ldr	r3, [pc, #304]	; (80055e4 <invertDisplay+0x13c>)
 80054b4:	881b      	ldrh	r3, [r3, #0]
 80054b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	bf14      	ite	ne
 80054be:	2301      	movne	r3, #1
 80054c0:	2300      	moveq	r3, #0
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	b21a      	sxth	r2, r3
 80054c6:	79fb      	ldrb	r3, [r7, #7]
 80054c8:	b21b      	sxth	r3, r3
 80054ca:	4053      	eors	r3, r2
 80054cc:	b21b      	sxth	r3, r3
 80054ce:	b29a      	uxth	r2, r3
 80054d0:	4b45      	ldr	r3, [pc, #276]	; (80055e8 <invertDisplay+0x140>)
 80054d2:	801a      	strh	r2, [r3, #0]
    if (_lcd_capable & MIPI_DCS_REV1) {
 80054d4:	4b43      	ldr	r3, [pc, #268]	; (80055e4 <invertDisplay+0x13c>)
 80054d6:	881b      	ldrh	r3, [r3, #0]
 80054d8:	f003 0301 	and.w	r3, r3, #1
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d035      	beq.n	800554c <invertDisplay+0xa4>
        if (is8347) {
 80054e0:	4b42      	ldr	r3, [pc, #264]	; (80055ec <invertDisplay+0x144>)
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d024      	beq.n	8005532 <invertDisplay+0x8a>
            // HX8347D: 0x36 Panel Characteristic. REV_Panel
            // HX8347A: 0x36 is Display Control 10
            if (_lcd_ID == 0x8347 || _lcd_ID == 0x5252) // HX8347-A, HX5352-A
 80054e8:	4b41      	ldr	r3, [pc, #260]	; (80055f0 <invertDisplay+0x148>)
 80054ea:	881b      	ldrh	r3, [r3, #0]
 80054ec:	f248 3247 	movw	r2, #33607	; 0x8347
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d005      	beq.n	8005500 <invertDisplay+0x58>
 80054f4:	4b3e      	ldr	r3, [pc, #248]	; (80055f0 <invertDisplay+0x148>)
 80054f6:	881b      	ldrh	r3, [r3, #0]
 80054f8:	f245 2252 	movw	r2, #21074	; 0x5252
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d108      	bne.n	8005512 <invertDisplay+0x6a>
			    val = _lcd_rev ? 6 : 2;       //INVON id bit#2,  NORON=bit#1
 8005500:	4b39      	ldr	r3, [pc, #228]	; (80055e8 <invertDisplay+0x140>)
 8005502:	881b      	ldrh	r3, [r3, #0]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d001      	beq.n	800550c <invertDisplay+0x64>
 8005508:	2306      	movs	r3, #6
 800550a:	e000      	b.n	800550e <invertDisplay+0x66>
 800550c:	2302      	movs	r3, #2
 800550e:	73fb      	strb	r3, [r7, #15]
 8005510:	e007      	b.n	8005522 <invertDisplay+0x7a>
            else val = _lcd_rev ? 8 : 10;     //HX8347-D, G, I: SCROLLON=bit3, INVON=bit1
 8005512:	4b35      	ldr	r3, [pc, #212]	; (80055e8 <invertDisplay+0x140>)
 8005514:	881b      	ldrh	r3, [r3, #0]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d001      	beq.n	800551e <invertDisplay+0x76>
 800551a:	2308      	movs	r3, #8
 800551c:	e000      	b.n	8005520 <invertDisplay+0x78>
 800551e:	230a      	movs	r3, #10
 8005520:	73fb      	strb	r3, [r7, #15]
            // HX8347: 0x01 Display Mode has diff bit mapping for A, D
            WriteCmdParamN(0x01, 1, &val);
 8005522:	f107 030f 	add.w	r3, r7, #15
 8005526:	461a      	mov	r2, r3
 8005528:	2101      	movs	r1, #1
 800552a:	2001      	movs	r0, #1
 800552c:	f7fd fa3e 	bl	80029ac <WriteCmdParamN>
        } else
            WriteCmdParamN(_lcd_rev ? 0x21 : 0x20, 0, NULL);
        return;
 8005530:	e055      	b.n	80055de <invertDisplay+0x136>
            WriteCmdParamN(_lcd_rev ? 0x21 : 0x20, 0, NULL);
 8005532:	4b2d      	ldr	r3, [pc, #180]	; (80055e8 <invertDisplay+0x140>)
 8005534:	881b      	ldrh	r3, [r3, #0]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d001      	beq.n	800553e <invertDisplay+0x96>
 800553a:	2321      	movs	r3, #33	; 0x21
 800553c:	e000      	b.n	8005540 <invertDisplay+0x98>
 800553e:	2320      	movs	r3, #32
 8005540:	2200      	movs	r2, #0
 8005542:	2100      	movs	r1, #0
 8005544:	4618      	mov	r0, r3
 8005546:	f7fd fa31 	bl	80029ac <WriteCmdParamN>
 800554a:	e048      	b.n	80055de <invertDisplay+0x136>
    }
    // cope with 9320 style variants:
    switch (_lcd_ID) {
 800554c:	4b28      	ldr	r3, [pc, #160]	; (80055f0 <invertDisplay+0x148>)
 800554e:	881b      	ldrh	r3, [r3, #0]
 8005550:	f24b 5209 	movw	r2, #46345	; 0xb509
 8005554:	4293      	cmp	r3, r2
 8005556:	d030      	beq.n	80055ba <invertDisplay+0x112>
 8005558:	f24b 5209 	movw	r2, #46345	; 0xb509
 800555c:	4293      	cmp	r3, r2
 800555e:	dc37      	bgt.n	80055d0 <invertDisplay+0x128>
 8005560:	f249 3226 	movw	r2, #37670	; 0x9326
 8005564:	4293      	cmp	r3, r2
 8005566:	d028      	beq.n	80055ba <invertDisplay+0x112>
 8005568:	f249 3226 	movw	r2, #37670	; 0x9326
 800556c:	4293      	cmp	r3, r2
 800556e:	dc2f      	bgt.n	80055d0 <invertDisplay+0x128>
 8005570:	f249 2225 	movw	r2, #37413	; 0x9225
 8005574:	4293      	cmp	r3, r2
 8005576:	d013      	beq.n	80055a0 <invertDisplay+0xf8>
 8005578:	f249 2225 	movw	r2, #37413	; 0x9225
 800557c:	4293      	cmp	r3, r2
 800557e:	dc27      	bgt.n	80055d0 <invertDisplay+0x128>
 8005580:	f247 7293 	movw	r2, #30611	; 0x7793
 8005584:	4293      	cmp	r3, r2
 8005586:	d018      	beq.n	80055ba <invertDisplay+0x112>
 8005588:	f247 7293 	movw	r2, #30611	; 0x7793
 800558c:	4293      	cmp	r3, r2
 800558e:	dc1f      	bgt.n	80055d0 <invertDisplay+0x128>
 8005590:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8005594:	d004      	beq.n	80055a0 <invertDisplay+0xf8>
 8005596:	f245 4220 	movw	r2, #21536	; 0x5420
 800559a:	4293      	cmp	r3, r2
 800559c:	d00d      	beq.n	80055ba <invertDisplay+0x112>
 800559e:	e017      	b.n	80055d0 <invertDisplay+0x128>
#ifdef SUPPORT_0139
    case 0x0139:
#endif
    case 0x9225:                                        //REV is in reg(0x07) like Samsung
    case 0x0154:
        WriteCmdData(0x07, 0x13 | (_lcd_rev << 2));     //.kbv kludge
 80055a0:	4b11      	ldr	r3, [pc, #68]	; (80055e8 <invertDisplay+0x140>)
 80055a2:	881b      	ldrh	r3, [r3, #0]
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	b21b      	sxth	r3, r3
 80055a8:	f043 0313 	orr.w	r3, r3, #19
 80055ac:	b21b      	sxth	r3, r3
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	4619      	mov	r1, r3
 80055b2:	2007      	movs	r0, #7
 80055b4:	f7fc ff23 	bl	80023fe <WriteCmdData>
        break;
 80055b8:	e011      	b.n	80055de <invertDisplay+0x136>
#endif
	case 0x5420:
    case 0x7793:
    case 0x9326:
	case 0xB509:
        WriteCmdData(0x401, (1 << 1) | _lcd_rev);       //.kbv kludge VLE
 80055ba:	4b0b      	ldr	r3, [pc, #44]	; (80055e8 <invertDisplay+0x140>)
 80055bc:	881b      	ldrh	r3, [r3, #0]
 80055be:	f043 0302 	orr.w	r3, r3, #2
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	4619      	mov	r1, r3
 80055c6:	f240 4001 	movw	r0, #1025	; 0x401
 80055ca:	f7fc ff18 	bl	80023fe <WriteCmdData>
        break;
 80055ce:	e006      	b.n	80055de <invertDisplay+0x136>
    default:
        WriteCmdData(0x61, _lcd_rev);
 80055d0:	4b05      	ldr	r3, [pc, #20]	; (80055e8 <invertDisplay+0x140>)
 80055d2:	881b      	ldrh	r3, [r3, #0]
 80055d4:	4619      	mov	r1, r3
 80055d6:	2061      	movs	r0, #97	; 0x61
 80055d8:	f7fc ff11 	bl	80023fe <WriteCmdData>
        break;
 80055dc:	bf00      	nop
    }
}
 80055de:	3710      	adds	r7, #16
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	200003c0 	.word	0x200003c0
 80055e8:	200003c4 	.word	0x200003c4
 80055ec:	20000219 	.word	0x20000219
 80055f0:	200003ce 	.word	0x200003ce

080055f4 <drawFastVLine>:


void  drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 80055f4:	b590      	push	{r4, r7, lr}
 80055f6:	b085      	sub	sp, #20
 80055f8:	af02      	add	r7, sp, #8
 80055fa:	4604      	mov	r4, r0
 80055fc:	4608      	mov	r0, r1
 80055fe:	4611      	mov	r1, r2
 8005600:	461a      	mov	r2, r3
 8005602:	4623      	mov	r3, r4
 8005604:	80fb      	strh	r3, [r7, #6]
 8005606:	4603      	mov	r3, r0
 8005608:	80bb      	strh	r3, [r7, #4]
 800560a:	460b      	mov	r3, r1
 800560c:	807b      	strh	r3, [r7, #2]
 800560e:	4613      	mov	r3, r2
 8005610:	803b      	strh	r3, [r7, #0]
	fillRect(x, y, 1, h, color);
 8005612:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005616:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800561a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800561e:	883b      	ldrh	r3, [r7, #0]
 8005620:	9300      	str	r3, [sp, #0]
 8005622:	4613      	mov	r3, r2
 8005624:	2201      	movs	r2, #1
 8005626:	f000 fa03 	bl	8005a30 <fillRect>
}
 800562a:	bf00      	nop
 800562c:	370c      	adds	r7, #12
 800562e:	46bd      	mov	sp, r7
 8005630:	bd90      	pop	{r4, r7, pc}

08005632 <writePixel>:
	fillRect(x, y, w, 1, color);
}


void writePixel(int16_t x, int16_t y, uint16_t color)
{
 8005632:	b580      	push	{r7, lr}
 8005634:	b082      	sub	sp, #8
 8005636:	af00      	add	r7, sp, #0
 8005638:	4603      	mov	r3, r0
 800563a:	80fb      	strh	r3, [r7, #6]
 800563c:	460b      	mov	r3, r1
 800563e:	80bb      	strh	r3, [r7, #4]
 8005640:	4613      	mov	r3, r2
 8005642:	807b      	strh	r3, [r7, #2]
    drawPixel(x, y, color);
 8005644:	887a      	ldrh	r2, [r7, #2]
 8005646:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800564a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800564e:	4618      	mov	r0, r3
 8005650:	f7ff fbc0 	bl	8004dd4 <drawPixel>
}
 8005654:	bf00      	nop
 8005656:	3708      	adds	r7, #8
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <drawCircle>:
    }
}


void drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 800565c:	b590      	push	{r4, r7, lr}
 800565e:	b087      	sub	sp, #28
 8005660:	af00      	add	r7, sp, #0
 8005662:	4604      	mov	r4, r0
 8005664:	4608      	mov	r0, r1
 8005666:	4611      	mov	r1, r2
 8005668:	461a      	mov	r2, r3
 800566a:	4623      	mov	r3, r4
 800566c:	80fb      	strh	r3, [r7, #6]
 800566e:	4603      	mov	r3, r0
 8005670:	80bb      	strh	r3, [r7, #4]
 8005672:	460b      	mov	r3, r1
 8005674:	807b      	strh	r3, [r7, #2]
 8005676:	4613      	mov	r3, r2
 8005678:	803b      	strh	r3, [r7, #0]
    int16_t f = 1 - r;
 800567a:	887b      	ldrh	r3, [r7, #2]
 800567c:	f1c3 0301 	rsb	r3, r3, #1
 8005680:	b29b      	uxth	r3, r3
 8005682:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8005684:	2301      	movs	r3, #1
 8005686:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 8005688:	887b      	ldrh	r3, [r7, #2]
 800568a:	461a      	mov	r2, r3
 800568c:	03d2      	lsls	r2, r2, #15
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	005b      	lsls	r3, r3, #1
 8005692:	b29b      	uxth	r3, r3
 8005694:	827b      	strh	r3, [r7, #18]
    int16_t x = 0;
 8005696:	2300      	movs	r3, #0
 8005698:	823b      	strh	r3, [r7, #16]
    int16_t y = r;
 800569a:	887b      	ldrh	r3, [r7, #2]
 800569c:	81fb      	strh	r3, [r7, #14]

    writePixel(x0  , y0+r, color);
 800569e:	88ba      	ldrh	r2, [r7, #4]
 80056a0:	887b      	ldrh	r3, [r7, #2]
 80056a2:	4413      	add	r3, r2
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	b219      	sxth	r1, r3
 80056a8:	883a      	ldrh	r2, [r7, #0]
 80056aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80056ae:	4618      	mov	r0, r3
 80056b0:	f7ff ffbf 	bl	8005632 <writePixel>
    writePixel(x0  , y0-r, color);
 80056b4:	88ba      	ldrh	r2, [r7, #4]
 80056b6:	887b      	ldrh	r3, [r7, #2]
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	b219      	sxth	r1, r3
 80056be:	883a      	ldrh	r2, [r7, #0]
 80056c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80056c4:	4618      	mov	r0, r3
 80056c6:	f7ff ffb4 	bl	8005632 <writePixel>
    writePixel(x0+r, y0  , color);
 80056ca:	88fa      	ldrh	r2, [r7, #6]
 80056cc:	887b      	ldrh	r3, [r7, #2]
 80056ce:	4413      	add	r3, r2
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	b21b      	sxth	r3, r3
 80056d4:	883a      	ldrh	r2, [r7, #0]
 80056d6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80056da:	4618      	mov	r0, r3
 80056dc:	f7ff ffa9 	bl	8005632 <writePixel>
    writePixel(x0-r, y0  , color);
 80056e0:	88fa      	ldrh	r2, [r7, #6]
 80056e2:	887b      	ldrh	r3, [r7, #2]
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	b21b      	sxth	r3, r3
 80056ea:	883a      	ldrh	r2, [r7, #0]
 80056ec:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80056f0:	4618      	mov	r0, r3
 80056f2:	f7ff ff9e 	bl	8005632 <writePixel>

    while (x<y) {
 80056f6:	e091      	b.n	800581c <drawCircle+0x1c0>
        if (f >= 0) {
 80056f8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	db0e      	blt.n	800571e <drawCircle+0xc2>
            y--;
 8005700:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005704:	b29b      	uxth	r3, r3
 8005706:	3b01      	subs	r3, #1
 8005708:	b29b      	uxth	r3, r3
 800570a:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 800570c:	8a7b      	ldrh	r3, [r7, #18]
 800570e:	3302      	adds	r3, #2
 8005710:	b29b      	uxth	r3, r3
 8005712:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 8005714:	8afa      	ldrh	r2, [r7, #22]
 8005716:	8a7b      	ldrh	r3, [r7, #18]
 8005718:	4413      	add	r3, r2
 800571a:	b29b      	uxth	r3, r3
 800571c:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 800571e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005722:	b29b      	uxth	r3, r3
 8005724:	3301      	adds	r3, #1
 8005726:	b29b      	uxth	r3, r3
 8005728:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 800572a:	8abb      	ldrh	r3, [r7, #20]
 800572c:	3302      	adds	r3, #2
 800572e:	b29b      	uxth	r3, r3
 8005730:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 8005732:	8afa      	ldrh	r2, [r7, #22]
 8005734:	8abb      	ldrh	r3, [r7, #20]
 8005736:	4413      	add	r3, r2
 8005738:	b29b      	uxth	r3, r3
 800573a:	82fb      	strh	r3, [r7, #22]

        writePixel(x0 + x, y0 + y, color);
 800573c:	88fa      	ldrh	r2, [r7, #6]
 800573e:	8a3b      	ldrh	r3, [r7, #16]
 8005740:	4413      	add	r3, r2
 8005742:	b29b      	uxth	r3, r3
 8005744:	b218      	sxth	r0, r3
 8005746:	88ba      	ldrh	r2, [r7, #4]
 8005748:	89fb      	ldrh	r3, [r7, #14]
 800574a:	4413      	add	r3, r2
 800574c:	b29b      	uxth	r3, r3
 800574e:	b21b      	sxth	r3, r3
 8005750:	883a      	ldrh	r2, [r7, #0]
 8005752:	4619      	mov	r1, r3
 8005754:	f7ff ff6d 	bl	8005632 <writePixel>
        writePixel(x0 - x, y0 + y, color);
 8005758:	88fa      	ldrh	r2, [r7, #6]
 800575a:	8a3b      	ldrh	r3, [r7, #16]
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	b29b      	uxth	r3, r3
 8005760:	b218      	sxth	r0, r3
 8005762:	88ba      	ldrh	r2, [r7, #4]
 8005764:	89fb      	ldrh	r3, [r7, #14]
 8005766:	4413      	add	r3, r2
 8005768:	b29b      	uxth	r3, r3
 800576a:	b21b      	sxth	r3, r3
 800576c:	883a      	ldrh	r2, [r7, #0]
 800576e:	4619      	mov	r1, r3
 8005770:	f7ff ff5f 	bl	8005632 <writePixel>
        writePixel(x0 + x, y0 - y, color);
 8005774:	88fa      	ldrh	r2, [r7, #6]
 8005776:	8a3b      	ldrh	r3, [r7, #16]
 8005778:	4413      	add	r3, r2
 800577a:	b29b      	uxth	r3, r3
 800577c:	b218      	sxth	r0, r3
 800577e:	88ba      	ldrh	r2, [r7, #4]
 8005780:	89fb      	ldrh	r3, [r7, #14]
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	b29b      	uxth	r3, r3
 8005786:	b21b      	sxth	r3, r3
 8005788:	883a      	ldrh	r2, [r7, #0]
 800578a:	4619      	mov	r1, r3
 800578c:	f7ff ff51 	bl	8005632 <writePixel>
        writePixel(x0 - x, y0 - y, color);
 8005790:	88fa      	ldrh	r2, [r7, #6]
 8005792:	8a3b      	ldrh	r3, [r7, #16]
 8005794:	1ad3      	subs	r3, r2, r3
 8005796:	b29b      	uxth	r3, r3
 8005798:	b218      	sxth	r0, r3
 800579a:	88ba      	ldrh	r2, [r7, #4]
 800579c:	89fb      	ldrh	r3, [r7, #14]
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	b21b      	sxth	r3, r3
 80057a4:	883a      	ldrh	r2, [r7, #0]
 80057a6:	4619      	mov	r1, r3
 80057a8:	f7ff ff43 	bl	8005632 <writePixel>
        writePixel(x0 + y, y0 + x, color);
 80057ac:	88fa      	ldrh	r2, [r7, #6]
 80057ae:	89fb      	ldrh	r3, [r7, #14]
 80057b0:	4413      	add	r3, r2
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	b218      	sxth	r0, r3
 80057b6:	88ba      	ldrh	r2, [r7, #4]
 80057b8:	8a3b      	ldrh	r3, [r7, #16]
 80057ba:	4413      	add	r3, r2
 80057bc:	b29b      	uxth	r3, r3
 80057be:	b21b      	sxth	r3, r3
 80057c0:	883a      	ldrh	r2, [r7, #0]
 80057c2:	4619      	mov	r1, r3
 80057c4:	f7ff ff35 	bl	8005632 <writePixel>
        writePixel(x0 - y, y0 + x, color);
 80057c8:	88fa      	ldrh	r2, [r7, #6]
 80057ca:	89fb      	ldrh	r3, [r7, #14]
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	b218      	sxth	r0, r3
 80057d2:	88ba      	ldrh	r2, [r7, #4]
 80057d4:	8a3b      	ldrh	r3, [r7, #16]
 80057d6:	4413      	add	r3, r2
 80057d8:	b29b      	uxth	r3, r3
 80057da:	b21b      	sxth	r3, r3
 80057dc:	883a      	ldrh	r2, [r7, #0]
 80057de:	4619      	mov	r1, r3
 80057e0:	f7ff ff27 	bl	8005632 <writePixel>
        writePixel(x0 + y, y0 - x, color);
 80057e4:	88fa      	ldrh	r2, [r7, #6]
 80057e6:	89fb      	ldrh	r3, [r7, #14]
 80057e8:	4413      	add	r3, r2
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	b218      	sxth	r0, r3
 80057ee:	88ba      	ldrh	r2, [r7, #4]
 80057f0:	8a3b      	ldrh	r3, [r7, #16]
 80057f2:	1ad3      	subs	r3, r2, r3
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	b21b      	sxth	r3, r3
 80057f8:	883a      	ldrh	r2, [r7, #0]
 80057fa:	4619      	mov	r1, r3
 80057fc:	f7ff ff19 	bl	8005632 <writePixel>
        writePixel(x0 - y, y0 - x, color);
 8005800:	88fa      	ldrh	r2, [r7, #6]
 8005802:	89fb      	ldrh	r3, [r7, #14]
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	b29b      	uxth	r3, r3
 8005808:	b218      	sxth	r0, r3
 800580a:	88ba      	ldrh	r2, [r7, #4]
 800580c:	8a3b      	ldrh	r3, [r7, #16]
 800580e:	1ad3      	subs	r3, r2, r3
 8005810:	b29b      	uxth	r3, r3
 8005812:	b21b      	sxth	r3, r3
 8005814:	883a      	ldrh	r2, [r7, #0]
 8005816:	4619      	mov	r1, r3
 8005818:	f7ff ff0b 	bl	8005632 <writePixel>
    while (x<y) {
 800581c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8005820:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005824:	429a      	cmp	r2, r3
 8005826:	f6ff af67 	blt.w	80056f8 <drawCircle+0x9c>
    }
}
 800582a:	bf00      	nop
 800582c:	bf00      	nop
 800582e:	371c      	adds	r7, #28
 8005830:	46bd      	mov	sp, r7
 8005832:	bd90      	pop	{r4, r7, pc}

08005834 <fillCircle>:
    }
}


void fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 8005834:	b590      	push	{r4, r7, lr}
 8005836:	b085      	sub	sp, #20
 8005838:	af02      	add	r7, sp, #8
 800583a:	4604      	mov	r4, r0
 800583c:	4608      	mov	r0, r1
 800583e:	4611      	mov	r1, r2
 8005840:	461a      	mov	r2, r3
 8005842:	4623      	mov	r3, r4
 8005844:	80fb      	strh	r3, [r7, #6]
 8005846:	4603      	mov	r3, r0
 8005848:	80bb      	strh	r3, [r7, #4]
 800584a:	460b      	mov	r3, r1
 800584c:	807b      	strh	r3, [r7, #2]
 800584e:	4613      	mov	r3, r2
 8005850:	803b      	strh	r3, [r7, #0]
    drawFastVLine(x0, y0-r, 2*r+1, color);
 8005852:	88ba      	ldrh	r2, [r7, #4]
 8005854:	887b      	ldrh	r3, [r7, #2]
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	b29b      	uxth	r3, r3
 800585a:	b219      	sxth	r1, r3
 800585c:	887b      	ldrh	r3, [r7, #2]
 800585e:	005b      	lsls	r3, r3, #1
 8005860:	b29b      	uxth	r3, r3
 8005862:	3301      	adds	r3, #1
 8005864:	b29b      	uxth	r3, r3
 8005866:	b21a      	sxth	r2, r3
 8005868:	883b      	ldrh	r3, [r7, #0]
 800586a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800586e:	f7ff fec1 	bl	80055f4 <drawFastVLine>
    fillCircleHelper(x0, y0, r, 3, 0, color);
 8005872:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005876:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800587a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800587e:	883b      	ldrh	r3, [r7, #0]
 8005880:	9301      	str	r3, [sp, #4]
 8005882:	2300      	movs	r3, #0
 8005884:	9300      	str	r3, [sp, #0]
 8005886:	2303      	movs	r3, #3
 8005888:	f000 f804 	bl	8005894 <fillCircleHelper>
}
 800588c:	bf00      	nop
 800588e:	370c      	adds	r7, #12
 8005890:	46bd      	mov	sp, r7
 8005892:	bd90      	pop	{r4, r7, pc}

08005894 <fillCircleHelper>:


void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t corners, int16_t delta, uint16_t color)
{
 8005894:	b590      	push	{r4, r7, lr}
 8005896:	b087      	sub	sp, #28
 8005898:	af00      	add	r7, sp, #0
 800589a:	4604      	mov	r4, r0
 800589c:	4608      	mov	r0, r1
 800589e:	4611      	mov	r1, r2
 80058a0:	461a      	mov	r2, r3
 80058a2:	4623      	mov	r3, r4
 80058a4:	80fb      	strh	r3, [r7, #6]
 80058a6:	4603      	mov	r3, r0
 80058a8:	80bb      	strh	r3, [r7, #4]
 80058aa:	460b      	mov	r3, r1
 80058ac:	807b      	strh	r3, [r7, #2]
 80058ae:	4613      	mov	r3, r2
 80058b0:	707b      	strb	r3, [r7, #1]

    int16_t f     = 1 - r;
 80058b2:	887b      	ldrh	r3, [r7, #2]
 80058b4:	f1c3 0301 	rsb	r3, r3, #1
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 80058bc:	2301      	movs	r3, #1
 80058be:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 80058c0:	887b      	ldrh	r3, [r7, #2]
 80058c2:	461a      	mov	r2, r3
 80058c4:	03d2      	lsls	r2, r2, #15
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	005b      	lsls	r3, r3, #1
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	827b      	strh	r3, [r7, #18]
    int16_t x     = 0;
 80058ce:	2300      	movs	r3, #0
 80058d0:	823b      	strh	r3, [r7, #16]
    int16_t y     = r;
 80058d2:	887b      	ldrh	r3, [r7, #2]
 80058d4:	81fb      	strh	r3, [r7, #14]
    int16_t px    = x;
 80058d6:	8a3b      	ldrh	r3, [r7, #16]
 80058d8:	81bb      	strh	r3, [r7, #12]
    int16_t py    = y;
 80058da:	89fb      	ldrh	r3, [r7, #14]
 80058dc:	817b      	strh	r3, [r7, #10]

    delta++; // Avoid some +1's in the loop
 80058de:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	3301      	adds	r3, #1
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	853b      	strh	r3, [r7, #40]	; 0x28

    while(x < y) {
 80058ea:	e095      	b.n	8005a18 <fillCircleHelper+0x184>
        if (f >= 0) {
 80058ec:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	db0e      	blt.n	8005912 <fillCircleHelper+0x7e>
            y--;
 80058f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	3b01      	subs	r3, #1
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8005900:	8a7b      	ldrh	r3, [r7, #18]
 8005902:	3302      	adds	r3, #2
 8005904:	b29b      	uxth	r3, r3
 8005906:	827b      	strh	r3, [r7, #18]
            f     += ddF_y;
 8005908:	8afa      	ldrh	r2, [r7, #22]
 800590a:	8a7b      	ldrh	r3, [r7, #18]
 800590c:	4413      	add	r3, r2
 800590e:	b29b      	uxth	r3, r3
 8005910:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8005912:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005916:	b29b      	uxth	r3, r3
 8005918:	3301      	adds	r3, #1
 800591a:	b29b      	uxth	r3, r3
 800591c:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 800591e:	8abb      	ldrh	r3, [r7, #20]
 8005920:	3302      	adds	r3, #2
 8005922:	b29b      	uxth	r3, r3
 8005924:	82bb      	strh	r3, [r7, #20]
        f     += ddF_x;
 8005926:	8afa      	ldrh	r2, [r7, #22]
 8005928:	8abb      	ldrh	r3, [r7, #20]
 800592a:	4413      	add	r3, r2
 800592c:	b29b      	uxth	r3, r3
 800592e:	82fb      	strh	r3, [r7, #22]
        // These checks avoid double-drawing certain lines, important
        // for the SSD1306 library which has an INVERT drawing mode.
        if(x < (y + 1)) {
 8005930:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8005934:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005938:	429a      	cmp	r2, r3
 800593a:	db31      	blt.n	80059a0 <fillCircleHelper+0x10c>
            if(corners & 1) drawFastVLine(x0+x, y0-y, 2*y+delta, color);
 800593c:	787b      	ldrb	r3, [r7, #1]
 800593e:	f003 0301 	and.w	r3, r3, #1
 8005942:	2b00      	cmp	r3, #0
 8005944:	d013      	beq.n	800596e <fillCircleHelper+0xda>
 8005946:	88fa      	ldrh	r2, [r7, #6]
 8005948:	8a3b      	ldrh	r3, [r7, #16]
 800594a:	4413      	add	r3, r2
 800594c:	b29b      	uxth	r3, r3
 800594e:	b218      	sxth	r0, r3
 8005950:	88ba      	ldrh	r2, [r7, #4]
 8005952:	89fb      	ldrh	r3, [r7, #14]
 8005954:	1ad3      	subs	r3, r2, r3
 8005956:	b29b      	uxth	r3, r3
 8005958:	b219      	sxth	r1, r3
 800595a:	89fb      	ldrh	r3, [r7, #14]
 800595c:	005b      	lsls	r3, r3, #1
 800595e:	b29a      	uxth	r2, r3
 8005960:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005962:	4413      	add	r3, r2
 8005964:	b29b      	uxth	r3, r3
 8005966:	b21a      	sxth	r2, r3
 8005968:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800596a:	f7ff fe43 	bl	80055f4 <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-x, y0-y, 2*y+delta, color);
 800596e:	787b      	ldrb	r3, [r7, #1]
 8005970:	f003 0302 	and.w	r3, r3, #2
 8005974:	2b00      	cmp	r3, #0
 8005976:	d013      	beq.n	80059a0 <fillCircleHelper+0x10c>
 8005978:	88fa      	ldrh	r2, [r7, #6]
 800597a:	8a3b      	ldrh	r3, [r7, #16]
 800597c:	1ad3      	subs	r3, r2, r3
 800597e:	b29b      	uxth	r3, r3
 8005980:	b218      	sxth	r0, r3
 8005982:	88ba      	ldrh	r2, [r7, #4]
 8005984:	89fb      	ldrh	r3, [r7, #14]
 8005986:	1ad3      	subs	r3, r2, r3
 8005988:	b29b      	uxth	r3, r3
 800598a:	b219      	sxth	r1, r3
 800598c:	89fb      	ldrh	r3, [r7, #14]
 800598e:	005b      	lsls	r3, r3, #1
 8005990:	b29a      	uxth	r2, r3
 8005992:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005994:	4413      	add	r3, r2
 8005996:	b29b      	uxth	r3, r3
 8005998:	b21a      	sxth	r2, r3
 800599a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800599c:	f7ff fe2a 	bl	80055f4 <drawFastVLine>
        }
        if(y != py) {
 80059a0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80059a4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d033      	beq.n	8005a14 <fillCircleHelper+0x180>
            if(corners & 1) drawFastVLine(x0+py, y0-px, 2*px+delta, color);
 80059ac:	787b      	ldrb	r3, [r7, #1]
 80059ae:	f003 0301 	and.w	r3, r3, #1
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d013      	beq.n	80059de <fillCircleHelper+0x14a>
 80059b6:	88fa      	ldrh	r2, [r7, #6]
 80059b8:	897b      	ldrh	r3, [r7, #10]
 80059ba:	4413      	add	r3, r2
 80059bc:	b29b      	uxth	r3, r3
 80059be:	b218      	sxth	r0, r3
 80059c0:	88ba      	ldrh	r2, [r7, #4]
 80059c2:	89bb      	ldrh	r3, [r7, #12]
 80059c4:	1ad3      	subs	r3, r2, r3
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	b219      	sxth	r1, r3
 80059ca:	89bb      	ldrh	r3, [r7, #12]
 80059cc:	005b      	lsls	r3, r3, #1
 80059ce:	b29a      	uxth	r2, r3
 80059d0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80059d2:	4413      	add	r3, r2
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	b21a      	sxth	r2, r3
 80059d8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80059da:	f7ff fe0b 	bl	80055f4 <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-py, y0-px, 2*px+delta, color);
 80059de:	787b      	ldrb	r3, [r7, #1]
 80059e0:	f003 0302 	and.w	r3, r3, #2
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d013      	beq.n	8005a10 <fillCircleHelper+0x17c>
 80059e8:	88fa      	ldrh	r2, [r7, #6]
 80059ea:	897b      	ldrh	r3, [r7, #10]
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	b218      	sxth	r0, r3
 80059f2:	88ba      	ldrh	r2, [r7, #4]
 80059f4:	89bb      	ldrh	r3, [r7, #12]
 80059f6:	1ad3      	subs	r3, r2, r3
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	b219      	sxth	r1, r3
 80059fc:	89bb      	ldrh	r3, [r7, #12]
 80059fe:	005b      	lsls	r3, r3, #1
 8005a00:	b29a      	uxth	r2, r3
 8005a02:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005a04:	4413      	add	r3, r2
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	b21a      	sxth	r2, r3
 8005a0a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005a0c:	f7ff fdf2 	bl	80055f4 <drawFastVLine>
            py = y;
 8005a10:	89fb      	ldrh	r3, [r7, #14]
 8005a12:	817b      	strh	r3, [r7, #10]
        }
        px = x;
 8005a14:	8a3b      	ldrh	r3, [r7, #16]
 8005a16:	81bb      	strh	r3, [r7, #12]
    while(x < y) {
 8005a18:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8005a1c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005a20:	429a      	cmp	r2, r3
 8005a22:	f6ff af63 	blt.w	80058ec <fillCircleHelper+0x58>
    }
}
 8005a26:	bf00      	nop
 8005a28:	bf00      	nop
 8005a2a:	371c      	adds	r7, #28
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd90      	pop	{r4, r7, pc}

08005a30 <fillRect>:
    drawFastVLine(x+w-1, y, h, color);
}


void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8005a30:	b590      	push	{r4, r7, lr}
 8005a32:	b085      	sub	sp, #20
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	4604      	mov	r4, r0
 8005a38:	4608      	mov	r0, r1
 8005a3a:	4611      	mov	r1, r2
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	4623      	mov	r3, r4
 8005a40:	80fb      	strh	r3, [r7, #6]
 8005a42:	4603      	mov	r3, r0
 8005a44:	80bb      	strh	r3, [r7, #4]
 8005a46:	460b      	mov	r3, r1
 8005a48:	807b      	strh	r3, [r7, #2]
 8005a4a:	4613      	mov	r3, r2
 8005a4c:	803b      	strh	r3, [r7, #0]
    int16_t end;
#if defined(SUPPORT_9488_555)
    if (is555) color = color565_to_555(color);
 8005a4e:	4b95      	ldr	r3, [pc, #596]	; (8005ca4 <fillRect+0x274>)
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d005      	beq.n	8005a62 <fillRect+0x32>
 8005a56:	8c3b      	ldrh	r3, [r7, #32]
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f7fc fc21 	bl	80022a0 <color565_to_555>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	843b      	strh	r3, [r7, #32]
#endif
    if (w < 0) {
 8005a62:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	da08      	bge.n	8005a7c <fillRect+0x4c>
        w = -w;
 8005a6a:	887b      	ldrh	r3, [r7, #2]
 8005a6c:	425b      	negs	r3, r3
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	807b      	strh	r3, [r7, #2]
        x -= w;
 8005a72:	88fa      	ldrh	r2, [r7, #6]
 8005a74:	887b      	ldrh	r3, [r7, #2]
 8005a76:	1ad3      	subs	r3, r2, r3
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	80fb      	strh	r3, [r7, #6]
    }                           //+ve w
    end = x + w;
 8005a7c:	88fa      	ldrh	r2, [r7, #6]
 8005a7e:	887b      	ldrh	r3, [r7, #2]
 8005a80:	4413      	add	r3, r2
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	81fb      	strh	r3, [r7, #14]
    if (x < 0)
 8005a86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	da01      	bge.n	8005a92 <fillRect+0x62>
        x = 0;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	80fb      	strh	r3, [r7, #6]
    if (end > width())
 8005a92:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8005a96:	f7fc fbeb 	bl	8002270 <width>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	429c      	cmp	r4, r3
 8005a9e:	dd03      	ble.n	8005aa8 <fillRect+0x78>
        end = width();
 8005aa0:	f7fc fbe6 	bl	8002270 <width>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	81fb      	strh	r3, [r7, #14]
    w = end - x;
 8005aa8:	89fa      	ldrh	r2, [r7, #14]
 8005aaa:	88fb      	ldrh	r3, [r7, #6]
 8005aac:	1ad3      	subs	r3, r2, r3
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	807b      	strh	r3, [r7, #2]
    if (h < 0) {
 8005ab2:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	da08      	bge.n	8005acc <fillRect+0x9c>
        h = -h;
 8005aba:	883b      	ldrh	r3, [r7, #0]
 8005abc:	425b      	negs	r3, r3
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	803b      	strh	r3, [r7, #0]
        y -= h;
 8005ac2:	88ba      	ldrh	r2, [r7, #4]
 8005ac4:	883b      	ldrh	r3, [r7, #0]
 8005ac6:	1ad3      	subs	r3, r2, r3
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	80bb      	strh	r3, [r7, #4]
    }                           //+ve h
    end = y + h;
 8005acc:	88ba      	ldrh	r2, [r7, #4]
 8005ace:	883b      	ldrh	r3, [r7, #0]
 8005ad0:	4413      	add	r3, r2
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	81fb      	strh	r3, [r7, #14]
    if (y < 0)
 8005ad6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	da01      	bge.n	8005ae2 <fillRect+0xb2>
        y = 0;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	80bb      	strh	r3, [r7, #4]
    if (end > height())
 8005ae2:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8005ae6:	f7fc fbcf 	bl	8002288 <height>
 8005aea:	4603      	mov	r3, r0
 8005aec:	429c      	cmp	r4, r3
 8005aee:	dd03      	ble.n	8005af8 <fillRect+0xc8>
        end = height();
 8005af0:	f7fc fbca 	bl	8002288 <height>
 8005af4:	4603      	mov	r3, r0
 8005af6:	81fb      	strh	r3, [r7, #14]
    h = end - y;
 8005af8:	89fa      	ldrh	r2, [r7, #14]
 8005afa:	88bb      	ldrh	r3, [r7, #4]
 8005afc:	1ad3      	subs	r3, r2, r3
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	803b      	strh	r3, [r7, #0]
    setAddrWindow(x, y, x + w - 1, y + h - 1);
 8005b02:	88fa      	ldrh	r2, [r7, #6]
 8005b04:	887b      	ldrh	r3, [r7, #2]
 8005b06:	4413      	add	r3, r2
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	3b01      	subs	r3, #1
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	b21c      	sxth	r4, r3
 8005b10:	88ba      	ldrh	r2, [r7, #4]
 8005b12:	883b      	ldrh	r3, [r7, #0]
 8005b14:	4413      	add	r3, r2
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	3b01      	subs	r3, #1
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	b21b      	sxth	r3, r3
 8005b1e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005b22:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005b26:	4622      	mov	r2, r4
 8005b28:	f7ff fa5a 	bl	8004fe0 <setAddrWindow>
    CS_ACTIVE;
 8005b2c:	2101      	movs	r1, #1
 8005b2e:	485e      	ldr	r0, [pc, #376]	; (8005ca8 <fillRect+0x278>)
 8005b30:	f7fc fb50 	bl	80021d4 <PIN_LOW>
    WriteCmd(_MW);
 8005b34:	2110      	movs	r1, #16
 8005b36:	485d      	ldr	r0, [pc, #372]	; (8005cac <fillRect+0x27c>)
 8005b38:	f7fc fb4c 	bl	80021d4 <PIN_LOW>
 8005b3c:	4b5c      	ldr	r3, [pc, #368]	; (8005cb0 <fillRect+0x280>)
 8005b3e:	881b      	ldrh	r3, [r3, #0]
 8005b40:	0a1b      	lsrs	r3, r3, #8
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	737b      	strb	r3, [r7, #13]
 8005b46:	4b5a      	ldr	r3, [pc, #360]	; (8005cb0 <fillRect+0x280>)
 8005b48:	881b      	ldrh	r3, [r3, #0]
 8005b4a:	733b      	strb	r3, [r7, #12]
 8005b4c:	4b57      	ldr	r3, [pc, #348]	; (8005cac <fillRect+0x27c>)
 8005b4e:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8005b52:	619a      	str	r2, [r3, #24]
 8005b54:	4b54      	ldr	r3, [pc, #336]	; (8005ca8 <fillRect+0x278>)
 8005b56:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8005b5a:	619a      	str	r2, [r3, #24]
 8005b5c:	4b55      	ldr	r3, [pc, #340]	; (8005cb4 <fillRect+0x284>)
 8005b5e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005b62:	619a      	str	r2, [r3, #24]
 8005b64:	7b7b      	ldrb	r3, [r7, #13]
 8005b66:	005b      	lsls	r3, r3, #1
 8005b68:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8005b6c:	7b7b      	ldrb	r3, [r7, #13]
 8005b6e:	021b      	lsls	r3, r3, #8
 8005b70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b74:	431a      	orrs	r2, r3
 8005b76:	7b7b      	ldrb	r3, [r7, #13]
 8005b78:	025b      	lsls	r3, r3, #9
 8005b7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b7e:	431a      	orrs	r2, r3
 8005b80:	4b4a      	ldr	r3, [pc, #296]	; (8005cac <fillRect+0x27c>)
 8005b82:	619a      	str	r2, [r3, #24]
 8005b84:	7b7b      	ldrb	r3, [r7, #13]
 8005b86:	011b      	lsls	r3, r3, #4
 8005b88:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8005b8c:	7b7b      	ldrb	r3, [r7, #13]
 8005b8e:	105b      	asrs	r3, r3, #1
 8005b90:	f003 0310 	and.w	r3, r3, #16
 8005b94:	431a      	orrs	r2, r3
 8005b96:	7b7b      	ldrb	r3, [r7, #13]
 8005b98:	005b      	lsls	r3, r3, #1
 8005b9a:	f003 0320 	and.w	r3, r3, #32
 8005b9e:	431a      	orrs	r2, r3
 8005ba0:	7b7b      	ldrb	r3, [r7, #13]
 8005ba2:	f003 0308 	and.w	r3, r3, #8
 8005ba6:	431a      	orrs	r2, r3
 8005ba8:	4b3f      	ldr	r3, [pc, #252]	; (8005ca8 <fillRect+0x278>)
 8005baa:	619a      	str	r2, [r3, #24]
 8005bac:	7b7b      	ldrb	r3, [r7, #13]
 8005bae:	019b      	lsls	r3, r3, #6
 8005bb0:	4a40      	ldr	r2, [pc, #256]	; (8005cb4 <fillRect+0x284>)
 8005bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bb6:	6193      	str	r3, [r2, #24]
 8005bb8:	2102      	movs	r1, #2
 8005bba:	483c      	ldr	r0, [pc, #240]	; (8005cac <fillRect+0x27c>)
 8005bbc:	f7fc fb0a 	bl	80021d4 <PIN_LOW>
 8005bc0:	2102      	movs	r1, #2
 8005bc2:	483a      	ldr	r0, [pc, #232]	; (8005cac <fillRect+0x27c>)
 8005bc4:	f7fc fb06 	bl	80021d4 <PIN_LOW>
 8005bc8:	2102      	movs	r1, #2
 8005bca:	4838      	ldr	r0, [pc, #224]	; (8005cac <fillRect+0x27c>)
 8005bcc:	f7fc fb02 	bl	80021d4 <PIN_LOW>
 8005bd0:	2102      	movs	r1, #2
 8005bd2:	4836      	ldr	r0, [pc, #216]	; (8005cac <fillRect+0x27c>)
 8005bd4:	f7fc fb0e 	bl	80021f4 <PIN_HIGH>
 8005bd8:	2102      	movs	r1, #2
 8005bda:	4834      	ldr	r0, [pc, #208]	; (8005cac <fillRect+0x27c>)
 8005bdc:	f7fc fb0a 	bl	80021f4 <PIN_HIGH>
 8005be0:	4b32      	ldr	r3, [pc, #200]	; (8005cac <fillRect+0x27c>)
 8005be2:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8005be6:	619a      	str	r2, [r3, #24]
 8005be8:	4b2f      	ldr	r3, [pc, #188]	; (8005ca8 <fillRect+0x278>)
 8005bea:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8005bee:	619a      	str	r2, [r3, #24]
 8005bf0:	4b30      	ldr	r3, [pc, #192]	; (8005cb4 <fillRect+0x284>)
 8005bf2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005bf6:	619a      	str	r2, [r3, #24]
 8005bf8:	7b3b      	ldrb	r3, [r7, #12]
 8005bfa:	005b      	lsls	r3, r3, #1
 8005bfc:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8005c00:	7b3b      	ldrb	r3, [r7, #12]
 8005c02:	021b      	lsls	r3, r3, #8
 8005c04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c08:	431a      	orrs	r2, r3
 8005c0a:	7b3b      	ldrb	r3, [r7, #12]
 8005c0c:	025b      	lsls	r3, r3, #9
 8005c0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c12:	431a      	orrs	r2, r3
 8005c14:	4b25      	ldr	r3, [pc, #148]	; (8005cac <fillRect+0x27c>)
 8005c16:	619a      	str	r2, [r3, #24]
 8005c18:	7b3b      	ldrb	r3, [r7, #12]
 8005c1a:	011b      	lsls	r3, r3, #4
 8005c1c:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8005c20:	7b3b      	ldrb	r3, [r7, #12]
 8005c22:	105b      	asrs	r3, r3, #1
 8005c24:	f003 0310 	and.w	r3, r3, #16
 8005c28:	431a      	orrs	r2, r3
 8005c2a:	7b3b      	ldrb	r3, [r7, #12]
 8005c2c:	005b      	lsls	r3, r3, #1
 8005c2e:	f003 0320 	and.w	r3, r3, #32
 8005c32:	431a      	orrs	r2, r3
 8005c34:	7b3b      	ldrb	r3, [r7, #12]
 8005c36:	f003 0308 	and.w	r3, r3, #8
 8005c3a:	431a      	orrs	r2, r3
 8005c3c:	4b1a      	ldr	r3, [pc, #104]	; (8005ca8 <fillRect+0x278>)
 8005c3e:	619a      	str	r2, [r3, #24]
 8005c40:	7b3b      	ldrb	r3, [r7, #12]
 8005c42:	019b      	lsls	r3, r3, #6
 8005c44:	4a1b      	ldr	r2, [pc, #108]	; (8005cb4 <fillRect+0x284>)
 8005c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c4a:	6193      	str	r3, [r2, #24]
 8005c4c:	2102      	movs	r1, #2
 8005c4e:	4817      	ldr	r0, [pc, #92]	; (8005cac <fillRect+0x27c>)
 8005c50:	f7fc fac0 	bl	80021d4 <PIN_LOW>
 8005c54:	2102      	movs	r1, #2
 8005c56:	4815      	ldr	r0, [pc, #84]	; (8005cac <fillRect+0x27c>)
 8005c58:	f7fc fabc 	bl	80021d4 <PIN_LOW>
 8005c5c:	2102      	movs	r1, #2
 8005c5e:	4813      	ldr	r0, [pc, #76]	; (8005cac <fillRect+0x27c>)
 8005c60:	f7fc fab8 	bl	80021d4 <PIN_LOW>
 8005c64:	2102      	movs	r1, #2
 8005c66:	4811      	ldr	r0, [pc, #68]	; (8005cac <fillRect+0x27c>)
 8005c68:	f7fc fac4 	bl	80021f4 <PIN_HIGH>
 8005c6c:	2102      	movs	r1, #2
 8005c6e:	480f      	ldr	r0, [pc, #60]	; (8005cac <fillRect+0x27c>)
 8005c70:	f7fc fac0 	bl	80021f4 <PIN_HIGH>
 8005c74:	2110      	movs	r1, #16
 8005c76:	480d      	ldr	r0, [pc, #52]	; (8005cac <fillRect+0x27c>)
 8005c78:	f7fc fabc 	bl	80021f4 <PIN_HIGH>
    if (h > w) {
 8005c7c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005c80:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005c84:	429a      	cmp	r2, r3
 8005c86:	dd05      	ble.n	8005c94 <fillRect+0x264>
        end = h;
 8005c88:	883b      	ldrh	r3, [r7, #0]
 8005c8a:	81fb      	strh	r3, [r7, #14]
        h = w;
 8005c8c:	887b      	ldrh	r3, [r7, #2]
 8005c8e:	803b      	strh	r3, [r7, #0]
        w = end;
 8005c90:	89fb      	ldrh	r3, [r7, #14]
 8005c92:	807b      	strh	r3, [r7, #2]
    }
    uint8_t hi = color >> 8, lo = color & 0xFF;
 8005c94:	8c3b      	ldrh	r3, [r7, #32]
 8005c96:	0a1b      	lsrs	r3, r3, #8
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	72fb      	strb	r3, [r7, #11]
 8005c9c:	8c3b      	ldrh	r3, [r7, #32]
 8005c9e:	72bb      	strb	r3, [r7, #10]
    while (h-- > 0) {
 8005ca0:	e0a9      	b.n	8005df6 <fillRect+0x3c6>
 8005ca2:	bf00      	nop
 8005ca4:	2000021a 	.word	0x2000021a
 8005ca8:	40020400 	.word	0x40020400
 8005cac:	40020000 	.word	0x40020000
 8005cb0:	200003be 	.word	0x200003be
 8005cb4:	40020800 	.word	0x40020800
        end = w;
 8005cb8:	887b      	ldrh	r3, [r7, #2]
 8005cba:	81fb      	strh	r3, [r7, #14]
//                 write8(b);
//             } while (--end != 0);
//        } else
//#endif
        do {
            write8(hi);
 8005cbc:	4b68      	ldr	r3, [pc, #416]	; (8005e60 <fillRect+0x430>)
 8005cbe:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8005cc2:	619a      	str	r2, [r3, #24]
 8005cc4:	4b67      	ldr	r3, [pc, #412]	; (8005e64 <fillRect+0x434>)
 8005cc6:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8005cca:	619a      	str	r2, [r3, #24]
 8005ccc:	4b66      	ldr	r3, [pc, #408]	; (8005e68 <fillRect+0x438>)
 8005cce:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005cd2:	619a      	str	r2, [r3, #24]
 8005cd4:	7afb      	ldrb	r3, [r7, #11]
 8005cd6:	005b      	lsls	r3, r3, #1
 8005cd8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8005cdc:	7afb      	ldrb	r3, [r7, #11]
 8005cde:	021b      	lsls	r3, r3, #8
 8005ce0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ce4:	431a      	orrs	r2, r3
 8005ce6:	7afb      	ldrb	r3, [r7, #11]
 8005ce8:	025b      	lsls	r3, r3, #9
 8005cea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cee:	431a      	orrs	r2, r3
 8005cf0:	4b5b      	ldr	r3, [pc, #364]	; (8005e60 <fillRect+0x430>)
 8005cf2:	619a      	str	r2, [r3, #24]
 8005cf4:	7afb      	ldrb	r3, [r7, #11]
 8005cf6:	011b      	lsls	r3, r3, #4
 8005cf8:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8005cfc:	7afb      	ldrb	r3, [r7, #11]
 8005cfe:	105b      	asrs	r3, r3, #1
 8005d00:	f003 0310 	and.w	r3, r3, #16
 8005d04:	431a      	orrs	r2, r3
 8005d06:	7afb      	ldrb	r3, [r7, #11]
 8005d08:	005b      	lsls	r3, r3, #1
 8005d0a:	f003 0320 	and.w	r3, r3, #32
 8005d0e:	431a      	orrs	r2, r3
 8005d10:	7afb      	ldrb	r3, [r7, #11]
 8005d12:	f003 0308 	and.w	r3, r3, #8
 8005d16:	431a      	orrs	r2, r3
 8005d18:	4b52      	ldr	r3, [pc, #328]	; (8005e64 <fillRect+0x434>)
 8005d1a:	619a      	str	r2, [r3, #24]
 8005d1c:	7afb      	ldrb	r3, [r7, #11]
 8005d1e:	019b      	lsls	r3, r3, #6
 8005d20:	4a51      	ldr	r2, [pc, #324]	; (8005e68 <fillRect+0x438>)
 8005d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d26:	6193      	str	r3, [r2, #24]
 8005d28:	2102      	movs	r1, #2
 8005d2a:	484d      	ldr	r0, [pc, #308]	; (8005e60 <fillRect+0x430>)
 8005d2c:	f7fc fa52 	bl	80021d4 <PIN_LOW>
 8005d30:	2102      	movs	r1, #2
 8005d32:	484b      	ldr	r0, [pc, #300]	; (8005e60 <fillRect+0x430>)
 8005d34:	f7fc fa4e 	bl	80021d4 <PIN_LOW>
 8005d38:	2102      	movs	r1, #2
 8005d3a:	4849      	ldr	r0, [pc, #292]	; (8005e60 <fillRect+0x430>)
 8005d3c:	f7fc fa4a 	bl	80021d4 <PIN_LOW>
 8005d40:	2102      	movs	r1, #2
 8005d42:	4847      	ldr	r0, [pc, #284]	; (8005e60 <fillRect+0x430>)
 8005d44:	f7fc fa56 	bl	80021f4 <PIN_HIGH>
 8005d48:	2102      	movs	r1, #2
 8005d4a:	4845      	ldr	r0, [pc, #276]	; (8005e60 <fillRect+0x430>)
 8005d4c:	f7fc fa52 	bl	80021f4 <PIN_HIGH>
            write8(lo);
 8005d50:	4b43      	ldr	r3, [pc, #268]	; (8005e60 <fillRect+0x430>)
 8005d52:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8005d56:	619a      	str	r2, [r3, #24]
 8005d58:	4b42      	ldr	r3, [pc, #264]	; (8005e64 <fillRect+0x434>)
 8005d5a:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8005d5e:	619a      	str	r2, [r3, #24]
 8005d60:	4b41      	ldr	r3, [pc, #260]	; (8005e68 <fillRect+0x438>)
 8005d62:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005d66:	619a      	str	r2, [r3, #24]
 8005d68:	7abb      	ldrb	r3, [r7, #10]
 8005d6a:	005b      	lsls	r3, r3, #1
 8005d6c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8005d70:	7abb      	ldrb	r3, [r7, #10]
 8005d72:	021b      	lsls	r3, r3, #8
 8005d74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d78:	431a      	orrs	r2, r3
 8005d7a:	7abb      	ldrb	r3, [r7, #10]
 8005d7c:	025b      	lsls	r3, r3, #9
 8005d7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d82:	431a      	orrs	r2, r3
 8005d84:	4b36      	ldr	r3, [pc, #216]	; (8005e60 <fillRect+0x430>)
 8005d86:	619a      	str	r2, [r3, #24]
 8005d88:	7abb      	ldrb	r3, [r7, #10]
 8005d8a:	011b      	lsls	r3, r3, #4
 8005d8c:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8005d90:	7abb      	ldrb	r3, [r7, #10]
 8005d92:	105b      	asrs	r3, r3, #1
 8005d94:	f003 0310 	and.w	r3, r3, #16
 8005d98:	431a      	orrs	r2, r3
 8005d9a:	7abb      	ldrb	r3, [r7, #10]
 8005d9c:	005b      	lsls	r3, r3, #1
 8005d9e:	f003 0320 	and.w	r3, r3, #32
 8005da2:	431a      	orrs	r2, r3
 8005da4:	7abb      	ldrb	r3, [r7, #10]
 8005da6:	f003 0308 	and.w	r3, r3, #8
 8005daa:	431a      	orrs	r2, r3
 8005dac:	4b2d      	ldr	r3, [pc, #180]	; (8005e64 <fillRect+0x434>)
 8005dae:	619a      	str	r2, [r3, #24]
 8005db0:	7abb      	ldrb	r3, [r7, #10]
 8005db2:	019b      	lsls	r3, r3, #6
 8005db4:	4a2c      	ldr	r2, [pc, #176]	; (8005e68 <fillRect+0x438>)
 8005db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dba:	6193      	str	r3, [r2, #24]
 8005dbc:	2102      	movs	r1, #2
 8005dbe:	4828      	ldr	r0, [pc, #160]	; (8005e60 <fillRect+0x430>)
 8005dc0:	f7fc fa08 	bl	80021d4 <PIN_LOW>
 8005dc4:	2102      	movs	r1, #2
 8005dc6:	4826      	ldr	r0, [pc, #152]	; (8005e60 <fillRect+0x430>)
 8005dc8:	f7fc fa04 	bl	80021d4 <PIN_LOW>
 8005dcc:	2102      	movs	r1, #2
 8005dce:	4824      	ldr	r0, [pc, #144]	; (8005e60 <fillRect+0x430>)
 8005dd0:	f7fc fa00 	bl	80021d4 <PIN_LOW>
 8005dd4:	2102      	movs	r1, #2
 8005dd6:	4822      	ldr	r0, [pc, #136]	; (8005e60 <fillRect+0x430>)
 8005dd8:	f7fc fa0c 	bl	80021f4 <PIN_HIGH>
 8005ddc:	2102      	movs	r1, #2
 8005dde:	4820      	ldr	r0, [pc, #128]	; (8005e60 <fillRect+0x430>)
 8005de0:	f7fc fa08 	bl	80021f4 <PIN_HIGH>
        } while (--end != 0);
 8005de4:	89fb      	ldrh	r3, [r7, #14]
 8005de6:	3b01      	subs	r3, #1
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	81fb      	strh	r3, [r7, #14]
 8005dec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	f47f af63 	bne.w	8005cbc <fillRect+0x28c>
    while (h-- > 0) {
 8005df6:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005dfa:	b29a      	uxth	r2, r3
 8005dfc:	3a01      	subs	r2, #1
 8005dfe:	b292      	uxth	r2, r2
 8005e00:	803a      	strh	r2, [r7, #0]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	f73f af58 	bgt.w	8005cb8 <fillRect+0x288>
#endif
    }
    CS_IDLE;
 8005e08:	2101      	movs	r1, #1
 8005e0a:	4816      	ldr	r0, [pc, #88]	; (8005e64 <fillRect+0x434>)
 8005e0c:	f7fc f9f2 	bl	80021f4 <PIN_HIGH>
    if (!(_lcd_capable & MIPI_DCS_REV1) || ((_lcd_ID == 0x1526) && (rotation & 1)))
 8005e10:	4b16      	ldr	r3, [pc, #88]	; (8005e6c <fillRect+0x43c>)
 8005e12:	881b      	ldrh	r3, [r3, #0]
 8005e14:	f003 0301 	and.w	r3, r3, #1
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d00b      	beq.n	8005e34 <fillRect+0x404>
 8005e1c:	4b14      	ldr	r3, [pc, #80]	; (8005e70 <fillRect+0x440>)
 8005e1e:	881b      	ldrh	r3, [r3, #0]
 8005e20:	f241 5226 	movw	r2, #5414	; 0x1526
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d116      	bne.n	8005e56 <fillRect+0x426>
 8005e28:	4b12      	ldr	r3, [pc, #72]	; (8005e74 <fillRect+0x444>)
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	f003 0301 	and.w	r3, r3, #1
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d010      	beq.n	8005e56 <fillRect+0x426>
        setAddrWindow(0, 0, width() - 1, height() - 1);
 8005e34:	f7fc fa1c 	bl	8002270 <width>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	3b01      	subs	r3, #1
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	b21c      	sxth	r4, r3
 8005e40:	f7fc fa22 	bl	8002288 <height>
 8005e44:	4603      	mov	r3, r0
 8005e46:	3b01      	subs	r3, #1
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	b21b      	sxth	r3, r3
 8005e4c:	4622      	mov	r2, r4
 8005e4e:	2100      	movs	r1, #0
 8005e50:	2000      	movs	r0, #0
 8005e52:	f7ff f8c5 	bl	8004fe0 <setAddrWindow>
}
 8005e56:	bf00      	nop
 8005e58:	3714      	adds	r7, #20
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd90      	pop	{r4, r7, pc}
 8005e5e:	bf00      	nop
 8005e60:	40020000 	.word	0x40020000
 8005e64:	40020400 	.word	0x40020400
 8005e68:	40020800 	.word	0x40020800
 8005e6c:	200003c0 	.word	0x200003c0
 8005e70:	200003ce 	.word	0x200003ce
 8005e74:	2000021e 	.word	0x2000021e

08005e78 <drawChar>:


/********************************* END TESTS  *********************************************/

void drawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size)
{
 8005e78:	b590      	push	{r4, r7, lr}
 8005e7a:	b08b      	sub	sp, #44	; 0x2c
 8005e7c:	af02      	add	r7, sp, #8
 8005e7e:	4604      	mov	r4, r0
 8005e80:	4608      	mov	r0, r1
 8005e82:	4611      	mov	r1, r2
 8005e84:	461a      	mov	r2, r3
 8005e86:	4623      	mov	r3, r4
 8005e88:	80fb      	strh	r3, [r7, #6]
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	80bb      	strh	r3, [r7, #4]
 8005e8e:	460b      	mov	r3, r1
 8005e90:	70fb      	strb	r3, [r7, #3]
 8005e92:	4613      	mov	r3, r2
 8005e94:	803b      	strh	r3, [r7, #0]

        // Character is assumed previously filtered by write() to eliminate
        // newlines, returns, non-printable characters, etc.  Calling
        // drawChar() directly with 'bad' characters of font may cause mayhem!

        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
 8005e96:	4b56      	ldr	r3, [pc, #344]	; (8005ff0 <drawChar+0x178>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	3308      	adds	r3, #8
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	78fa      	ldrb	r2, [r7, #3]
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	70fb      	strb	r3, [r7, #3]
        GFXglyph *glyph  = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
 8005ea4:	78fb      	ldrb	r3, [r7, #3]
 8005ea6:	00da      	lsls	r2, r3, #3
 8005ea8:	4b51      	ldr	r3, [pc, #324]	; (8005ff0 <drawChar+0x178>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	3304      	adds	r3, #4
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	613b      	str	r3, [r7, #16]
        uint8_t  *bitmap = (uint8_t *)pgm_read_pointer(&gfxFont->bitmap);
 8005eb4:	4b4e      	ldr	r3, [pc, #312]	; (8005ff0 <drawChar+0x178>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	60fb      	str	r3, [r7, #12]

        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	83fb      	strh	r3, [r7, #30]
        uint8_t  w  = pgm_read_byte(&glyph->width),
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	789b      	ldrb	r3, [r3, #2]
 8005ec6:	72fb      	strb	r3, [r7, #11]
                 h  = pgm_read_byte(&glyph->height);
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	78db      	ldrb	r3, [r3, #3]
 8005ecc:	72bb      	strb	r3, [r7, #10]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	3305      	adds	r3, #5
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	727b      	strb	r3, [r7, #9]
                 yo = pgm_read_byte(&glyph->yOffset);
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	3306      	adds	r3, #6
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	723b      	strb	r3, [r7, #8]
        uint8_t  xx, yy, bits = 0, bit = 0;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	76fb      	strb	r3, [r7, #27]
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	76bb      	strb	r3, [r7, #26]
        int16_t  xo16 = 0, yo16 = 0;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	833b      	strh	r3, [r7, #24]
 8005eea:	2300      	movs	r3, #0
 8005eec:	82fb      	strh	r3, [r7, #22]

        if(size > 1) {
 8005eee:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d905      	bls.n	8005f02 <drawChar+0x8a>
            xo16 = xo;
 8005ef6:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8005efa:	833b      	strh	r3, [r7, #24]
            yo16 = yo;
 8005efc:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8005f00:	82fb      	strh	r3, [r7, #22]
        }

        for(yy=0; yy<h; yy++) {
 8005f02:	2300      	movs	r3, #0
 8005f04:	773b      	strb	r3, [r7, #28]
 8005f06:	e06a      	b.n	8005fde <drawChar+0x166>
            for(xx=0; xx<w; xx++) {
 8005f08:	2300      	movs	r3, #0
 8005f0a:	777b      	strb	r3, [r7, #29]
 8005f0c:	e060      	b.n	8005fd0 <drawChar+0x158>
                if(!(bit++ & 7)) {
 8005f0e:	7ebb      	ldrb	r3, [r7, #26]
 8005f10:	1c5a      	adds	r2, r3, #1
 8005f12:	76ba      	strb	r2, [r7, #26]
 8005f14:	f003 0307 	and.w	r3, r3, #7
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d107      	bne.n	8005f2c <drawChar+0xb4>
                    bits = pgm_read_byte(&bitmap[bo++]);
 8005f1c:	8bfb      	ldrh	r3, [r7, #30]
 8005f1e:	1c5a      	adds	r2, r3, #1
 8005f20:	83fa      	strh	r2, [r7, #30]
 8005f22:	461a      	mov	r2, r3
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	4413      	add	r3, r2
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	76fb      	strb	r3, [r7, #27]
                }
                if(bits & 0x80) {
 8005f2c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	da47      	bge.n	8005fc4 <drawChar+0x14c>
                    if(size == 1) {
 8005f34:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d11a      	bne.n	8005f72 <drawChar+0xfa>
                        writePixel(x+xo+xx, y+yo+yy, color);
 8005f3c:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8005f40:	b29a      	uxth	r2, r3
 8005f42:	88fb      	ldrh	r3, [r7, #6]
 8005f44:	4413      	add	r3, r2
 8005f46:	b29a      	uxth	r2, r3
 8005f48:	7f7b      	ldrb	r3, [r7, #29]
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	4413      	add	r3, r2
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	b218      	sxth	r0, r3
 8005f52:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8005f56:	b29a      	uxth	r2, r3
 8005f58:	88bb      	ldrh	r3, [r7, #4]
 8005f5a:	4413      	add	r3, r2
 8005f5c:	b29a      	uxth	r2, r3
 8005f5e:	7f3b      	ldrb	r3, [r7, #28]
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	4413      	add	r3, r2
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	b21b      	sxth	r3, r3
 8005f68:	883a      	ldrh	r2, [r7, #0]
 8005f6a:	4619      	mov	r1, r3
 8005f6c:	f7ff fb61 	bl	8005632 <writePixel>
 8005f70:	e028      	b.n	8005fc4 <drawChar+0x14c>
                    } else {
                        fillRect(x+(xo16+xx)*size, y+(yo16+yy)*size,
 8005f72:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8005f76:	7f7b      	ldrb	r3, [r7, #29]
 8005f78:	4413      	add	r3, r2
 8005f7a:	b29a      	uxth	r2, r3
 8005f7c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	fb12 f303 	smulbb	r3, r2, r3
 8005f86:	b29a      	uxth	r2, r3
 8005f88:	88fb      	ldrh	r3, [r7, #6]
 8005f8a:	4413      	add	r3, r2
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	b218      	sxth	r0, r3
 8005f90:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005f94:	7f3b      	ldrb	r3, [r7, #28]
 8005f96:	4413      	add	r3, r2
 8005f98:	b29a      	uxth	r2, r3
 8005f9a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	fb12 f303 	smulbb	r3, r2, r3
 8005fa4:	b29a      	uxth	r2, r3
 8005fa6:	88bb      	ldrh	r3, [r7, #4]
 8005fa8:	4413      	add	r3, r2
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	b219      	sxth	r1, r3
 8005fae:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8005fb2:	b21a      	sxth	r2, r3
 8005fb4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8005fb8:	b21c      	sxth	r4, r3
 8005fba:	883b      	ldrh	r3, [r7, #0]
 8005fbc:	9300      	str	r3, [sp, #0]
 8005fbe:	4623      	mov	r3, r4
 8005fc0:	f7ff fd36 	bl	8005a30 <fillRect>
                          size, size, color);
                    }
                }
                bits <<= 1;
 8005fc4:	7efb      	ldrb	r3, [r7, #27]
 8005fc6:	005b      	lsls	r3, r3, #1
 8005fc8:	76fb      	strb	r3, [r7, #27]
            for(xx=0; xx<w; xx++) {
 8005fca:	7f7b      	ldrb	r3, [r7, #29]
 8005fcc:	3301      	adds	r3, #1
 8005fce:	777b      	strb	r3, [r7, #29]
 8005fd0:	7f7a      	ldrb	r2, [r7, #29]
 8005fd2:	7afb      	ldrb	r3, [r7, #11]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d39a      	bcc.n	8005f0e <drawChar+0x96>
        for(yy=0; yy<h; yy++) {
 8005fd8:	7f3b      	ldrb	r3, [r7, #28]
 8005fda:	3301      	adds	r3, #1
 8005fdc:	773b      	strb	r3, [r7, #28]
 8005fde:	7f3a      	ldrb	r2, [r7, #28]
 8005fe0:	7abb      	ldrb	r3, [r7, #10]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d390      	bcc.n	8005f08 <drawChar+0x90>
            }
        }

    } // End classic vs custom font
}
 8005fe6:	bf00      	nop
 8005fe8:	bf00      	nop
 8005fea:	3724      	adds	r7, #36	; 0x24
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd90      	pop	{r4, r7, pc}
 8005ff0:	20000274 	.word	0x20000274

08005ff4 <write>:
    @brief  Print one byte/character of data, used to support print()
    @param  c  The 8-bit ascii character to write
*/
/**************************************************************************/
size_t write(uint8_t c)
{
 8005ff4:	b5b0      	push	{r4, r5, r7, lr}
 8005ff6:	b088      	sub	sp, #32
 8005ff8:	af02      	add	r7, sp, #8
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	71fb      	strb	r3, [r7, #7]
	{

        if(c == '\n') {
 8005ffe:	79fb      	ldrb	r3, [r7, #7]
 8006000:	2b0a      	cmp	r3, #10
 8006002:	d112      	bne.n	800602a <write+0x36>
            cursor_x  = 0;
 8006004:	4b46      	ldr	r3, [pc, #280]	; (8006120 <write+0x12c>)
 8006006:	2200      	movs	r2, #0
 8006008:	701a      	strb	r2, [r3, #0]
            cursor_y += (int16_t)textsize *
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 800600a:	4b46      	ldr	r3, [pc, #280]	; (8006124 <write+0x130>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	330a      	adds	r3, #10
 8006010:	781a      	ldrb	r2, [r3, #0]
            cursor_y += (int16_t)textsize *
 8006012:	4b45      	ldr	r3, [pc, #276]	; (8006128 <write+0x134>)
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	fb12 f303 	smulbb	r3, r2, r3
 800601a:	b2da      	uxtb	r2, r3
 800601c:	4b43      	ldr	r3, [pc, #268]	; (800612c <write+0x138>)
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	4413      	add	r3, r2
 8006022:	b2da      	uxtb	r2, r3
 8006024:	4b41      	ldr	r3, [pc, #260]	; (800612c <write+0x138>)
 8006026:	701a      	strb	r2, [r3, #0]
 8006028:	e074      	b.n	8006114 <write+0x120>
        } else if(c != '\r') {
 800602a:	79fb      	ldrb	r3, [r7, #7]
 800602c:	2b0d      	cmp	r3, #13
 800602e:	d071      	beq.n	8006114 <write+0x120>
            uint8_t first = pgm_read_byte(&gfxFont->first);
 8006030:	4b3c      	ldr	r3, [pc, #240]	; (8006124 <write+0x130>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	7a1b      	ldrb	r3, [r3, #8]
 8006036:	75fb      	strb	r3, [r7, #23]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
 8006038:	79fa      	ldrb	r2, [r7, #7]
 800603a:	7dfb      	ldrb	r3, [r7, #23]
 800603c:	429a      	cmp	r2, r3
 800603e:	d369      	bcc.n	8006114 <write+0x120>
 8006040:	4b38      	ldr	r3, [pc, #224]	; (8006124 <write+0x130>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	3309      	adds	r3, #9
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	79fa      	ldrb	r2, [r7, #7]
 800604a:	429a      	cmp	r2, r3
 800604c:	d862      	bhi.n	8006114 <write+0x120>
                GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(
                  &gfxFont->glyph))[c - first]);
 800604e:	79fa      	ldrb	r2, [r7, #7]
 8006050:	7dfb      	ldrb	r3, [r7, #23]
 8006052:	1ad3      	subs	r3, r2, r3
 8006054:	00da      	lsls	r2, r3, #3
                GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(
 8006056:	4b33      	ldr	r3, [pc, #204]	; (8006124 <write+0x130>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	3304      	adds	r3, #4
                  &gfxFont->glyph))[c - first]);
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4413      	add	r3, r2
                GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(
 8006060:	613b      	str	r3, [r7, #16]
                uint8_t   w     = pgm_read_byte(&glyph->width),
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	789b      	ldrb	r3, [r3, #2]
 8006066:	73fb      	strb	r3, [r7, #15]
                          h     = pgm_read_byte(&glyph->height);
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	78db      	ldrb	r3, [r3, #3]
 800606c:	73bb      	strb	r3, [r7, #14]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
 800606e:	7bfb      	ldrb	r3, [r7, #15]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d041      	beq.n	80060f8 <write+0x104>
 8006074:	7bbb      	ldrb	r3, [r7, #14]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d03e      	beq.n	80060f8 <write+0x104>
                    int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	3305      	adds	r3, #5
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	b25b      	sxtb	r3, r3
 8006082:	81bb      	strh	r3, [r7, #12]
                    if(wrap && ((cursor_x + textsize * (xo + w)) > _width)) {
 8006084:	4b2a      	ldr	r3, [pc, #168]	; (8006130 <write+0x13c>)
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d022      	beq.n	80060d2 <write+0xde>
 800608c:	4b24      	ldr	r3, [pc, #144]	; (8006120 <write+0x12c>)
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	4619      	mov	r1, r3
 8006092:	4b25      	ldr	r3, [pc, #148]	; (8006128 <write+0x134>)
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	4618      	mov	r0, r3
 8006098:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800609c:	7bfb      	ldrb	r3, [r7, #15]
 800609e:	4413      	add	r3, r2
 80060a0:	fb03 f300 	mul.w	r3, r3, r0
 80060a4:	440b      	add	r3, r1
 80060a6:	4a23      	ldr	r2, [pc, #140]	; (8006134 <write+0x140>)
 80060a8:	8812      	ldrh	r2, [r2, #0]
 80060aa:	4293      	cmp	r3, r2
 80060ac:	dd11      	ble.n	80060d2 <write+0xde>
                        cursor_x  = 0;
 80060ae:	4b1c      	ldr	r3, [pc, #112]	; (8006120 <write+0x12c>)
 80060b0:	2200      	movs	r2, #0
 80060b2:	701a      	strb	r2, [r3, #0]
                        cursor_y += (int16_t)textsize *
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 80060b4:	4b1b      	ldr	r3, [pc, #108]	; (8006124 <write+0x130>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	330a      	adds	r3, #10
 80060ba:	781a      	ldrb	r2, [r3, #0]
                        cursor_y += (int16_t)textsize *
 80060bc:	4b1a      	ldr	r3, [pc, #104]	; (8006128 <write+0x134>)
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	fb12 f303 	smulbb	r3, r2, r3
 80060c4:	b2da      	uxtb	r2, r3
 80060c6:	4b19      	ldr	r3, [pc, #100]	; (800612c <write+0x138>)
 80060c8:	781b      	ldrb	r3, [r3, #0]
 80060ca:	4413      	add	r3, r2
 80060cc:	b2da      	uxtb	r2, r3
 80060ce:	4b17      	ldr	r3, [pc, #92]	; (800612c <write+0x138>)
 80060d0:	701a      	strb	r2, [r3, #0]
                    }
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
 80060d2:	4b13      	ldr	r3, [pc, #76]	; (8006120 <write+0x12c>)
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	b218      	sxth	r0, r3
 80060d8:	4b14      	ldr	r3, [pc, #80]	; (800612c <write+0x138>)
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	b219      	sxth	r1, r3
 80060de:	4b16      	ldr	r3, [pc, #88]	; (8006138 <write+0x144>)
 80060e0:	881d      	ldrh	r5, [r3, #0]
 80060e2:	4b16      	ldr	r3, [pc, #88]	; (800613c <write+0x148>)
 80060e4:	881b      	ldrh	r3, [r3, #0]
 80060e6:	4a10      	ldr	r2, [pc, #64]	; (8006128 <write+0x134>)
 80060e8:	7812      	ldrb	r2, [r2, #0]
 80060ea:	79fc      	ldrb	r4, [r7, #7]
 80060ec:	9201      	str	r2, [sp, #4]
 80060ee:	9300      	str	r3, [sp, #0]
 80060f0:	462b      	mov	r3, r5
 80060f2:	4622      	mov	r2, r4
 80060f4:	f7ff fec0 	bl	8005e78 <drawChar>
                }
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize;
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	3304      	adds	r3, #4
 80060fc:	781a      	ldrb	r2, [r3, #0]
 80060fe:	4b0a      	ldr	r3, [pc, #40]	; (8006128 <write+0x134>)
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	fb12 f303 	smulbb	r3, r2, r3
 8006106:	b2da      	uxtb	r2, r3
 8006108:	4b05      	ldr	r3, [pc, #20]	; (8006120 <write+0x12c>)
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	4413      	add	r3, r2
 800610e:	b2da      	uxtb	r2, r3
 8006110:	4b03      	ldr	r3, [pc, #12]	; (8006120 <write+0x12c>)
 8006112:	701a      	strb	r2, [r3, #0]
            }
        }

    }
    return 1;
 8006114:	2301      	movs	r3, #1
}
 8006116:	4618      	mov	r0, r3
 8006118:	3718      	adds	r7, #24
 800611a:	46bd      	mov	sp, r7
 800611c:	bdb0      	pop	{r4, r5, r7, pc}
 800611e:	bf00      	nop
 8006120:	2000021d 	.word	0x2000021d
 8006124:	20000274 	.word	0x20000274
 8006128:	20000014 	.word	0x20000014
 800612c:	2000021c 	.word	0x2000021c
 8006130:	2000001a 	.word	0x2000001a
 8006134:	20000010 	.word	0x20000010
 8006138:	20000016 	.word	0x20000016
 800613c:	20000018 	.word	0x20000018

08006140 <setFont>:
/*!
    @brief Set the font to display when print()ing, either custom or default
    @param  f  The GFXfont object, if NULL use built in 6x8 font
*/
/**************************************************************************/
void setFont(const GFXfont *f) {
 8006140:	b480      	push	{r7}
 8006142:	b083      	sub	sp, #12
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
    if(f) {            // Font struct pointer passed in?
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d00a      	beq.n	8006164 <setFont+0x24>
        if(!gfxFont) { // And no current font struct?
 800614e:	4b0f      	ldr	r3, [pc, #60]	; (800618c <setFont+0x4c>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d110      	bne.n	8006178 <setFont+0x38>
            // Switching from classic to new font behavior.
            // Move cursor pos down 6 pixels so it's on baseline.
            cursor_y += 6;
 8006156:	4b0e      	ldr	r3, [pc, #56]	; (8006190 <setFont+0x50>)
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	3306      	adds	r3, #6
 800615c:	b2da      	uxtb	r2, r3
 800615e:	4b0c      	ldr	r3, [pc, #48]	; (8006190 <setFont+0x50>)
 8006160:	701a      	strb	r2, [r3, #0]
 8006162:	e009      	b.n	8006178 <setFont+0x38>
        }
    } else if(gfxFont) { // NULL passed.  Current font struct defined?
 8006164:	4b09      	ldr	r3, [pc, #36]	; (800618c <setFont+0x4c>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d005      	beq.n	8006178 <setFont+0x38>
        // Switching from new to classic font behavior.
        // Move cursor pos up 6 pixels so it's at top-left of char.
        cursor_y -= 6;
 800616c:	4b08      	ldr	r3, [pc, #32]	; (8006190 <setFont+0x50>)
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	3b06      	subs	r3, #6
 8006172:	b2da      	uxtb	r2, r3
 8006174:	4b06      	ldr	r3, [pc, #24]	; (8006190 <setFont+0x50>)
 8006176:	701a      	strb	r2, [r3, #0]
    }
    gfxFont = (GFXfont *)f;
 8006178:	4a04      	ldr	r2, [pc, #16]	; (800618c <setFont+0x4c>)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6013      	str	r3, [r2, #0]
}
 800617e:	bf00      	nop
 8006180:	370c      	adds	r7, #12
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr
 800618a:	bf00      	nop
 800618c:	20000274 	.word	0x20000274
 8006190:	2000021c 	.word	0x2000021c

08006194 <printnewtstr>:
    @param	txtsize	The size of de text
    @param	str	A point to the string
*/
/**************************************************************************/
void printnewtstr (int row, uint16_t txtcolor, const GFXfont *f, uint8_t txtsize, uint8_t *str)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b084      	sub	sp, #16
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	607a      	str	r2, [r7, #4]
 800619e:	461a      	mov	r2, r3
 80061a0:	460b      	mov	r3, r1
 80061a2:	817b      	strh	r3, [r7, #10]
 80061a4:	4613      	mov	r3, r2
 80061a6:	727b      	strb	r3, [r7, #9]
	setFont(f);
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f7ff ffc9 	bl	8006140 <setFont>
	textcolor = txtcolor;
 80061ae:	4a11      	ldr	r2, [pc, #68]	; (80061f4 <printnewtstr+0x60>)
 80061b0:	897b      	ldrh	r3, [r7, #10]
 80061b2:	8013      	strh	r3, [r2, #0]
	textsize = (txtsize > 0) ? txtsize : 1;
 80061b4:	7a7b      	ldrb	r3, [r7, #9]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d001      	beq.n	80061be <printnewtstr+0x2a>
 80061ba:	7a7b      	ldrb	r3, [r7, #9]
 80061bc:	e000      	b.n	80061c0 <printnewtstr+0x2c>
 80061be:	2301      	movs	r3, #1
 80061c0:	4a0d      	ldr	r2, [pc, #52]	; (80061f8 <printnewtstr+0x64>)
 80061c2:	7013      	strb	r3, [r2, #0]
	setCursor(0, row);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	b21b      	sxth	r3, r3
 80061c8:	4619      	mov	r1, r3
 80061ca:	2000      	movs	r0, #0
 80061cc:	f000 f816 	bl	80061fc <setCursor>
	//while (*str) write (*str++);
	while (*str) write(*str++);
 80061d0:	e006      	b.n	80061e0 <printnewtstr+0x4c>
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	1c5a      	adds	r2, r3, #1
 80061d6:	61ba      	str	r2, [r7, #24]
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	4618      	mov	r0, r3
 80061dc:	f7ff ff0a 	bl	8005ff4 <write>
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d1f4      	bne.n	80061d2 <printnewtstr+0x3e>
}
 80061e8:	bf00      	nop
 80061ea:	bf00      	nop
 80061ec:	3710      	adds	r7, #16
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	bf00      	nop
 80061f4:	20000016 	.word	0x20000016
 80061f8:	20000014 	.word	0x20000014

080061fc <setCursor>:
	textsize = size;
}


void setCursor(int16_t x, int16_t y)
{ cursor_x = x; cursor_y = y; }
 80061fc:	b480      	push	{r7}
 80061fe:	b083      	sub	sp, #12
 8006200:	af00      	add	r7, sp, #0
 8006202:	4603      	mov	r3, r0
 8006204:	460a      	mov	r2, r1
 8006206:	80fb      	strh	r3, [r7, #6]
 8006208:	4613      	mov	r3, r2
 800620a:	80bb      	strh	r3, [r7, #4]
 800620c:	88fb      	ldrh	r3, [r7, #6]
 800620e:	b2da      	uxtb	r2, r3
 8006210:	4b05      	ldr	r3, [pc, #20]	; (8006228 <setCursor+0x2c>)
 8006212:	701a      	strb	r2, [r3, #0]
 8006214:	88bb      	ldrh	r3, [r7, #4]
 8006216:	b2da      	uxtb	r2, r3
 8006218:	4b04      	ldr	r3, [pc, #16]	; (800622c <setCursor+0x30>)
 800621a:	701a      	strb	r2, [r3, #0]
 800621c:	bf00      	nop
 800621e:	370c      	adds	r7, #12
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr
 8006228:	2000021d 	.word	0x2000021d
 800622c:	2000021c 	.word	0x2000021c

08006230 <delay>:


/****************** delay in microseconds ***********************/
extern TIM_HandleTypeDef htim1;
void delay (uint32_t time)
{
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
	/* change your code here for the delay in microseconds */
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8006238:	4b08      	ldr	r3, [pc, #32]	; (800625c <delay+0x2c>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	2200      	movs	r2, #0
 800623e:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim1))<time);
 8006240:	bf00      	nop
 8006242:	4b06      	ldr	r3, [pc, #24]	; (800625c <delay+0x2c>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	429a      	cmp	r2, r3
 800624c:	d8f9      	bhi.n	8006242 <delay+0x12>
}
 800624e:	bf00      	nop
 8006250:	bf00      	nop
 8006252:	370c      	adds	r7, #12
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr
 800625c:	20000330 	.word	0x20000330

08006260 <tft_gpio_init>:
}


/****************** Inicialização de GPIOs **********************/
void tft_gpio_init(void)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8006266:	2300      	movs	r3, #0
 8006268:	60fb      	str	r3, [r7, #12]
 800626a:	4b32      	ldr	r3, [pc, #200]	; (8006334 <tft_gpio_init+0xd4>)
 800626c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800626e:	4a31      	ldr	r2, [pc, #196]	; (8006334 <tft_gpio_init+0xd4>)
 8006270:	f043 0304 	orr.w	r3, r3, #4
 8006274:	6313      	str	r3, [r2, #48]	; 0x30
 8006276:	4b2f      	ldr	r3, [pc, #188]	; (8006334 <tft_gpio_init+0xd4>)
 8006278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800627a:	f003 0304 	and.w	r3, r3, #4
 800627e:	60fb      	str	r3, [r7, #12]
 8006280:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8006282:	2300      	movs	r3, #0
 8006284:	60bb      	str	r3, [r7, #8]
 8006286:	4b2b      	ldr	r3, [pc, #172]	; (8006334 <tft_gpio_init+0xd4>)
 8006288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800628a:	4a2a      	ldr	r2, [pc, #168]	; (8006334 <tft_gpio_init+0xd4>)
 800628c:	f043 0301 	orr.w	r3, r3, #1
 8006290:	6313      	str	r3, [r2, #48]	; 0x30
 8006292:	4b28      	ldr	r3, [pc, #160]	; (8006334 <tft_gpio_init+0xd4>)
 8006294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006296:	f003 0301 	and.w	r3, r3, #1
 800629a:	60bb      	str	r3, [r7, #8]
 800629c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800629e:	2300      	movs	r3, #0
 80062a0:	607b      	str	r3, [r7, #4]
 80062a2:	4b24      	ldr	r3, [pc, #144]	; (8006334 <tft_gpio_init+0xd4>)
 80062a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a6:	4a23      	ldr	r2, [pc, #140]	; (8006334 <tft_gpio_init+0xd4>)
 80062a8:	f043 0302 	orr.w	r3, r3, #2
 80062ac:	6313      	str	r3, [r2, #48]	; 0x30
 80062ae:	4b21      	ldr	r3, [pc, #132]	; (8006334 <tft_gpio_init+0xd4>)
 80062b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062b2:	f003 0302 	and.w	r3, r3, #2
 80062b6:	607b      	str	r3, [r7, #4]
 80062b8:	687b      	ldr	r3, [r7, #4]

	PIN_OUTPUT(RD_PORT, RD_PIN);
 80062ba:	2101      	movs	r1, #1
 80062bc:	481e      	ldr	r0, [pc, #120]	; (8006338 <tft_gpio_init+0xd8>)
 80062be:	f7fb ffbf 	bl	8002240 <PIN_OUTPUT>
	PIN_OUTPUT(WR_PORT, WR_PIN);
 80062c2:	2102      	movs	r1, #2
 80062c4:	481c      	ldr	r0, [pc, #112]	; (8006338 <tft_gpio_init+0xd8>)
 80062c6:	f7fb ffbb 	bl	8002240 <PIN_OUTPUT>
	PIN_OUTPUT(CD_PORT, CD_PIN);
 80062ca:	2110      	movs	r1, #16
 80062cc:	481a      	ldr	r0, [pc, #104]	; (8006338 <tft_gpio_init+0xd8>)
 80062ce:	f7fb ffb7 	bl	8002240 <PIN_OUTPUT>
	PIN_OUTPUT(CS_PORT, CS_PIN);
 80062d2:	2101      	movs	r1, #1
 80062d4:	4819      	ldr	r0, [pc, #100]	; (800633c <tft_gpio_init+0xdc>)
 80062d6:	f7fb ffb3 	bl	8002240 <PIN_OUTPUT>
	PIN_OUTPUT(RESET_PORT, RESET_PIN);
 80062da:	2102      	movs	r1, #2
 80062dc:	4818      	ldr	r0, [pc, #96]	; (8006340 <tft_gpio_init+0xe0>)
 80062de:	f7fb ffaf 	bl	8002240 <PIN_OUTPUT>

	PIN_OUTPUT(D0_PORT, D0_PIN);
 80062e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80062e6:	4814      	ldr	r0, [pc, #80]	; (8006338 <tft_gpio_init+0xd8>)
 80062e8:	f7fb ffaa 	bl	8002240 <PIN_OUTPUT>
	PIN_OUTPUT(D1_PORT, D1_PIN);
 80062ec:	2180      	movs	r1, #128	; 0x80
 80062ee:	4814      	ldr	r0, [pc, #80]	; (8006340 <tft_gpio_init+0xe0>)
 80062f0:	f7fb ffa6 	bl	8002240 <PIN_OUTPUT>
	PIN_OUTPUT(D2_PORT, D2_PIN);
 80062f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80062f8:	480f      	ldr	r0, [pc, #60]	; (8006338 <tft_gpio_init+0xd8>)
 80062fa:	f7fb ffa1 	bl	8002240 <PIN_OUTPUT>
	PIN_OUTPUT(D3_PORT, D3_PIN);
 80062fe:	2108      	movs	r1, #8
 8006300:	480e      	ldr	r0, [pc, #56]	; (800633c <tft_gpio_init+0xdc>)
 8006302:	f7fb ff9d 	bl	8002240 <PIN_OUTPUT>
	PIN_OUTPUT(D4_PORT, D4_PIN);
 8006306:	2120      	movs	r1, #32
 8006308:	480c      	ldr	r0, [pc, #48]	; (800633c <tft_gpio_init+0xdc>)
 800630a:	f7fb ff99 	bl	8002240 <PIN_OUTPUT>
	PIN_OUTPUT(D5_PORT, D5_PIN);
 800630e:	2110      	movs	r1, #16
 8006310:	480a      	ldr	r0, [pc, #40]	; (800633c <tft_gpio_init+0xdc>)
 8006312:	f7fb ff95 	bl	8002240 <PIN_OUTPUT>
	PIN_OUTPUT(D6_PORT, D6_PIN);
 8006316:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800631a:	4808      	ldr	r0, [pc, #32]	; (800633c <tft_gpio_init+0xdc>)
 800631c:	f7fb ff90 	bl	8002240 <PIN_OUTPUT>
	PIN_OUTPUT(D7_PORT, D7_PIN);
 8006320:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006324:	4804      	ldr	r0, [pc, #16]	; (8006338 <tft_gpio_init+0xd8>)
 8006326:	f7fb ff8b 	bl	8002240 <PIN_OUTPUT>
}
 800632a:	bf00      	nop
 800632c:	3710      	adds	r7, #16
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}
 8006332:	bf00      	nop
 8006334:	40023800 	.word	0x40023800
 8006338:	40020000 	.word	0x40020000
 800633c:	40020400 	.word	0x40020400
 8006340:	40020800 	.word	0x40020800

08006344 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006344:	f8df d034 	ldr.w	sp, [pc, #52]	; 800637c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006348:	480d      	ldr	r0, [pc, #52]	; (8006380 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800634a:	490e      	ldr	r1, [pc, #56]	; (8006384 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800634c:	4a0e      	ldr	r2, [pc, #56]	; (8006388 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800634e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006350:	e002      	b.n	8006358 <LoopCopyDataInit>

08006352 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006352:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006354:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006356:	3304      	adds	r3, #4

08006358 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006358:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800635a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800635c:	d3f9      	bcc.n	8006352 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800635e:	4a0b      	ldr	r2, [pc, #44]	; (800638c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006360:	4c0b      	ldr	r4, [pc, #44]	; (8006390 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006362:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006364:	e001      	b.n	800636a <LoopFillZerobss>

08006366 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006366:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006368:	3204      	adds	r2, #4

0800636a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800636a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800636c:	d3fb      	bcc.n	8006366 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800636e:	f7fb ff1f 	bl	80021b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006372:	f002 ff2f 	bl	80091d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006376:	f7fb f9cb 	bl	8001710 <main>
  bx  lr    
 800637a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800637c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006380:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006384:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8006388:	0800d298 	.word	0x0800d298
  ldr r2, =_sbss
 800638c:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8006390:	200003ec 	.word	0x200003ec

08006394 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006394:	e7fe      	b.n	8006394 <ADC_IRQHandler>
	...

08006398 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800639c:	4b0e      	ldr	r3, [pc, #56]	; (80063d8 <HAL_Init+0x40>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a0d      	ldr	r2, [pc, #52]	; (80063d8 <HAL_Init+0x40>)
 80063a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80063a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80063a8:	4b0b      	ldr	r3, [pc, #44]	; (80063d8 <HAL_Init+0x40>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a0a      	ldr	r2, [pc, #40]	; (80063d8 <HAL_Init+0x40>)
 80063ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80063b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80063b4:	4b08      	ldr	r3, [pc, #32]	; (80063d8 <HAL_Init+0x40>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a07      	ldr	r2, [pc, #28]	; (80063d8 <HAL_Init+0x40>)
 80063ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80063c0:	2003      	movs	r0, #3
 80063c2:	f000 f931 	bl	8006628 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80063c6:	2000      	movs	r0, #0
 80063c8:	f000 f808 	bl	80063dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80063cc:	f7fb fcae 	bl	8001d2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80063d0:	2300      	movs	r3, #0
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	40023c00 	.word	0x40023c00

080063dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b082      	sub	sp, #8
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80063e4:	4b12      	ldr	r3, [pc, #72]	; (8006430 <HAL_InitTick+0x54>)
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	4b12      	ldr	r3, [pc, #72]	; (8006434 <HAL_InitTick+0x58>)
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	4619      	mov	r1, r3
 80063ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80063f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80063f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80063fa:	4618      	mov	r0, r3
 80063fc:	f000 f93b 	bl	8006676 <HAL_SYSTICK_Config>
 8006400:	4603      	mov	r3, r0
 8006402:	2b00      	cmp	r3, #0
 8006404:	d001      	beq.n	800640a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	e00e      	b.n	8006428 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2b0f      	cmp	r3, #15
 800640e:	d80a      	bhi.n	8006426 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006410:	2200      	movs	r2, #0
 8006412:	6879      	ldr	r1, [r7, #4]
 8006414:	f04f 30ff 	mov.w	r0, #4294967295
 8006418:	f000 f911 	bl	800663e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800641c:	4a06      	ldr	r2, [pc, #24]	; (8006438 <HAL_InitTick+0x5c>)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006422:	2300      	movs	r3, #0
 8006424:	e000      	b.n	8006428 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006426:	2301      	movs	r3, #1
}
 8006428:	4618      	mov	r0, r3
 800642a:	3708      	adds	r7, #8
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}
 8006430:	2000000c 	.word	0x2000000c
 8006434:	20000020 	.word	0x20000020
 8006438:	2000001c 	.word	0x2000001c

0800643c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800643c:	b480      	push	{r7}
 800643e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006440:	4b06      	ldr	r3, [pc, #24]	; (800645c <HAL_IncTick+0x20>)
 8006442:	781b      	ldrb	r3, [r3, #0]
 8006444:	461a      	mov	r2, r3
 8006446:	4b06      	ldr	r3, [pc, #24]	; (8006460 <HAL_IncTick+0x24>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4413      	add	r3, r2
 800644c:	4a04      	ldr	r2, [pc, #16]	; (8006460 <HAL_IncTick+0x24>)
 800644e:	6013      	str	r3, [r2, #0]
}
 8006450:	bf00      	nop
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr
 800645a:	bf00      	nop
 800645c:	20000020 	.word	0x20000020
 8006460:	200003d8 	.word	0x200003d8

08006464 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006464:	b480      	push	{r7}
 8006466:	af00      	add	r7, sp, #0
  return uwTick;
 8006468:	4b03      	ldr	r3, [pc, #12]	; (8006478 <HAL_GetTick+0x14>)
 800646a:	681b      	ldr	r3, [r3, #0]
}
 800646c:	4618      	mov	r0, r3
 800646e:	46bd      	mov	sp, r7
 8006470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006474:	4770      	bx	lr
 8006476:	bf00      	nop
 8006478:	200003d8 	.word	0x200003d8

0800647c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006484:	f7ff ffee 	bl	8006464 <HAL_GetTick>
 8006488:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006494:	d005      	beq.n	80064a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006496:	4b0a      	ldr	r3, [pc, #40]	; (80064c0 <HAL_Delay+0x44>)
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	461a      	mov	r2, r3
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	4413      	add	r3, r2
 80064a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80064a2:	bf00      	nop
 80064a4:	f7ff ffde 	bl	8006464 <HAL_GetTick>
 80064a8:	4602      	mov	r2, r0
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	1ad3      	subs	r3, r2, r3
 80064ae:	68fa      	ldr	r2, [r7, #12]
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d8f7      	bhi.n	80064a4 <HAL_Delay+0x28>
  {
  }
}
 80064b4:	bf00      	nop
 80064b6:	bf00      	nop
 80064b8:	3710      	adds	r7, #16
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop
 80064c0:	20000020 	.word	0x20000020

080064c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b085      	sub	sp, #20
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f003 0307 	and.w	r3, r3, #7
 80064d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80064d4:	4b0c      	ldr	r3, [pc, #48]	; (8006508 <__NVIC_SetPriorityGrouping+0x44>)
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80064da:	68ba      	ldr	r2, [r7, #8]
 80064dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80064e0:	4013      	ands	r3, r2
 80064e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80064ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80064f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80064f6:	4a04      	ldr	r2, [pc, #16]	; (8006508 <__NVIC_SetPriorityGrouping+0x44>)
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	60d3      	str	r3, [r2, #12]
}
 80064fc:	bf00      	nop
 80064fe:	3714      	adds	r7, #20
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr
 8006508:	e000ed00 	.word	0xe000ed00

0800650c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800650c:	b480      	push	{r7}
 800650e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006510:	4b04      	ldr	r3, [pc, #16]	; (8006524 <__NVIC_GetPriorityGrouping+0x18>)
 8006512:	68db      	ldr	r3, [r3, #12]
 8006514:	0a1b      	lsrs	r3, r3, #8
 8006516:	f003 0307 	and.w	r3, r3, #7
}
 800651a:	4618      	mov	r0, r3
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr
 8006524:	e000ed00 	.word	0xe000ed00

08006528 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
 800652e:	4603      	mov	r3, r0
 8006530:	6039      	str	r1, [r7, #0]
 8006532:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006538:	2b00      	cmp	r3, #0
 800653a:	db0a      	blt.n	8006552 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	b2da      	uxtb	r2, r3
 8006540:	490c      	ldr	r1, [pc, #48]	; (8006574 <__NVIC_SetPriority+0x4c>)
 8006542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006546:	0112      	lsls	r2, r2, #4
 8006548:	b2d2      	uxtb	r2, r2
 800654a:	440b      	add	r3, r1
 800654c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006550:	e00a      	b.n	8006568 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	b2da      	uxtb	r2, r3
 8006556:	4908      	ldr	r1, [pc, #32]	; (8006578 <__NVIC_SetPriority+0x50>)
 8006558:	79fb      	ldrb	r3, [r7, #7]
 800655a:	f003 030f 	and.w	r3, r3, #15
 800655e:	3b04      	subs	r3, #4
 8006560:	0112      	lsls	r2, r2, #4
 8006562:	b2d2      	uxtb	r2, r2
 8006564:	440b      	add	r3, r1
 8006566:	761a      	strb	r2, [r3, #24]
}
 8006568:	bf00      	nop
 800656a:	370c      	adds	r7, #12
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr
 8006574:	e000e100 	.word	0xe000e100
 8006578:	e000ed00 	.word	0xe000ed00

0800657c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800657c:	b480      	push	{r7}
 800657e:	b089      	sub	sp, #36	; 0x24
 8006580:	af00      	add	r7, sp, #0
 8006582:	60f8      	str	r0, [r7, #12]
 8006584:	60b9      	str	r1, [r7, #8]
 8006586:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f003 0307 	and.w	r3, r3, #7
 800658e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006590:	69fb      	ldr	r3, [r7, #28]
 8006592:	f1c3 0307 	rsb	r3, r3, #7
 8006596:	2b04      	cmp	r3, #4
 8006598:	bf28      	it	cs
 800659a:	2304      	movcs	r3, #4
 800659c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800659e:	69fb      	ldr	r3, [r7, #28]
 80065a0:	3304      	adds	r3, #4
 80065a2:	2b06      	cmp	r3, #6
 80065a4:	d902      	bls.n	80065ac <NVIC_EncodePriority+0x30>
 80065a6:	69fb      	ldr	r3, [r7, #28]
 80065a8:	3b03      	subs	r3, #3
 80065aa:	e000      	b.n	80065ae <NVIC_EncodePriority+0x32>
 80065ac:	2300      	movs	r3, #0
 80065ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80065b0:	f04f 32ff 	mov.w	r2, #4294967295
 80065b4:	69bb      	ldr	r3, [r7, #24]
 80065b6:	fa02 f303 	lsl.w	r3, r2, r3
 80065ba:	43da      	mvns	r2, r3
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	401a      	ands	r2, r3
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80065c4:	f04f 31ff 	mov.w	r1, #4294967295
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	fa01 f303 	lsl.w	r3, r1, r3
 80065ce:	43d9      	mvns	r1, r3
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80065d4:	4313      	orrs	r3, r2
         );
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3724      	adds	r7, #36	; 0x24
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr
	...

080065e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b082      	sub	sp, #8
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	3b01      	subs	r3, #1
 80065f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80065f4:	d301      	bcc.n	80065fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80065f6:	2301      	movs	r3, #1
 80065f8:	e00f      	b.n	800661a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80065fa:	4a0a      	ldr	r2, [pc, #40]	; (8006624 <SysTick_Config+0x40>)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	3b01      	subs	r3, #1
 8006600:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006602:	210f      	movs	r1, #15
 8006604:	f04f 30ff 	mov.w	r0, #4294967295
 8006608:	f7ff ff8e 	bl	8006528 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800660c:	4b05      	ldr	r3, [pc, #20]	; (8006624 <SysTick_Config+0x40>)
 800660e:	2200      	movs	r2, #0
 8006610:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006612:	4b04      	ldr	r3, [pc, #16]	; (8006624 <SysTick_Config+0x40>)
 8006614:	2207      	movs	r2, #7
 8006616:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006618:	2300      	movs	r3, #0
}
 800661a:	4618      	mov	r0, r3
 800661c:	3708      	adds	r7, #8
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
 8006622:	bf00      	nop
 8006624:	e000e010 	.word	0xe000e010

08006628 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b082      	sub	sp, #8
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f7ff ff47 	bl	80064c4 <__NVIC_SetPriorityGrouping>
}
 8006636:	bf00      	nop
 8006638:	3708      	adds	r7, #8
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}

0800663e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800663e:	b580      	push	{r7, lr}
 8006640:	b086      	sub	sp, #24
 8006642:	af00      	add	r7, sp, #0
 8006644:	4603      	mov	r3, r0
 8006646:	60b9      	str	r1, [r7, #8]
 8006648:	607a      	str	r2, [r7, #4]
 800664a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800664c:	2300      	movs	r3, #0
 800664e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006650:	f7ff ff5c 	bl	800650c <__NVIC_GetPriorityGrouping>
 8006654:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006656:	687a      	ldr	r2, [r7, #4]
 8006658:	68b9      	ldr	r1, [r7, #8]
 800665a:	6978      	ldr	r0, [r7, #20]
 800665c:	f7ff ff8e 	bl	800657c <NVIC_EncodePriority>
 8006660:	4602      	mov	r2, r0
 8006662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006666:	4611      	mov	r1, r2
 8006668:	4618      	mov	r0, r3
 800666a:	f7ff ff5d 	bl	8006528 <__NVIC_SetPriority>
}
 800666e:	bf00      	nop
 8006670:	3718      	adds	r7, #24
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}

08006676 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006676:	b580      	push	{r7, lr}
 8006678:	b082      	sub	sp, #8
 800667a:	af00      	add	r7, sp, #0
 800667c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f7ff ffb0 	bl	80065e4 <SysTick_Config>
 8006684:	4603      	mov	r3, r0
}
 8006686:	4618      	mov	r0, r3
 8006688:	3708      	adds	r7, #8
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
	...

08006690 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006690:	b480      	push	{r7}
 8006692:	b089      	sub	sp, #36	; 0x24
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800669a:	2300      	movs	r3, #0
 800669c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800669e:	2300      	movs	r3, #0
 80066a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80066a2:	2300      	movs	r3, #0
 80066a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80066a6:	2300      	movs	r3, #0
 80066a8:	61fb      	str	r3, [r7, #28]
 80066aa:	e165      	b.n	8006978 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80066ac:	2201      	movs	r2, #1
 80066ae:	69fb      	ldr	r3, [r7, #28]
 80066b0:	fa02 f303 	lsl.w	r3, r2, r3
 80066b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	697a      	ldr	r2, [r7, #20]
 80066bc:	4013      	ands	r3, r2
 80066be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80066c0:	693a      	ldr	r2, [r7, #16]
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	429a      	cmp	r2, r3
 80066c6:	f040 8154 	bne.w	8006972 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	f003 0303 	and.w	r3, r3, #3
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d005      	beq.n	80066e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80066de:	2b02      	cmp	r3, #2
 80066e0:	d130      	bne.n	8006744 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80066e8:	69fb      	ldr	r3, [r7, #28]
 80066ea:	005b      	lsls	r3, r3, #1
 80066ec:	2203      	movs	r2, #3
 80066ee:	fa02 f303 	lsl.w	r3, r2, r3
 80066f2:	43db      	mvns	r3, r3
 80066f4:	69ba      	ldr	r2, [r7, #24]
 80066f6:	4013      	ands	r3, r2
 80066f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	68da      	ldr	r2, [r3, #12]
 80066fe:	69fb      	ldr	r3, [r7, #28]
 8006700:	005b      	lsls	r3, r3, #1
 8006702:	fa02 f303 	lsl.w	r3, r2, r3
 8006706:	69ba      	ldr	r2, [r7, #24]
 8006708:	4313      	orrs	r3, r2
 800670a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	69ba      	ldr	r2, [r7, #24]
 8006710:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006718:	2201      	movs	r2, #1
 800671a:	69fb      	ldr	r3, [r7, #28]
 800671c:	fa02 f303 	lsl.w	r3, r2, r3
 8006720:	43db      	mvns	r3, r3
 8006722:	69ba      	ldr	r2, [r7, #24]
 8006724:	4013      	ands	r3, r2
 8006726:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	091b      	lsrs	r3, r3, #4
 800672e:	f003 0201 	and.w	r2, r3, #1
 8006732:	69fb      	ldr	r3, [r7, #28]
 8006734:	fa02 f303 	lsl.w	r3, r2, r3
 8006738:	69ba      	ldr	r2, [r7, #24]
 800673a:	4313      	orrs	r3, r2
 800673c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	69ba      	ldr	r2, [r7, #24]
 8006742:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	f003 0303 	and.w	r3, r3, #3
 800674c:	2b03      	cmp	r3, #3
 800674e:	d017      	beq.n	8006780 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	68db      	ldr	r3, [r3, #12]
 8006754:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006756:	69fb      	ldr	r3, [r7, #28]
 8006758:	005b      	lsls	r3, r3, #1
 800675a:	2203      	movs	r2, #3
 800675c:	fa02 f303 	lsl.w	r3, r2, r3
 8006760:	43db      	mvns	r3, r3
 8006762:	69ba      	ldr	r2, [r7, #24]
 8006764:	4013      	ands	r3, r2
 8006766:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	689a      	ldr	r2, [r3, #8]
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	005b      	lsls	r3, r3, #1
 8006770:	fa02 f303 	lsl.w	r3, r2, r3
 8006774:	69ba      	ldr	r2, [r7, #24]
 8006776:	4313      	orrs	r3, r2
 8006778:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	69ba      	ldr	r2, [r7, #24]
 800677e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	f003 0303 	and.w	r3, r3, #3
 8006788:	2b02      	cmp	r3, #2
 800678a:	d123      	bne.n	80067d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800678c:	69fb      	ldr	r3, [r7, #28]
 800678e:	08da      	lsrs	r2, r3, #3
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	3208      	adds	r2, #8
 8006794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006798:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800679a:	69fb      	ldr	r3, [r7, #28]
 800679c:	f003 0307 	and.w	r3, r3, #7
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	220f      	movs	r2, #15
 80067a4:	fa02 f303 	lsl.w	r3, r2, r3
 80067a8:	43db      	mvns	r3, r3
 80067aa:	69ba      	ldr	r2, [r7, #24]
 80067ac:	4013      	ands	r3, r2
 80067ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	691a      	ldr	r2, [r3, #16]
 80067b4:	69fb      	ldr	r3, [r7, #28]
 80067b6:	f003 0307 	and.w	r3, r3, #7
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	fa02 f303 	lsl.w	r3, r2, r3
 80067c0:	69ba      	ldr	r2, [r7, #24]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80067c6:	69fb      	ldr	r3, [r7, #28]
 80067c8:	08da      	lsrs	r2, r3, #3
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	3208      	adds	r2, #8
 80067ce:	69b9      	ldr	r1, [r7, #24]
 80067d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80067da:	69fb      	ldr	r3, [r7, #28]
 80067dc:	005b      	lsls	r3, r3, #1
 80067de:	2203      	movs	r2, #3
 80067e0:	fa02 f303 	lsl.w	r3, r2, r3
 80067e4:	43db      	mvns	r3, r3
 80067e6:	69ba      	ldr	r2, [r7, #24]
 80067e8:	4013      	ands	r3, r2
 80067ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	f003 0203 	and.w	r2, r3, #3
 80067f4:	69fb      	ldr	r3, [r7, #28]
 80067f6:	005b      	lsls	r3, r3, #1
 80067f8:	fa02 f303 	lsl.w	r3, r2, r3
 80067fc:	69ba      	ldr	r2, [r7, #24]
 80067fe:	4313      	orrs	r3, r2
 8006800:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	69ba      	ldr	r2, [r7, #24]
 8006806:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006810:	2b00      	cmp	r3, #0
 8006812:	f000 80ae 	beq.w	8006972 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006816:	2300      	movs	r3, #0
 8006818:	60fb      	str	r3, [r7, #12]
 800681a:	4b5d      	ldr	r3, [pc, #372]	; (8006990 <HAL_GPIO_Init+0x300>)
 800681c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800681e:	4a5c      	ldr	r2, [pc, #368]	; (8006990 <HAL_GPIO_Init+0x300>)
 8006820:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006824:	6453      	str	r3, [r2, #68]	; 0x44
 8006826:	4b5a      	ldr	r3, [pc, #360]	; (8006990 <HAL_GPIO_Init+0x300>)
 8006828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800682a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800682e:	60fb      	str	r3, [r7, #12]
 8006830:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006832:	4a58      	ldr	r2, [pc, #352]	; (8006994 <HAL_GPIO_Init+0x304>)
 8006834:	69fb      	ldr	r3, [r7, #28]
 8006836:	089b      	lsrs	r3, r3, #2
 8006838:	3302      	adds	r3, #2
 800683a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800683e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006840:	69fb      	ldr	r3, [r7, #28]
 8006842:	f003 0303 	and.w	r3, r3, #3
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	220f      	movs	r2, #15
 800684a:	fa02 f303 	lsl.w	r3, r2, r3
 800684e:	43db      	mvns	r3, r3
 8006850:	69ba      	ldr	r2, [r7, #24]
 8006852:	4013      	ands	r3, r2
 8006854:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4a4f      	ldr	r2, [pc, #316]	; (8006998 <HAL_GPIO_Init+0x308>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d025      	beq.n	80068aa <HAL_GPIO_Init+0x21a>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4a4e      	ldr	r2, [pc, #312]	; (800699c <HAL_GPIO_Init+0x30c>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d01f      	beq.n	80068a6 <HAL_GPIO_Init+0x216>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	4a4d      	ldr	r2, [pc, #308]	; (80069a0 <HAL_GPIO_Init+0x310>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d019      	beq.n	80068a2 <HAL_GPIO_Init+0x212>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	4a4c      	ldr	r2, [pc, #304]	; (80069a4 <HAL_GPIO_Init+0x314>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d013      	beq.n	800689e <HAL_GPIO_Init+0x20e>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	4a4b      	ldr	r2, [pc, #300]	; (80069a8 <HAL_GPIO_Init+0x318>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d00d      	beq.n	800689a <HAL_GPIO_Init+0x20a>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	4a4a      	ldr	r2, [pc, #296]	; (80069ac <HAL_GPIO_Init+0x31c>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d007      	beq.n	8006896 <HAL_GPIO_Init+0x206>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	4a49      	ldr	r2, [pc, #292]	; (80069b0 <HAL_GPIO_Init+0x320>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d101      	bne.n	8006892 <HAL_GPIO_Init+0x202>
 800688e:	2306      	movs	r3, #6
 8006890:	e00c      	b.n	80068ac <HAL_GPIO_Init+0x21c>
 8006892:	2307      	movs	r3, #7
 8006894:	e00a      	b.n	80068ac <HAL_GPIO_Init+0x21c>
 8006896:	2305      	movs	r3, #5
 8006898:	e008      	b.n	80068ac <HAL_GPIO_Init+0x21c>
 800689a:	2304      	movs	r3, #4
 800689c:	e006      	b.n	80068ac <HAL_GPIO_Init+0x21c>
 800689e:	2303      	movs	r3, #3
 80068a0:	e004      	b.n	80068ac <HAL_GPIO_Init+0x21c>
 80068a2:	2302      	movs	r3, #2
 80068a4:	e002      	b.n	80068ac <HAL_GPIO_Init+0x21c>
 80068a6:	2301      	movs	r3, #1
 80068a8:	e000      	b.n	80068ac <HAL_GPIO_Init+0x21c>
 80068aa:	2300      	movs	r3, #0
 80068ac:	69fa      	ldr	r2, [r7, #28]
 80068ae:	f002 0203 	and.w	r2, r2, #3
 80068b2:	0092      	lsls	r2, r2, #2
 80068b4:	4093      	lsls	r3, r2
 80068b6:	69ba      	ldr	r2, [r7, #24]
 80068b8:	4313      	orrs	r3, r2
 80068ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80068bc:	4935      	ldr	r1, [pc, #212]	; (8006994 <HAL_GPIO_Init+0x304>)
 80068be:	69fb      	ldr	r3, [r7, #28]
 80068c0:	089b      	lsrs	r3, r3, #2
 80068c2:	3302      	adds	r3, #2
 80068c4:	69ba      	ldr	r2, [r7, #24]
 80068c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80068ca:	4b3a      	ldr	r3, [pc, #232]	; (80069b4 <HAL_GPIO_Init+0x324>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	43db      	mvns	r3, r3
 80068d4:	69ba      	ldr	r2, [r7, #24]
 80068d6:	4013      	ands	r3, r2
 80068d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d003      	beq.n	80068ee <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80068e6:	69ba      	ldr	r2, [r7, #24]
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	4313      	orrs	r3, r2
 80068ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80068ee:	4a31      	ldr	r2, [pc, #196]	; (80069b4 <HAL_GPIO_Init+0x324>)
 80068f0:	69bb      	ldr	r3, [r7, #24]
 80068f2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80068f4:	4b2f      	ldr	r3, [pc, #188]	; (80069b4 <HAL_GPIO_Init+0x324>)
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	43db      	mvns	r3, r3
 80068fe:	69ba      	ldr	r2, [r7, #24]
 8006900:	4013      	ands	r3, r2
 8006902:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800690c:	2b00      	cmp	r3, #0
 800690e:	d003      	beq.n	8006918 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8006910:	69ba      	ldr	r2, [r7, #24]
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	4313      	orrs	r3, r2
 8006916:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006918:	4a26      	ldr	r2, [pc, #152]	; (80069b4 <HAL_GPIO_Init+0x324>)
 800691a:	69bb      	ldr	r3, [r7, #24]
 800691c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800691e:	4b25      	ldr	r3, [pc, #148]	; (80069b4 <HAL_GPIO_Init+0x324>)
 8006920:	689b      	ldr	r3, [r3, #8]
 8006922:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	43db      	mvns	r3, r3
 8006928:	69ba      	ldr	r2, [r7, #24]
 800692a:	4013      	ands	r3, r2
 800692c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006936:	2b00      	cmp	r3, #0
 8006938:	d003      	beq.n	8006942 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800693a:	69ba      	ldr	r2, [r7, #24]
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	4313      	orrs	r3, r2
 8006940:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006942:	4a1c      	ldr	r2, [pc, #112]	; (80069b4 <HAL_GPIO_Init+0x324>)
 8006944:	69bb      	ldr	r3, [r7, #24]
 8006946:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006948:	4b1a      	ldr	r3, [pc, #104]	; (80069b4 <HAL_GPIO_Init+0x324>)
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	43db      	mvns	r3, r3
 8006952:	69ba      	ldr	r2, [r7, #24]
 8006954:	4013      	ands	r3, r2
 8006956:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006960:	2b00      	cmp	r3, #0
 8006962:	d003      	beq.n	800696c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006964:	69ba      	ldr	r2, [r7, #24]
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	4313      	orrs	r3, r2
 800696a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800696c:	4a11      	ldr	r2, [pc, #68]	; (80069b4 <HAL_GPIO_Init+0x324>)
 800696e:	69bb      	ldr	r3, [r7, #24]
 8006970:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006972:	69fb      	ldr	r3, [r7, #28]
 8006974:	3301      	adds	r3, #1
 8006976:	61fb      	str	r3, [r7, #28]
 8006978:	69fb      	ldr	r3, [r7, #28]
 800697a:	2b0f      	cmp	r3, #15
 800697c:	f67f ae96 	bls.w	80066ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006980:	bf00      	nop
 8006982:	bf00      	nop
 8006984:	3724      	adds	r7, #36	; 0x24
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr
 800698e:	bf00      	nop
 8006990:	40023800 	.word	0x40023800
 8006994:	40013800 	.word	0x40013800
 8006998:	40020000 	.word	0x40020000
 800699c:	40020400 	.word	0x40020400
 80069a0:	40020800 	.word	0x40020800
 80069a4:	40020c00 	.word	0x40020c00
 80069a8:	40021000 	.word	0x40021000
 80069ac:	40021400 	.word	0x40021400
 80069b0:	40021800 	.word	0x40021800
 80069b4:	40013c00 	.word	0x40013c00

080069b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b083      	sub	sp, #12
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	460b      	mov	r3, r1
 80069c2:	807b      	strh	r3, [r7, #2]
 80069c4:	4613      	mov	r3, r2
 80069c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80069c8:	787b      	ldrb	r3, [r7, #1]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d003      	beq.n	80069d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80069ce:	887a      	ldrh	r2, [r7, #2]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80069d4:	e003      	b.n	80069de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80069d6:	887b      	ldrh	r3, [r7, #2]
 80069d8:	041a      	lsls	r2, r3, #16
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	619a      	str	r2, [r3, #24]
}
 80069de:	bf00      	nop
 80069e0:	370c      	adds	r7, #12
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr

080069ea <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80069ea:	b480      	push	{r7}
 80069ec:	b085      	sub	sp, #20
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	6078      	str	r0, [r7, #4]
 80069f2:	460b      	mov	r3, r1
 80069f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	695b      	ldr	r3, [r3, #20]
 80069fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80069fc:	887a      	ldrh	r2, [r7, #2]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	4013      	ands	r3, r2
 8006a02:	041a      	lsls	r2, r3, #16
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	43d9      	mvns	r1, r3
 8006a08:	887b      	ldrh	r3, [r7, #2]
 8006a0a:	400b      	ands	r3, r1
 8006a0c:	431a      	orrs	r2, r3
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	619a      	str	r2, [r3, #24]
}
 8006a12:	bf00      	nop
 8006a14:	3714      	adds	r7, #20
 8006a16:	46bd      	mov	sp, r7
 8006a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1c:	4770      	bx	lr
	...

08006a20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b084      	sub	sp, #16
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d101      	bne.n	8006a32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e12b      	b.n	8006c8a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d106      	bne.n	8006a4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2200      	movs	r2, #0
 8006a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f7fb f998 	bl	8001d7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2224      	movs	r2, #36	; 0x24
 8006a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f022 0201 	bic.w	r2, r2, #1
 8006a62:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a72:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006a82:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006a84:	f001 f854 	bl	8007b30 <HAL_RCC_GetPCLK1Freq>
 8006a88:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	4a81      	ldr	r2, [pc, #516]	; (8006c94 <HAL_I2C_Init+0x274>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d807      	bhi.n	8006aa4 <HAL_I2C_Init+0x84>
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	4a80      	ldr	r2, [pc, #512]	; (8006c98 <HAL_I2C_Init+0x278>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	bf94      	ite	ls
 8006a9c:	2301      	movls	r3, #1
 8006a9e:	2300      	movhi	r3, #0
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	e006      	b.n	8006ab2 <HAL_I2C_Init+0x92>
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	4a7d      	ldr	r2, [pc, #500]	; (8006c9c <HAL_I2C_Init+0x27c>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	bf94      	ite	ls
 8006aac:	2301      	movls	r3, #1
 8006aae:	2300      	movhi	r3, #0
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d001      	beq.n	8006aba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	e0e7      	b.n	8006c8a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	4a78      	ldr	r2, [pc, #480]	; (8006ca0 <HAL_I2C_Init+0x280>)
 8006abe:	fba2 2303 	umull	r2, r3, r2, r3
 8006ac2:	0c9b      	lsrs	r3, r3, #18
 8006ac4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	68ba      	ldr	r2, [r7, #8]
 8006ad6:	430a      	orrs	r2, r1
 8006ad8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	6a1b      	ldr	r3, [r3, #32]
 8006ae0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	4a6a      	ldr	r2, [pc, #424]	; (8006c94 <HAL_I2C_Init+0x274>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d802      	bhi.n	8006af4 <HAL_I2C_Init+0xd4>
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	3301      	adds	r3, #1
 8006af2:	e009      	b.n	8006b08 <HAL_I2C_Init+0xe8>
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006afa:	fb02 f303 	mul.w	r3, r2, r3
 8006afe:	4a69      	ldr	r2, [pc, #420]	; (8006ca4 <HAL_I2C_Init+0x284>)
 8006b00:	fba2 2303 	umull	r2, r3, r2, r3
 8006b04:	099b      	lsrs	r3, r3, #6
 8006b06:	3301      	adds	r3, #1
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	6812      	ldr	r2, [r2, #0]
 8006b0c:	430b      	orrs	r3, r1
 8006b0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	69db      	ldr	r3, [r3, #28]
 8006b16:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006b1a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	495c      	ldr	r1, [pc, #368]	; (8006c94 <HAL_I2C_Init+0x274>)
 8006b24:	428b      	cmp	r3, r1
 8006b26:	d819      	bhi.n	8006b5c <HAL_I2C_Init+0x13c>
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	1e59      	subs	r1, r3, #1
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	005b      	lsls	r3, r3, #1
 8006b32:	fbb1 f3f3 	udiv	r3, r1, r3
 8006b36:	1c59      	adds	r1, r3, #1
 8006b38:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006b3c:	400b      	ands	r3, r1
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d00a      	beq.n	8006b58 <HAL_I2C_Init+0x138>
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	1e59      	subs	r1, r3, #1
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	005b      	lsls	r3, r3, #1
 8006b4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006b50:	3301      	adds	r3, #1
 8006b52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b56:	e051      	b.n	8006bfc <HAL_I2C_Init+0x1dc>
 8006b58:	2304      	movs	r3, #4
 8006b5a:	e04f      	b.n	8006bfc <HAL_I2C_Init+0x1dc>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d111      	bne.n	8006b88 <HAL_I2C_Init+0x168>
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	1e58      	subs	r0, r3, #1
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6859      	ldr	r1, [r3, #4]
 8006b6c:	460b      	mov	r3, r1
 8006b6e:	005b      	lsls	r3, r3, #1
 8006b70:	440b      	add	r3, r1
 8006b72:	fbb0 f3f3 	udiv	r3, r0, r3
 8006b76:	3301      	adds	r3, #1
 8006b78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	bf0c      	ite	eq
 8006b80:	2301      	moveq	r3, #1
 8006b82:	2300      	movne	r3, #0
 8006b84:	b2db      	uxtb	r3, r3
 8006b86:	e012      	b.n	8006bae <HAL_I2C_Init+0x18e>
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	1e58      	subs	r0, r3, #1
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6859      	ldr	r1, [r3, #4]
 8006b90:	460b      	mov	r3, r1
 8006b92:	009b      	lsls	r3, r3, #2
 8006b94:	440b      	add	r3, r1
 8006b96:	0099      	lsls	r1, r3, #2
 8006b98:	440b      	add	r3, r1
 8006b9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006b9e:	3301      	adds	r3, #1
 8006ba0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	bf0c      	ite	eq
 8006ba8:	2301      	moveq	r3, #1
 8006baa:	2300      	movne	r3, #0
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d001      	beq.n	8006bb6 <HAL_I2C_Init+0x196>
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e022      	b.n	8006bfc <HAL_I2C_Init+0x1dc>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d10e      	bne.n	8006bdc <HAL_I2C_Init+0x1bc>
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	1e58      	subs	r0, r3, #1
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6859      	ldr	r1, [r3, #4]
 8006bc6:	460b      	mov	r3, r1
 8006bc8:	005b      	lsls	r3, r3, #1
 8006bca:	440b      	add	r3, r1
 8006bcc:	fbb0 f3f3 	udiv	r3, r0, r3
 8006bd0:	3301      	adds	r3, #1
 8006bd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006bd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bda:	e00f      	b.n	8006bfc <HAL_I2C_Init+0x1dc>
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	1e58      	subs	r0, r3, #1
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6859      	ldr	r1, [r3, #4]
 8006be4:	460b      	mov	r3, r1
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	440b      	add	r3, r1
 8006bea:	0099      	lsls	r1, r3, #2
 8006bec:	440b      	add	r3, r1
 8006bee:	fbb0 f3f3 	udiv	r3, r0, r3
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006bf8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006bfc:	6879      	ldr	r1, [r7, #4]
 8006bfe:	6809      	ldr	r1, [r1, #0]
 8006c00:	4313      	orrs	r3, r2
 8006c02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	69da      	ldr	r2, [r3, #28]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6a1b      	ldr	r3, [r3, #32]
 8006c16:	431a      	orrs	r2, r3
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	430a      	orrs	r2, r1
 8006c1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006c2a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	6911      	ldr	r1, [r2, #16]
 8006c32:	687a      	ldr	r2, [r7, #4]
 8006c34:	68d2      	ldr	r2, [r2, #12]
 8006c36:	4311      	orrs	r1, r2
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	6812      	ldr	r2, [r2, #0]
 8006c3c:	430b      	orrs	r3, r1
 8006c3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	68db      	ldr	r3, [r3, #12]
 8006c46:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	695a      	ldr	r2, [r3, #20]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	699b      	ldr	r3, [r3, #24]
 8006c52:	431a      	orrs	r2, r3
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	430a      	orrs	r2, r1
 8006c5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f042 0201 	orr.w	r2, r2, #1
 8006c6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2220      	movs	r2, #32
 8006c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006c88:	2300      	movs	r3, #0
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3710      	adds	r7, #16
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	bf00      	nop
 8006c94:	000186a0 	.word	0x000186a0
 8006c98:	001e847f 	.word	0x001e847f
 8006c9c:	003d08ff 	.word	0x003d08ff
 8006ca0:	431bde83 	.word	0x431bde83
 8006ca4:	10624dd3 	.word	0x10624dd3

08006ca8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b088      	sub	sp, #32
 8006cac:	af02      	add	r7, sp, #8
 8006cae:	60f8      	str	r0, [r7, #12]
 8006cb0:	607a      	str	r2, [r7, #4]
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	460b      	mov	r3, r1
 8006cb6:	817b      	strh	r3, [r7, #10]
 8006cb8:	4613      	mov	r3, r2
 8006cba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006cbc:	f7ff fbd2 	bl	8006464 <HAL_GetTick>
 8006cc0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	2b20      	cmp	r3, #32
 8006ccc:	f040 80e0 	bne.w	8006e90 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	9300      	str	r3, [sp, #0]
 8006cd4:	2319      	movs	r3, #25
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	4970      	ldr	r1, [pc, #448]	; (8006e9c <HAL_I2C_Master_Transmit+0x1f4>)
 8006cda:	68f8      	ldr	r0, [r7, #12]
 8006cdc:	f000 fc58 	bl	8007590 <I2C_WaitOnFlagUntilTimeout>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d001      	beq.n	8006cea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006ce6:	2302      	movs	r3, #2
 8006ce8:	e0d3      	b.n	8006e92 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d101      	bne.n	8006cf8 <HAL_I2C_Master_Transmit+0x50>
 8006cf4:	2302      	movs	r3, #2
 8006cf6:	e0cc      	b.n	8006e92 <HAL_I2C_Master_Transmit+0x1ea>
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f003 0301 	and.w	r3, r3, #1
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d007      	beq.n	8006d1e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f042 0201 	orr.w	r2, r2, #1
 8006d1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d2c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2221      	movs	r2, #33	; 0x21
 8006d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2210      	movs	r2, #16
 8006d3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2200      	movs	r2, #0
 8006d42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	893a      	ldrh	r2, [r7, #8]
 8006d4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d54:	b29a      	uxth	r2, r3
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	4a50      	ldr	r2, [pc, #320]	; (8006ea0 <HAL_I2C_Master_Transmit+0x1f8>)
 8006d5e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006d60:	8979      	ldrh	r1, [r7, #10]
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	6a3a      	ldr	r2, [r7, #32]
 8006d66:	68f8      	ldr	r0, [r7, #12]
 8006d68:	f000 fac2 	bl	80072f0 <I2C_MasterRequestWrite>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d001      	beq.n	8006d76 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	e08d      	b.n	8006e92 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d76:	2300      	movs	r3, #0
 8006d78:	613b      	str	r3, [r7, #16]
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	695b      	ldr	r3, [r3, #20]
 8006d80:	613b      	str	r3, [r7, #16]
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	699b      	ldr	r3, [r3, #24]
 8006d88:	613b      	str	r3, [r7, #16]
 8006d8a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006d8c:	e066      	b.n	8006e5c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d8e:	697a      	ldr	r2, [r7, #20]
 8006d90:	6a39      	ldr	r1, [r7, #32]
 8006d92:	68f8      	ldr	r0, [r7, #12]
 8006d94:	f000 fcd2 	bl	800773c <I2C_WaitOnTXEFlagUntilTimeout>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d00d      	beq.n	8006dba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da2:	2b04      	cmp	r3, #4
 8006da4:	d107      	bne.n	8006db6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006db4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006db6:	2301      	movs	r3, #1
 8006db8:	e06b      	b.n	8006e92 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dbe:	781a      	ldrb	r2, [r3, #0]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dca:	1c5a      	adds	r2, r3, #1
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	3b01      	subs	r3, #1
 8006dd8:	b29a      	uxth	r2, r3
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006de2:	3b01      	subs	r3, #1
 8006de4:	b29a      	uxth	r2, r3
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	695b      	ldr	r3, [r3, #20]
 8006df0:	f003 0304 	and.w	r3, r3, #4
 8006df4:	2b04      	cmp	r3, #4
 8006df6:	d11b      	bne.n	8006e30 <HAL_I2C_Master_Transmit+0x188>
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d017      	beq.n	8006e30 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e04:	781a      	ldrb	r2, [r3, #0]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e10:	1c5a      	adds	r2, r3, #1
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	3b01      	subs	r3, #1
 8006e1e:	b29a      	uxth	r2, r3
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e28:	3b01      	subs	r3, #1
 8006e2a:	b29a      	uxth	r2, r3
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e30:	697a      	ldr	r2, [r7, #20]
 8006e32:	6a39      	ldr	r1, [r7, #32]
 8006e34:	68f8      	ldr	r0, [r7, #12]
 8006e36:	f000 fcc2 	bl	80077be <I2C_WaitOnBTFFlagUntilTimeout>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d00d      	beq.n	8006e5c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e44:	2b04      	cmp	r3, #4
 8006e46:	d107      	bne.n	8006e58 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e56:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	e01a      	b.n	8006e92 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d194      	bne.n	8006d8e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2220      	movs	r2, #32
 8006e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2200      	movs	r2, #0
 8006e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	e000      	b.n	8006e92 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006e90:	2302      	movs	r3, #2
  }
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3718      	adds	r7, #24
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}
 8006e9a:	bf00      	nop
 8006e9c:	00100002 	.word	0x00100002
 8006ea0:	ffff0000 	.word	0xffff0000

08006ea4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b08c      	sub	sp, #48	; 0x30
 8006ea8:	af02      	add	r7, sp, #8
 8006eaa:	60f8      	str	r0, [r7, #12]
 8006eac:	607a      	str	r2, [r7, #4]
 8006eae:	461a      	mov	r2, r3
 8006eb0:	460b      	mov	r3, r1
 8006eb2:	817b      	strh	r3, [r7, #10]
 8006eb4:	4613      	mov	r3, r2
 8006eb6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006eb8:	f7ff fad4 	bl	8006464 <HAL_GetTick>
 8006ebc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	2b20      	cmp	r3, #32
 8006ec8:	f040 820b 	bne.w	80072e2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ece:	9300      	str	r3, [sp, #0]
 8006ed0:	2319      	movs	r3, #25
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	497c      	ldr	r1, [pc, #496]	; (80070c8 <HAL_I2C_Master_Receive+0x224>)
 8006ed6:	68f8      	ldr	r0, [r7, #12]
 8006ed8:	f000 fb5a 	bl	8007590 <I2C_WaitOnFlagUntilTimeout>
 8006edc:	4603      	mov	r3, r0
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d001      	beq.n	8006ee6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8006ee2:	2302      	movs	r3, #2
 8006ee4:	e1fe      	b.n	80072e4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d101      	bne.n	8006ef4 <HAL_I2C_Master_Receive+0x50>
 8006ef0:	2302      	movs	r3, #2
 8006ef2:	e1f7      	b.n	80072e4 <HAL_I2C_Master_Receive+0x440>
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f003 0301 	and.w	r3, r3, #1
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d007      	beq.n	8006f1a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	681a      	ldr	r2, [r3, #0]
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f042 0201 	orr.w	r2, r2, #1
 8006f18:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f28:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2222      	movs	r2, #34	; 0x22
 8006f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2210      	movs	r2, #16
 8006f36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	893a      	ldrh	r2, [r7, #8]
 8006f4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f50:	b29a      	uxth	r2, r3
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	4a5c      	ldr	r2, [pc, #368]	; (80070cc <HAL_I2C_Master_Receive+0x228>)
 8006f5a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006f5c:	8979      	ldrh	r1, [r7, #10]
 8006f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f62:	68f8      	ldr	r0, [r7, #12]
 8006f64:	f000 fa46 	bl	80073f4 <I2C_MasterRequestRead>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d001      	beq.n	8006f72 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e1b8      	b.n	80072e4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d113      	bne.n	8006fa2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	623b      	str	r3, [r7, #32]
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	695b      	ldr	r3, [r3, #20]
 8006f84:	623b      	str	r3, [r7, #32]
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	699b      	ldr	r3, [r3, #24]
 8006f8c:	623b      	str	r3, [r7, #32]
 8006f8e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f9e:	601a      	str	r2, [r3, #0]
 8006fa0:	e18c      	b.n	80072bc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	d11b      	bne.n	8006fe2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fb8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006fba:	2300      	movs	r3, #0
 8006fbc:	61fb      	str	r3, [r7, #28]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	695b      	ldr	r3, [r3, #20]
 8006fc4:	61fb      	str	r3, [r7, #28]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	699b      	ldr	r3, [r3, #24]
 8006fcc:	61fb      	str	r3, [r7, #28]
 8006fce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	681a      	ldr	r2, [r3, #0]
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fde:	601a      	str	r2, [r3, #0]
 8006fe0:	e16c      	b.n	80072bc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fe6:	2b02      	cmp	r3, #2
 8006fe8:	d11b      	bne.n	8007022 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	681a      	ldr	r2, [r3, #0]
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ff8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	681a      	ldr	r2, [r3, #0]
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007008:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800700a:	2300      	movs	r3, #0
 800700c:	61bb      	str	r3, [r7, #24]
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	695b      	ldr	r3, [r3, #20]
 8007014:	61bb      	str	r3, [r7, #24]
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	699b      	ldr	r3, [r3, #24]
 800701c:	61bb      	str	r3, [r7, #24]
 800701e:	69bb      	ldr	r3, [r7, #24]
 8007020:	e14c      	b.n	80072bc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	681a      	ldr	r2, [r3, #0]
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007030:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007032:	2300      	movs	r3, #0
 8007034:	617b      	str	r3, [r7, #20]
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	695b      	ldr	r3, [r3, #20]
 800703c:	617b      	str	r3, [r7, #20]
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	699b      	ldr	r3, [r3, #24]
 8007044:	617b      	str	r3, [r7, #20]
 8007046:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007048:	e138      	b.n	80072bc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800704e:	2b03      	cmp	r3, #3
 8007050:	f200 80f1 	bhi.w	8007236 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007058:	2b01      	cmp	r3, #1
 800705a:	d123      	bne.n	80070a4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800705c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800705e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007060:	68f8      	ldr	r0, [r7, #12]
 8007062:	f000 fbed 	bl	8007840 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007066:	4603      	mov	r3, r0
 8007068:	2b00      	cmp	r3, #0
 800706a:	d001      	beq.n	8007070 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800706c:	2301      	movs	r3, #1
 800706e:	e139      	b.n	80072e4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	691a      	ldr	r2, [r3, #16]
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800707a:	b2d2      	uxtb	r2, r2
 800707c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007082:	1c5a      	adds	r2, r3, #1
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800708c:	3b01      	subs	r3, #1
 800708e:	b29a      	uxth	r2, r3
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007098:	b29b      	uxth	r3, r3
 800709a:	3b01      	subs	r3, #1
 800709c:	b29a      	uxth	r2, r3
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80070a2:	e10b      	b.n	80072bc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070a8:	2b02      	cmp	r3, #2
 80070aa:	d14e      	bne.n	800714a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80070ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ae:	9300      	str	r3, [sp, #0]
 80070b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070b2:	2200      	movs	r2, #0
 80070b4:	4906      	ldr	r1, [pc, #24]	; (80070d0 <HAL_I2C_Master_Receive+0x22c>)
 80070b6:	68f8      	ldr	r0, [r7, #12]
 80070b8:	f000 fa6a 	bl	8007590 <I2C_WaitOnFlagUntilTimeout>
 80070bc:	4603      	mov	r3, r0
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d008      	beq.n	80070d4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80070c2:	2301      	movs	r3, #1
 80070c4:	e10e      	b.n	80072e4 <HAL_I2C_Master_Receive+0x440>
 80070c6:	bf00      	nop
 80070c8:	00100002 	.word	0x00100002
 80070cc:	ffff0000 	.word	0xffff0000
 80070d0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	681a      	ldr	r2, [r3, #0]
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	691a      	ldr	r2, [r3, #16]
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ee:	b2d2      	uxtb	r2, r2
 80070f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f6:	1c5a      	adds	r2, r3, #1
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007100:	3b01      	subs	r3, #1
 8007102:	b29a      	uxth	r2, r3
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800710c:	b29b      	uxth	r3, r3
 800710e:	3b01      	subs	r3, #1
 8007110:	b29a      	uxth	r2, r3
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	691a      	ldr	r2, [r3, #16]
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007120:	b2d2      	uxtb	r2, r2
 8007122:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007128:	1c5a      	adds	r2, r3, #1
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007132:	3b01      	subs	r3, #1
 8007134:	b29a      	uxth	r2, r3
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800713e:	b29b      	uxth	r3, r3
 8007140:	3b01      	subs	r3, #1
 8007142:	b29a      	uxth	r2, r3
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007148:	e0b8      	b.n	80072bc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800714a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800714c:	9300      	str	r3, [sp, #0]
 800714e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007150:	2200      	movs	r2, #0
 8007152:	4966      	ldr	r1, [pc, #408]	; (80072ec <HAL_I2C_Master_Receive+0x448>)
 8007154:	68f8      	ldr	r0, [r7, #12]
 8007156:	f000 fa1b 	bl	8007590 <I2C_WaitOnFlagUntilTimeout>
 800715a:	4603      	mov	r3, r0
 800715c:	2b00      	cmp	r3, #0
 800715e:	d001      	beq.n	8007164 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8007160:	2301      	movs	r3, #1
 8007162:	e0bf      	b.n	80072e4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	681a      	ldr	r2, [r3, #0]
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007172:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	691a      	ldr	r2, [r3, #16]
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800717e:	b2d2      	uxtb	r2, r2
 8007180:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007186:	1c5a      	adds	r2, r3, #1
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007190:	3b01      	subs	r3, #1
 8007192:	b29a      	uxth	r2, r3
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800719c:	b29b      	uxth	r3, r3
 800719e:	3b01      	subs	r3, #1
 80071a0:	b29a      	uxth	r2, r3
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80071a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a8:	9300      	str	r3, [sp, #0]
 80071aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ac:	2200      	movs	r2, #0
 80071ae:	494f      	ldr	r1, [pc, #316]	; (80072ec <HAL_I2C_Master_Receive+0x448>)
 80071b0:	68f8      	ldr	r0, [r7, #12]
 80071b2:	f000 f9ed 	bl	8007590 <I2C_WaitOnFlagUntilTimeout>
 80071b6:	4603      	mov	r3, r0
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d001      	beq.n	80071c0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80071bc:	2301      	movs	r3, #1
 80071be:	e091      	b.n	80072e4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	691a      	ldr	r2, [r3, #16]
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071da:	b2d2      	uxtb	r2, r2
 80071dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e2:	1c5a      	adds	r2, r3, #1
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071ec:	3b01      	subs	r3, #1
 80071ee:	b29a      	uxth	r2, r3
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	3b01      	subs	r3, #1
 80071fc:	b29a      	uxth	r2, r3
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	691a      	ldr	r2, [r3, #16]
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800720c:	b2d2      	uxtb	r2, r2
 800720e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007214:	1c5a      	adds	r2, r3, #1
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800721e:	3b01      	subs	r3, #1
 8007220:	b29a      	uxth	r2, r3
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800722a:	b29b      	uxth	r3, r3
 800722c:	3b01      	subs	r3, #1
 800722e:	b29a      	uxth	r2, r3
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007234:	e042      	b.n	80072bc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007236:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007238:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800723a:	68f8      	ldr	r0, [r7, #12]
 800723c:	f000 fb00 	bl	8007840 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007240:	4603      	mov	r3, r0
 8007242:	2b00      	cmp	r3, #0
 8007244:	d001      	beq.n	800724a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8007246:	2301      	movs	r3, #1
 8007248:	e04c      	b.n	80072e4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	691a      	ldr	r2, [r3, #16]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007254:	b2d2      	uxtb	r2, r2
 8007256:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800725c:	1c5a      	adds	r2, r3, #1
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007266:	3b01      	subs	r3, #1
 8007268:	b29a      	uxth	r2, r3
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007272:	b29b      	uxth	r3, r3
 8007274:	3b01      	subs	r3, #1
 8007276:	b29a      	uxth	r2, r3
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	695b      	ldr	r3, [r3, #20]
 8007282:	f003 0304 	and.w	r3, r3, #4
 8007286:	2b04      	cmp	r3, #4
 8007288:	d118      	bne.n	80072bc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	691a      	ldr	r2, [r3, #16]
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007294:	b2d2      	uxtb	r2, r2
 8007296:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800729c:	1c5a      	adds	r2, r3, #1
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072a6:	3b01      	subs	r3, #1
 80072a8:	b29a      	uxth	r2, r3
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	3b01      	subs	r3, #1
 80072b6:	b29a      	uxth	r2, r3
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	f47f aec2 	bne.w	800704a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2220      	movs	r2, #32
 80072ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2200      	movs	r2, #0
 80072d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2200      	movs	r2, #0
 80072da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80072de:	2300      	movs	r3, #0
 80072e0:	e000      	b.n	80072e4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80072e2:	2302      	movs	r3, #2
  }
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3728      	adds	r7, #40	; 0x28
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}
 80072ec:	00010004 	.word	0x00010004

080072f0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b088      	sub	sp, #32
 80072f4:	af02      	add	r7, sp, #8
 80072f6:	60f8      	str	r0, [r7, #12]
 80072f8:	607a      	str	r2, [r7, #4]
 80072fa:	603b      	str	r3, [r7, #0]
 80072fc:	460b      	mov	r3, r1
 80072fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007304:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	2b08      	cmp	r3, #8
 800730a:	d006      	beq.n	800731a <I2C_MasterRequestWrite+0x2a>
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	2b01      	cmp	r3, #1
 8007310:	d003      	beq.n	800731a <I2C_MasterRequestWrite+0x2a>
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007318:	d108      	bne.n	800732c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007328:	601a      	str	r2, [r3, #0]
 800732a:	e00b      	b.n	8007344 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007330:	2b12      	cmp	r3, #18
 8007332:	d107      	bne.n	8007344 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	681a      	ldr	r2, [r3, #0]
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007342:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	9300      	str	r3, [sp, #0]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2200      	movs	r2, #0
 800734c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007350:	68f8      	ldr	r0, [r7, #12]
 8007352:	f000 f91d 	bl	8007590 <I2C_WaitOnFlagUntilTimeout>
 8007356:	4603      	mov	r3, r0
 8007358:	2b00      	cmp	r3, #0
 800735a:	d00d      	beq.n	8007378 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007366:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800736a:	d103      	bne.n	8007374 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007372:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007374:	2303      	movs	r3, #3
 8007376:	e035      	b.n	80073e4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	691b      	ldr	r3, [r3, #16]
 800737c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007380:	d108      	bne.n	8007394 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007382:	897b      	ldrh	r3, [r7, #10]
 8007384:	b2db      	uxtb	r3, r3
 8007386:	461a      	mov	r2, r3
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007390:	611a      	str	r2, [r3, #16]
 8007392:	e01b      	b.n	80073cc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007394:	897b      	ldrh	r3, [r7, #10]
 8007396:	11db      	asrs	r3, r3, #7
 8007398:	b2db      	uxtb	r3, r3
 800739a:	f003 0306 	and.w	r3, r3, #6
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	f063 030f 	orn	r3, r3, #15
 80073a4:	b2da      	uxtb	r2, r3
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	490e      	ldr	r1, [pc, #56]	; (80073ec <I2C_MasterRequestWrite+0xfc>)
 80073b2:	68f8      	ldr	r0, [r7, #12]
 80073b4:	f000 f943 	bl	800763e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80073b8:	4603      	mov	r3, r0
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d001      	beq.n	80073c2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80073be:	2301      	movs	r3, #1
 80073c0:	e010      	b.n	80073e4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80073c2:	897b      	ldrh	r3, [r7, #10]
 80073c4:	b2da      	uxtb	r2, r3
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	687a      	ldr	r2, [r7, #4]
 80073d0:	4907      	ldr	r1, [pc, #28]	; (80073f0 <I2C_MasterRequestWrite+0x100>)
 80073d2:	68f8      	ldr	r0, [r7, #12]
 80073d4:	f000 f933 	bl	800763e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80073d8:	4603      	mov	r3, r0
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d001      	beq.n	80073e2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80073de:	2301      	movs	r3, #1
 80073e0:	e000      	b.n	80073e4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80073e2:	2300      	movs	r3, #0
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3718      	adds	r7, #24
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}
 80073ec:	00010008 	.word	0x00010008
 80073f0:	00010002 	.word	0x00010002

080073f4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b088      	sub	sp, #32
 80073f8:	af02      	add	r7, sp, #8
 80073fa:	60f8      	str	r0, [r7, #12]
 80073fc:	607a      	str	r2, [r7, #4]
 80073fe:	603b      	str	r3, [r7, #0]
 8007400:	460b      	mov	r3, r1
 8007402:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007408:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	681a      	ldr	r2, [r3, #0]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007418:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	2b08      	cmp	r3, #8
 800741e:	d006      	beq.n	800742e <I2C_MasterRequestRead+0x3a>
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	2b01      	cmp	r3, #1
 8007424:	d003      	beq.n	800742e <I2C_MasterRequestRead+0x3a>
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800742c:	d108      	bne.n	8007440 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800743c:	601a      	str	r2, [r3, #0]
 800743e:	e00b      	b.n	8007458 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007444:	2b11      	cmp	r3, #17
 8007446:	d107      	bne.n	8007458 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	681a      	ldr	r2, [r3, #0]
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007456:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	9300      	str	r3, [sp, #0]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2200      	movs	r2, #0
 8007460:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007464:	68f8      	ldr	r0, [r7, #12]
 8007466:	f000 f893 	bl	8007590 <I2C_WaitOnFlagUntilTimeout>
 800746a:	4603      	mov	r3, r0
 800746c:	2b00      	cmp	r3, #0
 800746e:	d00d      	beq.n	800748c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800747a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800747e:	d103      	bne.n	8007488 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007486:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007488:	2303      	movs	r3, #3
 800748a:	e079      	b.n	8007580 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	691b      	ldr	r3, [r3, #16]
 8007490:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007494:	d108      	bne.n	80074a8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007496:	897b      	ldrh	r3, [r7, #10]
 8007498:	b2db      	uxtb	r3, r3
 800749a:	f043 0301 	orr.w	r3, r3, #1
 800749e:	b2da      	uxtb	r2, r3
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	611a      	str	r2, [r3, #16]
 80074a6:	e05f      	b.n	8007568 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80074a8:	897b      	ldrh	r3, [r7, #10]
 80074aa:	11db      	asrs	r3, r3, #7
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	f003 0306 	and.w	r3, r3, #6
 80074b2:	b2db      	uxtb	r3, r3
 80074b4:	f063 030f 	orn	r3, r3, #15
 80074b8:	b2da      	uxtb	r2, r3
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	687a      	ldr	r2, [r7, #4]
 80074c4:	4930      	ldr	r1, [pc, #192]	; (8007588 <I2C_MasterRequestRead+0x194>)
 80074c6:	68f8      	ldr	r0, [r7, #12]
 80074c8:	f000 f8b9 	bl	800763e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80074cc:	4603      	mov	r3, r0
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d001      	beq.n	80074d6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80074d2:	2301      	movs	r3, #1
 80074d4:	e054      	b.n	8007580 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80074d6:	897b      	ldrh	r3, [r7, #10]
 80074d8:	b2da      	uxtb	r2, r3
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	4929      	ldr	r1, [pc, #164]	; (800758c <I2C_MasterRequestRead+0x198>)
 80074e6:	68f8      	ldr	r0, [r7, #12]
 80074e8:	f000 f8a9 	bl	800763e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80074ec:	4603      	mov	r3, r0
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d001      	beq.n	80074f6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80074f2:	2301      	movs	r3, #1
 80074f4:	e044      	b.n	8007580 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074f6:	2300      	movs	r3, #0
 80074f8:	613b      	str	r3, [r7, #16]
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	695b      	ldr	r3, [r3, #20]
 8007500:	613b      	str	r3, [r7, #16]
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	699b      	ldr	r3, [r3, #24]
 8007508:	613b      	str	r3, [r7, #16]
 800750a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	681a      	ldr	r2, [r3, #0]
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800751a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	9300      	str	r3, [sp, #0]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2200      	movs	r2, #0
 8007524:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007528:	68f8      	ldr	r0, [r7, #12]
 800752a:	f000 f831 	bl	8007590 <I2C_WaitOnFlagUntilTimeout>
 800752e:	4603      	mov	r3, r0
 8007530:	2b00      	cmp	r3, #0
 8007532:	d00d      	beq.n	8007550 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800753e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007542:	d103      	bne.n	800754c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f44f 7200 	mov.w	r2, #512	; 0x200
 800754a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800754c:	2303      	movs	r3, #3
 800754e:	e017      	b.n	8007580 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8007550:	897b      	ldrh	r3, [r7, #10]
 8007552:	11db      	asrs	r3, r3, #7
 8007554:	b2db      	uxtb	r3, r3
 8007556:	f003 0306 	and.w	r3, r3, #6
 800755a:	b2db      	uxtb	r3, r3
 800755c:	f063 030e 	orn	r3, r3, #14
 8007560:	b2da      	uxtb	r2, r3
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	687a      	ldr	r2, [r7, #4]
 800756c:	4907      	ldr	r1, [pc, #28]	; (800758c <I2C_MasterRequestRead+0x198>)
 800756e:	68f8      	ldr	r0, [r7, #12]
 8007570:	f000 f865 	bl	800763e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007574:	4603      	mov	r3, r0
 8007576:	2b00      	cmp	r3, #0
 8007578:	d001      	beq.n	800757e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800757a:	2301      	movs	r3, #1
 800757c:	e000      	b.n	8007580 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800757e:	2300      	movs	r3, #0
}
 8007580:	4618      	mov	r0, r3
 8007582:	3718      	adds	r7, #24
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}
 8007588:	00010008 	.word	0x00010008
 800758c:	00010002 	.word	0x00010002

08007590 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b084      	sub	sp, #16
 8007594:	af00      	add	r7, sp, #0
 8007596:	60f8      	str	r0, [r7, #12]
 8007598:	60b9      	str	r1, [r7, #8]
 800759a:	603b      	str	r3, [r7, #0]
 800759c:	4613      	mov	r3, r2
 800759e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80075a0:	e025      	b.n	80075ee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075a8:	d021      	beq.n	80075ee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075aa:	f7fe ff5b 	bl	8006464 <HAL_GetTick>
 80075ae:	4602      	mov	r2, r0
 80075b0:	69bb      	ldr	r3, [r7, #24]
 80075b2:	1ad3      	subs	r3, r2, r3
 80075b4:	683a      	ldr	r2, [r7, #0]
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d302      	bcc.n	80075c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d116      	bne.n	80075ee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2200      	movs	r2, #0
 80075c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2220      	movs	r2, #32
 80075ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2200      	movs	r2, #0
 80075d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075da:	f043 0220 	orr.w	r2, r3, #32
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2200      	movs	r2, #0
 80075e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80075ea:	2301      	movs	r3, #1
 80075ec:	e023      	b.n	8007636 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	0c1b      	lsrs	r3, r3, #16
 80075f2:	b2db      	uxtb	r3, r3
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d10d      	bne.n	8007614 <I2C_WaitOnFlagUntilTimeout+0x84>
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	695b      	ldr	r3, [r3, #20]
 80075fe:	43da      	mvns	r2, r3
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	4013      	ands	r3, r2
 8007604:	b29b      	uxth	r3, r3
 8007606:	2b00      	cmp	r3, #0
 8007608:	bf0c      	ite	eq
 800760a:	2301      	moveq	r3, #1
 800760c:	2300      	movne	r3, #0
 800760e:	b2db      	uxtb	r3, r3
 8007610:	461a      	mov	r2, r3
 8007612:	e00c      	b.n	800762e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	699b      	ldr	r3, [r3, #24]
 800761a:	43da      	mvns	r2, r3
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	4013      	ands	r3, r2
 8007620:	b29b      	uxth	r3, r3
 8007622:	2b00      	cmp	r3, #0
 8007624:	bf0c      	ite	eq
 8007626:	2301      	moveq	r3, #1
 8007628:	2300      	movne	r3, #0
 800762a:	b2db      	uxtb	r3, r3
 800762c:	461a      	mov	r2, r3
 800762e:	79fb      	ldrb	r3, [r7, #7]
 8007630:	429a      	cmp	r2, r3
 8007632:	d0b6      	beq.n	80075a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007634:	2300      	movs	r3, #0
}
 8007636:	4618      	mov	r0, r3
 8007638:	3710      	adds	r7, #16
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}

0800763e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800763e:	b580      	push	{r7, lr}
 8007640:	b084      	sub	sp, #16
 8007642:	af00      	add	r7, sp, #0
 8007644:	60f8      	str	r0, [r7, #12]
 8007646:	60b9      	str	r1, [r7, #8]
 8007648:	607a      	str	r2, [r7, #4]
 800764a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800764c:	e051      	b.n	80076f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	695b      	ldr	r3, [r3, #20]
 8007654:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007658:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800765c:	d123      	bne.n	80076a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	681a      	ldr	r2, [r3, #0]
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800766c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007676:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2200      	movs	r2, #0
 800767c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2220      	movs	r2, #32
 8007682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2200      	movs	r2, #0
 800768a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007692:	f043 0204 	orr.w	r2, r3, #4
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2200      	movs	r2, #0
 800769e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	e046      	b.n	8007734 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076ac:	d021      	beq.n	80076f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076ae:	f7fe fed9 	bl	8006464 <HAL_GetTick>
 80076b2:	4602      	mov	r2, r0
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	1ad3      	subs	r3, r2, r3
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d302      	bcc.n	80076c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d116      	bne.n	80076f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2200      	movs	r2, #0
 80076c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2220      	movs	r2, #32
 80076ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2200      	movs	r2, #0
 80076d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076de:	f043 0220 	orr.w	r2, r3, #32
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2200      	movs	r2, #0
 80076ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80076ee:	2301      	movs	r3, #1
 80076f0:	e020      	b.n	8007734 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	0c1b      	lsrs	r3, r3, #16
 80076f6:	b2db      	uxtb	r3, r3
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	d10c      	bne.n	8007716 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	695b      	ldr	r3, [r3, #20]
 8007702:	43da      	mvns	r2, r3
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	4013      	ands	r3, r2
 8007708:	b29b      	uxth	r3, r3
 800770a:	2b00      	cmp	r3, #0
 800770c:	bf14      	ite	ne
 800770e:	2301      	movne	r3, #1
 8007710:	2300      	moveq	r3, #0
 8007712:	b2db      	uxtb	r3, r3
 8007714:	e00b      	b.n	800772e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	699b      	ldr	r3, [r3, #24]
 800771c:	43da      	mvns	r2, r3
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	4013      	ands	r3, r2
 8007722:	b29b      	uxth	r3, r3
 8007724:	2b00      	cmp	r3, #0
 8007726:	bf14      	ite	ne
 8007728:	2301      	movne	r3, #1
 800772a:	2300      	moveq	r3, #0
 800772c:	b2db      	uxtb	r3, r3
 800772e:	2b00      	cmp	r3, #0
 8007730:	d18d      	bne.n	800764e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007732:	2300      	movs	r3, #0
}
 8007734:	4618      	mov	r0, r3
 8007736:	3710      	adds	r7, #16
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}

0800773c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b084      	sub	sp, #16
 8007740:	af00      	add	r7, sp, #0
 8007742:	60f8      	str	r0, [r7, #12]
 8007744:	60b9      	str	r1, [r7, #8]
 8007746:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007748:	e02d      	b.n	80077a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800774a:	68f8      	ldr	r0, [r7, #12]
 800774c:	f000 f8ce 	bl	80078ec <I2C_IsAcknowledgeFailed>
 8007750:	4603      	mov	r3, r0
 8007752:	2b00      	cmp	r3, #0
 8007754:	d001      	beq.n	800775a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007756:	2301      	movs	r3, #1
 8007758:	e02d      	b.n	80077b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007760:	d021      	beq.n	80077a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007762:	f7fe fe7f 	bl	8006464 <HAL_GetTick>
 8007766:	4602      	mov	r2, r0
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	1ad3      	subs	r3, r2, r3
 800776c:	68ba      	ldr	r2, [r7, #8]
 800776e:	429a      	cmp	r2, r3
 8007770:	d302      	bcc.n	8007778 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d116      	bne.n	80077a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2200      	movs	r2, #0
 800777c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2220      	movs	r2, #32
 8007782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2200      	movs	r2, #0
 800778a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007792:	f043 0220 	orr.w	r2, r3, #32
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2200      	movs	r2, #0
 800779e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80077a2:	2301      	movs	r3, #1
 80077a4:	e007      	b.n	80077b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	695b      	ldr	r3, [r3, #20]
 80077ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077b0:	2b80      	cmp	r3, #128	; 0x80
 80077b2:	d1ca      	bne.n	800774a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80077b4:	2300      	movs	r3, #0
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3710      	adds	r7, #16
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}

080077be <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80077be:	b580      	push	{r7, lr}
 80077c0:	b084      	sub	sp, #16
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	60f8      	str	r0, [r7, #12]
 80077c6:	60b9      	str	r1, [r7, #8]
 80077c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80077ca:	e02d      	b.n	8007828 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80077cc:	68f8      	ldr	r0, [r7, #12]
 80077ce:	f000 f88d 	bl	80078ec <I2C_IsAcknowledgeFailed>
 80077d2:	4603      	mov	r3, r0
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d001      	beq.n	80077dc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80077d8:	2301      	movs	r3, #1
 80077da:	e02d      	b.n	8007838 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077e2:	d021      	beq.n	8007828 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077e4:	f7fe fe3e 	bl	8006464 <HAL_GetTick>
 80077e8:	4602      	mov	r2, r0
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	1ad3      	subs	r3, r2, r3
 80077ee:	68ba      	ldr	r2, [r7, #8]
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d302      	bcc.n	80077fa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d116      	bne.n	8007828 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2200      	movs	r2, #0
 80077fe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2220      	movs	r2, #32
 8007804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2200      	movs	r2, #0
 800780c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007814:	f043 0220 	orr.w	r2, r3, #32
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2200      	movs	r2, #0
 8007820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007824:	2301      	movs	r3, #1
 8007826:	e007      	b.n	8007838 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	695b      	ldr	r3, [r3, #20]
 800782e:	f003 0304 	and.w	r3, r3, #4
 8007832:	2b04      	cmp	r3, #4
 8007834:	d1ca      	bne.n	80077cc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007836:	2300      	movs	r3, #0
}
 8007838:	4618      	mov	r0, r3
 800783a:	3710      	adds	r7, #16
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b084      	sub	sp, #16
 8007844:	af00      	add	r7, sp, #0
 8007846:	60f8      	str	r0, [r7, #12]
 8007848:	60b9      	str	r1, [r7, #8]
 800784a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800784c:	e042      	b.n	80078d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	695b      	ldr	r3, [r3, #20]
 8007854:	f003 0310 	and.w	r3, r3, #16
 8007858:	2b10      	cmp	r3, #16
 800785a:	d119      	bne.n	8007890 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f06f 0210 	mvn.w	r2, #16
 8007864:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2200      	movs	r2, #0
 800786a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2220      	movs	r2, #32
 8007870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2200      	movs	r2, #0
 8007878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2200      	movs	r2, #0
 8007888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800788c:	2301      	movs	r3, #1
 800788e:	e029      	b.n	80078e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007890:	f7fe fde8 	bl	8006464 <HAL_GetTick>
 8007894:	4602      	mov	r2, r0
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	1ad3      	subs	r3, r2, r3
 800789a:	68ba      	ldr	r2, [r7, #8]
 800789c:	429a      	cmp	r2, r3
 800789e:	d302      	bcc.n	80078a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d116      	bne.n	80078d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2200      	movs	r2, #0
 80078aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2220      	movs	r2, #32
 80078b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2200      	movs	r2, #0
 80078b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078c0:	f043 0220 	orr.w	r2, r3, #32
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2200      	movs	r2, #0
 80078cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80078d0:	2301      	movs	r3, #1
 80078d2:	e007      	b.n	80078e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	695b      	ldr	r3, [r3, #20]
 80078da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078de:	2b40      	cmp	r3, #64	; 0x40
 80078e0:	d1b5      	bne.n	800784e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80078e2:	2300      	movs	r3, #0
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3710      	adds	r7, #16
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b083      	sub	sp, #12
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	695b      	ldr	r3, [r3, #20]
 80078fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007902:	d11b      	bne.n	800793c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800790c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2200      	movs	r2, #0
 8007912:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2220      	movs	r2, #32
 8007918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2200      	movs	r2, #0
 8007920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007928:	f043 0204 	orr.w	r2, r3, #4
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2200      	movs	r2, #0
 8007934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007938:	2301      	movs	r3, #1
 800793a:	e000      	b.n	800793e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800793c:	2300      	movs	r3, #0
}
 800793e:	4618      	mov	r0, r3
 8007940:	370c      	adds	r7, #12
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr
	...

0800794c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b084      	sub	sp, #16
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d101      	bne.n	8007960 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800795c:	2301      	movs	r3, #1
 800795e:	e0cc      	b.n	8007afa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007960:	4b68      	ldr	r3, [pc, #416]	; (8007b04 <HAL_RCC_ClockConfig+0x1b8>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f003 030f 	and.w	r3, r3, #15
 8007968:	683a      	ldr	r2, [r7, #0]
 800796a:	429a      	cmp	r2, r3
 800796c:	d90c      	bls.n	8007988 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800796e:	4b65      	ldr	r3, [pc, #404]	; (8007b04 <HAL_RCC_ClockConfig+0x1b8>)
 8007970:	683a      	ldr	r2, [r7, #0]
 8007972:	b2d2      	uxtb	r2, r2
 8007974:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007976:	4b63      	ldr	r3, [pc, #396]	; (8007b04 <HAL_RCC_ClockConfig+0x1b8>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f003 030f 	and.w	r3, r3, #15
 800797e:	683a      	ldr	r2, [r7, #0]
 8007980:	429a      	cmp	r2, r3
 8007982:	d001      	beq.n	8007988 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007984:	2301      	movs	r3, #1
 8007986:	e0b8      	b.n	8007afa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f003 0302 	and.w	r3, r3, #2
 8007990:	2b00      	cmp	r3, #0
 8007992:	d020      	beq.n	80079d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f003 0304 	and.w	r3, r3, #4
 800799c:	2b00      	cmp	r3, #0
 800799e:	d005      	beq.n	80079ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80079a0:	4b59      	ldr	r3, [pc, #356]	; (8007b08 <HAL_RCC_ClockConfig+0x1bc>)
 80079a2:	689b      	ldr	r3, [r3, #8]
 80079a4:	4a58      	ldr	r2, [pc, #352]	; (8007b08 <HAL_RCC_ClockConfig+0x1bc>)
 80079a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80079aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f003 0308 	and.w	r3, r3, #8
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d005      	beq.n	80079c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80079b8:	4b53      	ldr	r3, [pc, #332]	; (8007b08 <HAL_RCC_ClockConfig+0x1bc>)
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	4a52      	ldr	r2, [pc, #328]	; (8007b08 <HAL_RCC_ClockConfig+0x1bc>)
 80079be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80079c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80079c4:	4b50      	ldr	r3, [pc, #320]	; (8007b08 <HAL_RCC_ClockConfig+0x1bc>)
 80079c6:	689b      	ldr	r3, [r3, #8]
 80079c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	494d      	ldr	r1, [pc, #308]	; (8007b08 <HAL_RCC_ClockConfig+0x1bc>)
 80079d2:	4313      	orrs	r3, r2
 80079d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f003 0301 	and.w	r3, r3, #1
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d044      	beq.n	8007a6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	2b01      	cmp	r3, #1
 80079e8:	d107      	bne.n	80079fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079ea:	4b47      	ldr	r3, [pc, #284]	; (8007b08 <HAL_RCC_ClockConfig+0x1bc>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d119      	bne.n	8007a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80079f6:	2301      	movs	r3, #1
 80079f8:	e07f      	b.n	8007afa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	2b02      	cmp	r3, #2
 8007a00:	d003      	beq.n	8007a0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007a06:	2b03      	cmp	r3, #3
 8007a08:	d107      	bne.n	8007a1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a0a:	4b3f      	ldr	r3, [pc, #252]	; (8007b08 <HAL_RCC_ClockConfig+0x1bc>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d109      	bne.n	8007a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a16:	2301      	movs	r3, #1
 8007a18:	e06f      	b.n	8007afa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a1a:	4b3b      	ldr	r3, [pc, #236]	; (8007b08 <HAL_RCC_ClockConfig+0x1bc>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f003 0302 	and.w	r3, r3, #2
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d101      	bne.n	8007a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a26:	2301      	movs	r3, #1
 8007a28:	e067      	b.n	8007afa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007a2a:	4b37      	ldr	r3, [pc, #220]	; (8007b08 <HAL_RCC_ClockConfig+0x1bc>)
 8007a2c:	689b      	ldr	r3, [r3, #8]
 8007a2e:	f023 0203 	bic.w	r2, r3, #3
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	4934      	ldr	r1, [pc, #208]	; (8007b08 <HAL_RCC_ClockConfig+0x1bc>)
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007a3c:	f7fe fd12 	bl	8006464 <HAL_GetTick>
 8007a40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a42:	e00a      	b.n	8007a5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007a44:	f7fe fd0e 	bl	8006464 <HAL_GetTick>
 8007a48:	4602      	mov	r2, r0
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	1ad3      	subs	r3, r2, r3
 8007a4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d901      	bls.n	8007a5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007a56:	2303      	movs	r3, #3
 8007a58:	e04f      	b.n	8007afa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a5a:	4b2b      	ldr	r3, [pc, #172]	; (8007b08 <HAL_RCC_ClockConfig+0x1bc>)
 8007a5c:	689b      	ldr	r3, [r3, #8]
 8007a5e:	f003 020c 	and.w	r2, r3, #12
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	009b      	lsls	r3, r3, #2
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d1eb      	bne.n	8007a44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007a6c:	4b25      	ldr	r3, [pc, #148]	; (8007b04 <HAL_RCC_ClockConfig+0x1b8>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f003 030f 	and.w	r3, r3, #15
 8007a74:	683a      	ldr	r2, [r7, #0]
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d20c      	bcs.n	8007a94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a7a:	4b22      	ldr	r3, [pc, #136]	; (8007b04 <HAL_RCC_ClockConfig+0x1b8>)
 8007a7c:	683a      	ldr	r2, [r7, #0]
 8007a7e:	b2d2      	uxtb	r2, r2
 8007a80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a82:	4b20      	ldr	r3, [pc, #128]	; (8007b04 <HAL_RCC_ClockConfig+0x1b8>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f003 030f 	and.w	r3, r3, #15
 8007a8a:	683a      	ldr	r2, [r7, #0]
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	d001      	beq.n	8007a94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007a90:	2301      	movs	r3, #1
 8007a92:	e032      	b.n	8007afa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f003 0304 	and.w	r3, r3, #4
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d008      	beq.n	8007ab2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007aa0:	4b19      	ldr	r3, [pc, #100]	; (8007b08 <HAL_RCC_ClockConfig+0x1bc>)
 8007aa2:	689b      	ldr	r3, [r3, #8]
 8007aa4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	68db      	ldr	r3, [r3, #12]
 8007aac:	4916      	ldr	r1, [pc, #88]	; (8007b08 <HAL_RCC_ClockConfig+0x1bc>)
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f003 0308 	and.w	r3, r3, #8
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d009      	beq.n	8007ad2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007abe:	4b12      	ldr	r3, [pc, #72]	; (8007b08 <HAL_RCC_ClockConfig+0x1bc>)
 8007ac0:	689b      	ldr	r3, [r3, #8]
 8007ac2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	691b      	ldr	r3, [r3, #16]
 8007aca:	00db      	lsls	r3, r3, #3
 8007acc:	490e      	ldr	r1, [pc, #56]	; (8007b08 <HAL_RCC_ClockConfig+0x1bc>)
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007ad2:	f000 f855 	bl	8007b80 <HAL_RCC_GetSysClockFreq>
 8007ad6:	4602      	mov	r2, r0
 8007ad8:	4b0b      	ldr	r3, [pc, #44]	; (8007b08 <HAL_RCC_ClockConfig+0x1bc>)
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	091b      	lsrs	r3, r3, #4
 8007ade:	f003 030f 	and.w	r3, r3, #15
 8007ae2:	490a      	ldr	r1, [pc, #40]	; (8007b0c <HAL_RCC_ClockConfig+0x1c0>)
 8007ae4:	5ccb      	ldrb	r3, [r1, r3]
 8007ae6:	fa22 f303 	lsr.w	r3, r2, r3
 8007aea:	4a09      	ldr	r2, [pc, #36]	; (8007b10 <HAL_RCC_ClockConfig+0x1c4>)
 8007aec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007aee:	4b09      	ldr	r3, [pc, #36]	; (8007b14 <HAL_RCC_ClockConfig+0x1c8>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4618      	mov	r0, r3
 8007af4:	f7fe fc72 	bl	80063dc <HAL_InitTick>

  return HAL_OK;
 8007af8:	2300      	movs	r3, #0
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3710      	adds	r7, #16
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}
 8007b02:	bf00      	nop
 8007b04:	40023c00 	.word	0x40023c00
 8007b08:	40023800 	.word	0x40023800
 8007b0c:	0800c918 	.word	0x0800c918
 8007b10:	2000000c 	.word	0x2000000c
 8007b14:	2000001c 	.word	0x2000001c

08007b18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007b1c:	4b03      	ldr	r3, [pc, #12]	; (8007b2c <HAL_RCC_GetHCLKFreq+0x14>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	46bd      	mov	sp, r7
 8007b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b28:	4770      	bx	lr
 8007b2a:	bf00      	nop
 8007b2c:	2000000c 	.word	0x2000000c

08007b30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007b34:	f7ff fff0 	bl	8007b18 <HAL_RCC_GetHCLKFreq>
 8007b38:	4602      	mov	r2, r0
 8007b3a:	4b05      	ldr	r3, [pc, #20]	; (8007b50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007b3c:	689b      	ldr	r3, [r3, #8]
 8007b3e:	0a9b      	lsrs	r3, r3, #10
 8007b40:	f003 0307 	and.w	r3, r3, #7
 8007b44:	4903      	ldr	r1, [pc, #12]	; (8007b54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007b46:	5ccb      	ldrb	r3, [r1, r3]
 8007b48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	bd80      	pop	{r7, pc}
 8007b50:	40023800 	.word	0x40023800
 8007b54:	0800c928 	.word	0x0800c928

08007b58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007b5c:	f7ff ffdc 	bl	8007b18 <HAL_RCC_GetHCLKFreq>
 8007b60:	4602      	mov	r2, r0
 8007b62:	4b05      	ldr	r3, [pc, #20]	; (8007b78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007b64:	689b      	ldr	r3, [r3, #8]
 8007b66:	0b5b      	lsrs	r3, r3, #13
 8007b68:	f003 0307 	and.w	r3, r3, #7
 8007b6c:	4903      	ldr	r1, [pc, #12]	; (8007b7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007b6e:	5ccb      	ldrb	r3, [r1, r3]
 8007b70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	bd80      	pop	{r7, pc}
 8007b78:	40023800 	.word	0x40023800
 8007b7c:	0800c928 	.word	0x0800c928

08007b80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007b80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b84:	b088      	sub	sp, #32
 8007b86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8007b90:	2300      	movs	r3, #0
 8007b92:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8007b94:	2300      	movs	r3, #0
 8007b96:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007b9c:	4bce      	ldr	r3, [pc, #824]	; (8007ed8 <HAL_RCC_GetSysClockFreq+0x358>)
 8007b9e:	689b      	ldr	r3, [r3, #8]
 8007ba0:	f003 030c 	and.w	r3, r3, #12
 8007ba4:	2b0c      	cmp	r3, #12
 8007ba6:	f200 818d 	bhi.w	8007ec4 <HAL_RCC_GetSysClockFreq+0x344>
 8007baa:	a201      	add	r2, pc, #4	; (adr r2, 8007bb0 <HAL_RCC_GetSysClockFreq+0x30>)
 8007bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bb0:	08007be5 	.word	0x08007be5
 8007bb4:	08007ec5 	.word	0x08007ec5
 8007bb8:	08007ec5 	.word	0x08007ec5
 8007bbc:	08007ec5 	.word	0x08007ec5
 8007bc0:	08007beb 	.word	0x08007beb
 8007bc4:	08007ec5 	.word	0x08007ec5
 8007bc8:	08007ec5 	.word	0x08007ec5
 8007bcc:	08007ec5 	.word	0x08007ec5
 8007bd0:	08007bf1 	.word	0x08007bf1
 8007bd4:	08007ec5 	.word	0x08007ec5
 8007bd8:	08007ec5 	.word	0x08007ec5
 8007bdc:	08007ec5 	.word	0x08007ec5
 8007be0:	08007d65 	.word	0x08007d65
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007be4:	4bbd      	ldr	r3, [pc, #756]	; (8007edc <HAL_RCC_GetSysClockFreq+0x35c>)
 8007be6:	61bb      	str	r3, [r7, #24]
       break;
 8007be8:	e16f      	b.n	8007eca <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007bea:	4bbd      	ldr	r3, [pc, #756]	; (8007ee0 <HAL_RCC_GetSysClockFreq+0x360>)
 8007bec:	61bb      	str	r3, [r7, #24]
      break;
 8007bee:	e16c      	b.n	8007eca <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007bf0:	4bb9      	ldr	r3, [pc, #740]	; (8007ed8 <HAL_RCC_GetSysClockFreq+0x358>)
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007bf8:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007bfa:	4bb7      	ldr	r3, [pc, #732]	; (8007ed8 <HAL_RCC_GetSysClockFreq+0x358>)
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d053      	beq.n	8007cae <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007c06:	4bb4      	ldr	r3, [pc, #720]	; (8007ed8 <HAL_RCC_GetSysClockFreq+0x358>)
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	099b      	lsrs	r3, r3, #6
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	f04f 0300 	mov.w	r3, #0
 8007c12:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007c16:	f04f 0100 	mov.w	r1, #0
 8007c1a:	ea02 0400 	and.w	r4, r2, r0
 8007c1e:	603c      	str	r4, [r7, #0]
 8007c20:	400b      	ands	r3, r1
 8007c22:	607b      	str	r3, [r7, #4]
 8007c24:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007c28:	4620      	mov	r0, r4
 8007c2a:	4629      	mov	r1, r5
 8007c2c:	f04f 0200 	mov.w	r2, #0
 8007c30:	f04f 0300 	mov.w	r3, #0
 8007c34:	014b      	lsls	r3, r1, #5
 8007c36:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007c3a:	0142      	lsls	r2, r0, #5
 8007c3c:	4610      	mov	r0, r2
 8007c3e:	4619      	mov	r1, r3
 8007c40:	4623      	mov	r3, r4
 8007c42:	1ac0      	subs	r0, r0, r3
 8007c44:	462b      	mov	r3, r5
 8007c46:	eb61 0103 	sbc.w	r1, r1, r3
 8007c4a:	f04f 0200 	mov.w	r2, #0
 8007c4e:	f04f 0300 	mov.w	r3, #0
 8007c52:	018b      	lsls	r3, r1, #6
 8007c54:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007c58:	0182      	lsls	r2, r0, #6
 8007c5a:	1a12      	subs	r2, r2, r0
 8007c5c:	eb63 0301 	sbc.w	r3, r3, r1
 8007c60:	f04f 0000 	mov.w	r0, #0
 8007c64:	f04f 0100 	mov.w	r1, #0
 8007c68:	00d9      	lsls	r1, r3, #3
 8007c6a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007c6e:	00d0      	lsls	r0, r2, #3
 8007c70:	4602      	mov	r2, r0
 8007c72:	460b      	mov	r3, r1
 8007c74:	4621      	mov	r1, r4
 8007c76:	1852      	adds	r2, r2, r1
 8007c78:	4629      	mov	r1, r5
 8007c7a:	eb43 0101 	adc.w	r1, r3, r1
 8007c7e:	460b      	mov	r3, r1
 8007c80:	f04f 0000 	mov.w	r0, #0
 8007c84:	f04f 0100 	mov.w	r1, #0
 8007c88:	0259      	lsls	r1, r3, #9
 8007c8a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8007c8e:	0250      	lsls	r0, r2, #9
 8007c90:	4602      	mov	r2, r0
 8007c92:	460b      	mov	r3, r1
 8007c94:	4610      	mov	r0, r2
 8007c96:	4619      	mov	r1, r3
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	461a      	mov	r2, r3
 8007c9c:	f04f 0300 	mov.w	r3, #0
 8007ca0:	f7f8 fff2 	bl	8000c88 <__aeabi_uldivmod>
 8007ca4:	4602      	mov	r2, r0
 8007ca6:	460b      	mov	r3, r1
 8007ca8:	4613      	mov	r3, r2
 8007caa:	61fb      	str	r3, [r7, #28]
 8007cac:	e04c      	b.n	8007d48 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007cae:	4b8a      	ldr	r3, [pc, #552]	; (8007ed8 <HAL_RCC_GetSysClockFreq+0x358>)
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	099b      	lsrs	r3, r3, #6
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	f04f 0300 	mov.w	r3, #0
 8007cba:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007cbe:	f04f 0100 	mov.w	r1, #0
 8007cc2:	ea02 0a00 	and.w	sl, r2, r0
 8007cc6:	ea03 0b01 	and.w	fp, r3, r1
 8007cca:	4650      	mov	r0, sl
 8007ccc:	4659      	mov	r1, fp
 8007cce:	f04f 0200 	mov.w	r2, #0
 8007cd2:	f04f 0300 	mov.w	r3, #0
 8007cd6:	014b      	lsls	r3, r1, #5
 8007cd8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007cdc:	0142      	lsls	r2, r0, #5
 8007cde:	4610      	mov	r0, r2
 8007ce0:	4619      	mov	r1, r3
 8007ce2:	ebb0 000a 	subs.w	r0, r0, sl
 8007ce6:	eb61 010b 	sbc.w	r1, r1, fp
 8007cea:	f04f 0200 	mov.w	r2, #0
 8007cee:	f04f 0300 	mov.w	r3, #0
 8007cf2:	018b      	lsls	r3, r1, #6
 8007cf4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007cf8:	0182      	lsls	r2, r0, #6
 8007cfa:	1a12      	subs	r2, r2, r0
 8007cfc:	eb63 0301 	sbc.w	r3, r3, r1
 8007d00:	f04f 0000 	mov.w	r0, #0
 8007d04:	f04f 0100 	mov.w	r1, #0
 8007d08:	00d9      	lsls	r1, r3, #3
 8007d0a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007d0e:	00d0      	lsls	r0, r2, #3
 8007d10:	4602      	mov	r2, r0
 8007d12:	460b      	mov	r3, r1
 8007d14:	eb12 020a 	adds.w	r2, r2, sl
 8007d18:	eb43 030b 	adc.w	r3, r3, fp
 8007d1c:	f04f 0000 	mov.w	r0, #0
 8007d20:	f04f 0100 	mov.w	r1, #0
 8007d24:	0299      	lsls	r1, r3, #10
 8007d26:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007d2a:	0290      	lsls	r0, r2, #10
 8007d2c:	4602      	mov	r2, r0
 8007d2e:	460b      	mov	r3, r1
 8007d30:	4610      	mov	r0, r2
 8007d32:	4619      	mov	r1, r3
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	461a      	mov	r2, r3
 8007d38:	f04f 0300 	mov.w	r3, #0
 8007d3c:	f7f8 ffa4 	bl	8000c88 <__aeabi_uldivmod>
 8007d40:	4602      	mov	r2, r0
 8007d42:	460b      	mov	r3, r1
 8007d44:	4613      	mov	r3, r2
 8007d46:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007d48:	4b63      	ldr	r3, [pc, #396]	; (8007ed8 <HAL_RCC_GetSysClockFreq+0x358>)
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	0c1b      	lsrs	r3, r3, #16
 8007d4e:	f003 0303 	and.w	r3, r3, #3
 8007d52:	3301      	adds	r3, #1
 8007d54:	005b      	lsls	r3, r3, #1
 8007d56:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8007d58:	69fa      	ldr	r2, [r7, #28]
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d60:	61bb      	str	r3, [r7, #24]
      break;
 8007d62:	e0b2      	b.n	8007eca <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007d64:	4b5c      	ldr	r3, [pc, #368]	; (8007ed8 <HAL_RCC_GetSysClockFreq+0x358>)
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d6c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007d6e:	4b5a      	ldr	r3, [pc, #360]	; (8007ed8 <HAL_RCC_GetSysClockFreq+0x358>)
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d04d      	beq.n	8007e16 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d7a:	4b57      	ldr	r3, [pc, #348]	; (8007ed8 <HAL_RCC_GetSysClockFreq+0x358>)
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	099b      	lsrs	r3, r3, #6
 8007d80:	461a      	mov	r2, r3
 8007d82:	f04f 0300 	mov.w	r3, #0
 8007d86:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007d8a:	f04f 0100 	mov.w	r1, #0
 8007d8e:	ea02 0800 	and.w	r8, r2, r0
 8007d92:	ea03 0901 	and.w	r9, r3, r1
 8007d96:	4640      	mov	r0, r8
 8007d98:	4649      	mov	r1, r9
 8007d9a:	f04f 0200 	mov.w	r2, #0
 8007d9e:	f04f 0300 	mov.w	r3, #0
 8007da2:	014b      	lsls	r3, r1, #5
 8007da4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007da8:	0142      	lsls	r2, r0, #5
 8007daa:	4610      	mov	r0, r2
 8007dac:	4619      	mov	r1, r3
 8007dae:	ebb0 0008 	subs.w	r0, r0, r8
 8007db2:	eb61 0109 	sbc.w	r1, r1, r9
 8007db6:	f04f 0200 	mov.w	r2, #0
 8007dba:	f04f 0300 	mov.w	r3, #0
 8007dbe:	018b      	lsls	r3, r1, #6
 8007dc0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007dc4:	0182      	lsls	r2, r0, #6
 8007dc6:	1a12      	subs	r2, r2, r0
 8007dc8:	eb63 0301 	sbc.w	r3, r3, r1
 8007dcc:	f04f 0000 	mov.w	r0, #0
 8007dd0:	f04f 0100 	mov.w	r1, #0
 8007dd4:	00d9      	lsls	r1, r3, #3
 8007dd6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007dda:	00d0      	lsls	r0, r2, #3
 8007ddc:	4602      	mov	r2, r0
 8007dde:	460b      	mov	r3, r1
 8007de0:	eb12 0208 	adds.w	r2, r2, r8
 8007de4:	eb43 0309 	adc.w	r3, r3, r9
 8007de8:	f04f 0000 	mov.w	r0, #0
 8007dec:	f04f 0100 	mov.w	r1, #0
 8007df0:	0259      	lsls	r1, r3, #9
 8007df2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8007df6:	0250      	lsls	r0, r2, #9
 8007df8:	4602      	mov	r2, r0
 8007dfa:	460b      	mov	r3, r1
 8007dfc:	4610      	mov	r0, r2
 8007dfe:	4619      	mov	r1, r3
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	461a      	mov	r2, r3
 8007e04:	f04f 0300 	mov.w	r3, #0
 8007e08:	f7f8 ff3e 	bl	8000c88 <__aeabi_uldivmod>
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	460b      	mov	r3, r1
 8007e10:	4613      	mov	r3, r2
 8007e12:	61fb      	str	r3, [r7, #28]
 8007e14:	e04a      	b.n	8007eac <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e16:	4b30      	ldr	r3, [pc, #192]	; (8007ed8 <HAL_RCC_GetSysClockFreq+0x358>)
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	099b      	lsrs	r3, r3, #6
 8007e1c:	461a      	mov	r2, r3
 8007e1e:	f04f 0300 	mov.w	r3, #0
 8007e22:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007e26:	f04f 0100 	mov.w	r1, #0
 8007e2a:	ea02 0400 	and.w	r4, r2, r0
 8007e2e:	ea03 0501 	and.w	r5, r3, r1
 8007e32:	4620      	mov	r0, r4
 8007e34:	4629      	mov	r1, r5
 8007e36:	f04f 0200 	mov.w	r2, #0
 8007e3a:	f04f 0300 	mov.w	r3, #0
 8007e3e:	014b      	lsls	r3, r1, #5
 8007e40:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007e44:	0142      	lsls	r2, r0, #5
 8007e46:	4610      	mov	r0, r2
 8007e48:	4619      	mov	r1, r3
 8007e4a:	1b00      	subs	r0, r0, r4
 8007e4c:	eb61 0105 	sbc.w	r1, r1, r5
 8007e50:	f04f 0200 	mov.w	r2, #0
 8007e54:	f04f 0300 	mov.w	r3, #0
 8007e58:	018b      	lsls	r3, r1, #6
 8007e5a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007e5e:	0182      	lsls	r2, r0, #6
 8007e60:	1a12      	subs	r2, r2, r0
 8007e62:	eb63 0301 	sbc.w	r3, r3, r1
 8007e66:	f04f 0000 	mov.w	r0, #0
 8007e6a:	f04f 0100 	mov.w	r1, #0
 8007e6e:	00d9      	lsls	r1, r3, #3
 8007e70:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007e74:	00d0      	lsls	r0, r2, #3
 8007e76:	4602      	mov	r2, r0
 8007e78:	460b      	mov	r3, r1
 8007e7a:	1912      	adds	r2, r2, r4
 8007e7c:	eb45 0303 	adc.w	r3, r5, r3
 8007e80:	f04f 0000 	mov.w	r0, #0
 8007e84:	f04f 0100 	mov.w	r1, #0
 8007e88:	0299      	lsls	r1, r3, #10
 8007e8a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007e8e:	0290      	lsls	r0, r2, #10
 8007e90:	4602      	mov	r2, r0
 8007e92:	460b      	mov	r3, r1
 8007e94:	4610      	mov	r0, r2
 8007e96:	4619      	mov	r1, r3
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	f04f 0300 	mov.w	r3, #0
 8007ea0:	f7f8 fef2 	bl	8000c88 <__aeabi_uldivmod>
 8007ea4:	4602      	mov	r2, r0
 8007ea6:	460b      	mov	r3, r1
 8007ea8:	4613      	mov	r3, r2
 8007eaa:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8007eac:	4b0a      	ldr	r3, [pc, #40]	; (8007ed8 <HAL_RCC_GetSysClockFreq+0x358>)
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	0f1b      	lsrs	r3, r3, #28
 8007eb2:	f003 0307 	and.w	r3, r3, #7
 8007eb6:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8007eb8:	69fa      	ldr	r2, [r7, #28]
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ec0:	61bb      	str	r3, [r7, #24]
      break;
 8007ec2:	e002      	b.n	8007eca <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007ec4:	4b05      	ldr	r3, [pc, #20]	; (8007edc <HAL_RCC_GetSysClockFreq+0x35c>)
 8007ec6:	61bb      	str	r3, [r7, #24]
      break;
 8007ec8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007eca:	69bb      	ldr	r3, [r7, #24]
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3720      	adds	r7, #32
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ed6:	bf00      	nop
 8007ed8:	40023800 	.word	0x40023800
 8007edc:	00f42400 	.word	0x00f42400
 8007ee0:	007a1200 	.word	0x007a1200

08007ee4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b086      	sub	sp, #24
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d101      	bne.n	8007ef6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	e28d      	b.n	8008412 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f003 0301 	and.w	r3, r3, #1
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	f000 8083 	beq.w	800800a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007f04:	4b94      	ldr	r3, [pc, #592]	; (8008158 <HAL_RCC_OscConfig+0x274>)
 8007f06:	689b      	ldr	r3, [r3, #8]
 8007f08:	f003 030c 	and.w	r3, r3, #12
 8007f0c:	2b04      	cmp	r3, #4
 8007f0e:	d019      	beq.n	8007f44 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007f10:	4b91      	ldr	r3, [pc, #580]	; (8008158 <HAL_RCC_OscConfig+0x274>)
 8007f12:	689b      	ldr	r3, [r3, #8]
 8007f14:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007f18:	2b08      	cmp	r3, #8
 8007f1a:	d106      	bne.n	8007f2a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007f1c:	4b8e      	ldr	r3, [pc, #568]	; (8008158 <HAL_RCC_OscConfig+0x274>)
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f28:	d00c      	beq.n	8007f44 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007f2a:	4b8b      	ldr	r3, [pc, #556]	; (8008158 <HAL_RCC_OscConfig+0x274>)
 8007f2c:	689b      	ldr	r3, [r3, #8]
 8007f2e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007f32:	2b0c      	cmp	r3, #12
 8007f34:	d112      	bne.n	8007f5c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007f36:	4b88      	ldr	r3, [pc, #544]	; (8008158 <HAL_RCC_OscConfig+0x274>)
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f42:	d10b      	bne.n	8007f5c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f44:	4b84      	ldr	r3, [pc, #528]	; (8008158 <HAL_RCC_OscConfig+0x274>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d05b      	beq.n	8008008 <HAL_RCC_OscConfig+0x124>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d157      	bne.n	8008008 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8007f58:	2301      	movs	r3, #1
 8007f5a:	e25a      	b.n	8008412 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	685b      	ldr	r3, [r3, #4]
 8007f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f64:	d106      	bne.n	8007f74 <HAL_RCC_OscConfig+0x90>
 8007f66:	4b7c      	ldr	r3, [pc, #496]	; (8008158 <HAL_RCC_OscConfig+0x274>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4a7b      	ldr	r2, [pc, #492]	; (8008158 <HAL_RCC_OscConfig+0x274>)
 8007f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f70:	6013      	str	r3, [r2, #0]
 8007f72:	e01d      	b.n	8007fb0 <HAL_RCC_OscConfig+0xcc>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007f7c:	d10c      	bne.n	8007f98 <HAL_RCC_OscConfig+0xb4>
 8007f7e:	4b76      	ldr	r3, [pc, #472]	; (8008158 <HAL_RCC_OscConfig+0x274>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a75      	ldr	r2, [pc, #468]	; (8008158 <HAL_RCC_OscConfig+0x274>)
 8007f84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007f88:	6013      	str	r3, [r2, #0]
 8007f8a:	4b73      	ldr	r3, [pc, #460]	; (8008158 <HAL_RCC_OscConfig+0x274>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4a72      	ldr	r2, [pc, #456]	; (8008158 <HAL_RCC_OscConfig+0x274>)
 8007f90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f94:	6013      	str	r3, [r2, #0]
 8007f96:	e00b      	b.n	8007fb0 <HAL_RCC_OscConfig+0xcc>
 8007f98:	4b6f      	ldr	r3, [pc, #444]	; (8008158 <HAL_RCC_OscConfig+0x274>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a6e      	ldr	r2, [pc, #440]	; (8008158 <HAL_RCC_OscConfig+0x274>)
 8007f9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007fa2:	6013      	str	r3, [r2, #0]
 8007fa4:	4b6c      	ldr	r3, [pc, #432]	; (8008158 <HAL_RCC_OscConfig+0x274>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a6b      	ldr	r2, [pc, #428]	; (8008158 <HAL_RCC_OscConfig+0x274>)
 8007faa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007fae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	685b      	ldr	r3, [r3, #4]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d013      	beq.n	8007fe0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fb8:	f7fe fa54 	bl	8006464 <HAL_GetTick>
 8007fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007fbe:	e008      	b.n	8007fd2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007fc0:	f7fe fa50 	bl	8006464 <HAL_GetTick>
 8007fc4:	4602      	mov	r2, r0
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	1ad3      	subs	r3, r2, r3
 8007fca:	2b64      	cmp	r3, #100	; 0x64
 8007fcc:	d901      	bls.n	8007fd2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8007fce:	2303      	movs	r3, #3
 8007fd0:	e21f      	b.n	8008412 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007fd2:	4b61      	ldr	r3, [pc, #388]	; (8008158 <HAL_RCC_OscConfig+0x274>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d0f0      	beq.n	8007fc0 <HAL_RCC_OscConfig+0xdc>
 8007fde:	e014      	b.n	800800a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fe0:	f7fe fa40 	bl	8006464 <HAL_GetTick>
 8007fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007fe6:	e008      	b.n	8007ffa <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007fe8:	f7fe fa3c 	bl	8006464 <HAL_GetTick>
 8007fec:	4602      	mov	r2, r0
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	1ad3      	subs	r3, r2, r3
 8007ff2:	2b64      	cmp	r3, #100	; 0x64
 8007ff4:	d901      	bls.n	8007ffa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8007ff6:	2303      	movs	r3, #3
 8007ff8:	e20b      	b.n	8008412 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007ffa:	4b57      	ldr	r3, [pc, #348]	; (8008158 <HAL_RCC_OscConfig+0x274>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008002:	2b00      	cmp	r3, #0
 8008004:	d1f0      	bne.n	8007fe8 <HAL_RCC_OscConfig+0x104>
 8008006:	e000      	b.n	800800a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008008:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f003 0302 	and.w	r3, r3, #2
 8008012:	2b00      	cmp	r3, #0
 8008014:	d06f      	beq.n	80080f6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008016:	4b50      	ldr	r3, [pc, #320]	; (8008158 <HAL_RCC_OscConfig+0x274>)
 8008018:	689b      	ldr	r3, [r3, #8]
 800801a:	f003 030c 	and.w	r3, r3, #12
 800801e:	2b00      	cmp	r3, #0
 8008020:	d017      	beq.n	8008052 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008022:	4b4d      	ldr	r3, [pc, #308]	; (8008158 <HAL_RCC_OscConfig+0x274>)
 8008024:	689b      	ldr	r3, [r3, #8]
 8008026:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800802a:	2b08      	cmp	r3, #8
 800802c:	d105      	bne.n	800803a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800802e:	4b4a      	ldr	r3, [pc, #296]	; (8008158 <HAL_RCC_OscConfig+0x274>)
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008036:	2b00      	cmp	r3, #0
 8008038:	d00b      	beq.n	8008052 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800803a:	4b47      	ldr	r3, [pc, #284]	; (8008158 <HAL_RCC_OscConfig+0x274>)
 800803c:	689b      	ldr	r3, [r3, #8]
 800803e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008042:	2b0c      	cmp	r3, #12
 8008044:	d11c      	bne.n	8008080 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008046:	4b44      	ldr	r3, [pc, #272]	; (8008158 <HAL_RCC_OscConfig+0x274>)
 8008048:	685b      	ldr	r3, [r3, #4]
 800804a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800804e:	2b00      	cmp	r3, #0
 8008050:	d116      	bne.n	8008080 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008052:	4b41      	ldr	r3, [pc, #260]	; (8008158 <HAL_RCC_OscConfig+0x274>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f003 0302 	and.w	r3, r3, #2
 800805a:	2b00      	cmp	r3, #0
 800805c:	d005      	beq.n	800806a <HAL_RCC_OscConfig+0x186>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	68db      	ldr	r3, [r3, #12]
 8008062:	2b01      	cmp	r3, #1
 8008064:	d001      	beq.n	800806a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8008066:	2301      	movs	r3, #1
 8008068:	e1d3      	b.n	8008412 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800806a:	4b3b      	ldr	r3, [pc, #236]	; (8008158 <HAL_RCC_OscConfig+0x274>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	691b      	ldr	r3, [r3, #16]
 8008076:	00db      	lsls	r3, r3, #3
 8008078:	4937      	ldr	r1, [pc, #220]	; (8008158 <HAL_RCC_OscConfig+0x274>)
 800807a:	4313      	orrs	r3, r2
 800807c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800807e:	e03a      	b.n	80080f6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	68db      	ldr	r3, [r3, #12]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d020      	beq.n	80080ca <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008088:	4b34      	ldr	r3, [pc, #208]	; (800815c <HAL_RCC_OscConfig+0x278>)
 800808a:	2201      	movs	r2, #1
 800808c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800808e:	f7fe f9e9 	bl	8006464 <HAL_GetTick>
 8008092:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008094:	e008      	b.n	80080a8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008096:	f7fe f9e5 	bl	8006464 <HAL_GetTick>
 800809a:	4602      	mov	r2, r0
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	1ad3      	subs	r3, r2, r3
 80080a0:	2b02      	cmp	r3, #2
 80080a2:	d901      	bls.n	80080a8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80080a4:	2303      	movs	r3, #3
 80080a6:	e1b4      	b.n	8008412 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80080a8:	4b2b      	ldr	r3, [pc, #172]	; (8008158 <HAL_RCC_OscConfig+0x274>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f003 0302 	and.w	r3, r3, #2
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d0f0      	beq.n	8008096 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080b4:	4b28      	ldr	r3, [pc, #160]	; (8008158 <HAL_RCC_OscConfig+0x274>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	691b      	ldr	r3, [r3, #16]
 80080c0:	00db      	lsls	r3, r3, #3
 80080c2:	4925      	ldr	r1, [pc, #148]	; (8008158 <HAL_RCC_OscConfig+0x274>)
 80080c4:	4313      	orrs	r3, r2
 80080c6:	600b      	str	r3, [r1, #0]
 80080c8:	e015      	b.n	80080f6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80080ca:	4b24      	ldr	r3, [pc, #144]	; (800815c <HAL_RCC_OscConfig+0x278>)
 80080cc:	2200      	movs	r2, #0
 80080ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080d0:	f7fe f9c8 	bl	8006464 <HAL_GetTick>
 80080d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80080d6:	e008      	b.n	80080ea <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80080d8:	f7fe f9c4 	bl	8006464 <HAL_GetTick>
 80080dc:	4602      	mov	r2, r0
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	1ad3      	subs	r3, r2, r3
 80080e2:	2b02      	cmp	r3, #2
 80080e4:	d901      	bls.n	80080ea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80080e6:	2303      	movs	r3, #3
 80080e8:	e193      	b.n	8008412 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80080ea:	4b1b      	ldr	r3, [pc, #108]	; (8008158 <HAL_RCC_OscConfig+0x274>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f003 0302 	and.w	r3, r3, #2
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d1f0      	bne.n	80080d8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f003 0308 	and.w	r3, r3, #8
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d036      	beq.n	8008170 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	695b      	ldr	r3, [r3, #20]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d016      	beq.n	8008138 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800810a:	4b15      	ldr	r3, [pc, #84]	; (8008160 <HAL_RCC_OscConfig+0x27c>)
 800810c:	2201      	movs	r2, #1
 800810e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008110:	f7fe f9a8 	bl	8006464 <HAL_GetTick>
 8008114:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008116:	e008      	b.n	800812a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008118:	f7fe f9a4 	bl	8006464 <HAL_GetTick>
 800811c:	4602      	mov	r2, r0
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	1ad3      	subs	r3, r2, r3
 8008122:	2b02      	cmp	r3, #2
 8008124:	d901      	bls.n	800812a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8008126:	2303      	movs	r3, #3
 8008128:	e173      	b.n	8008412 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800812a:	4b0b      	ldr	r3, [pc, #44]	; (8008158 <HAL_RCC_OscConfig+0x274>)
 800812c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800812e:	f003 0302 	and.w	r3, r3, #2
 8008132:	2b00      	cmp	r3, #0
 8008134:	d0f0      	beq.n	8008118 <HAL_RCC_OscConfig+0x234>
 8008136:	e01b      	b.n	8008170 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008138:	4b09      	ldr	r3, [pc, #36]	; (8008160 <HAL_RCC_OscConfig+0x27c>)
 800813a:	2200      	movs	r2, #0
 800813c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800813e:	f7fe f991 	bl	8006464 <HAL_GetTick>
 8008142:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008144:	e00e      	b.n	8008164 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008146:	f7fe f98d 	bl	8006464 <HAL_GetTick>
 800814a:	4602      	mov	r2, r0
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	1ad3      	subs	r3, r2, r3
 8008150:	2b02      	cmp	r3, #2
 8008152:	d907      	bls.n	8008164 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8008154:	2303      	movs	r3, #3
 8008156:	e15c      	b.n	8008412 <HAL_RCC_OscConfig+0x52e>
 8008158:	40023800 	.word	0x40023800
 800815c:	42470000 	.word	0x42470000
 8008160:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008164:	4b8a      	ldr	r3, [pc, #552]	; (8008390 <HAL_RCC_OscConfig+0x4ac>)
 8008166:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008168:	f003 0302 	and.w	r3, r3, #2
 800816c:	2b00      	cmp	r3, #0
 800816e:	d1ea      	bne.n	8008146 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f003 0304 	and.w	r3, r3, #4
 8008178:	2b00      	cmp	r3, #0
 800817a:	f000 8097 	beq.w	80082ac <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800817e:	2300      	movs	r3, #0
 8008180:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008182:	4b83      	ldr	r3, [pc, #524]	; (8008390 <HAL_RCC_OscConfig+0x4ac>)
 8008184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800818a:	2b00      	cmp	r3, #0
 800818c:	d10f      	bne.n	80081ae <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800818e:	2300      	movs	r3, #0
 8008190:	60bb      	str	r3, [r7, #8]
 8008192:	4b7f      	ldr	r3, [pc, #508]	; (8008390 <HAL_RCC_OscConfig+0x4ac>)
 8008194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008196:	4a7e      	ldr	r2, [pc, #504]	; (8008390 <HAL_RCC_OscConfig+0x4ac>)
 8008198:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800819c:	6413      	str	r3, [r2, #64]	; 0x40
 800819e:	4b7c      	ldr	r3, [pc, #496]	; (8008390 <HAL_RCC_OscConfig+0x4ac>)
 80081a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081a6:	60bb      	str	r3, [r7, #8]
 80081a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80081aa:	2301      	movs	r3, #1
 80081ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80081ae:	4b79      	ldr	r3, [pc, #484]	; (8008394 <HAL_RCC_OscConfig+0x4b0>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d118      	bne.n	80081ec <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80081ba:	4b76      	ldr	r3, [pc, #472]	; (8008394 <HAL_RCC_OscConfig+0x4b0>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a75      	ldr	r2, [pc, #468]	; (8008394 <HAL_RCC_OscConfig+0x4b0>)
 80081c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80081c6:	f7fe f94d 	bl	8006464 <HAL_GetTick>
 80081ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80081cc:	e008      	b.n	80081e0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80081ce:	f7fe f949 	bl	8006464 <HAL_GetTick>
 80081d2:	4602      	mov	r2, r0
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	1ad3      	subs	r3, r2, r3
 80081d8:	2b02      	cmp	r3, #2
 80081da:	d901      	bls.n	80081e0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80081dc:	2303      	movs	r3, #3
 80081de:	e118      	b.n	8008412 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80081e0:	4b6c      	ldr	r3, [pc, #432]	; (8008394 <HAL_RCC_OscConfig+0x4b0>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d0f0      	beq.n	80081ce <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	689b      	ldr	r3, [r3, #8]
 80081f0:	2b01      	cmp	r3, #1
 80081f2:	d106      	bne.n	8008202 <HAL_RCC_OscConfig+0x31e>
 80081f4:	4b66      	ldr	r3, [pc, #408]	; (8008390 <HAL_RCC_OscConfig+0x4ac>)
 80081f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081f8:	4a65      	ldr	r2, [pc, #404]	; (8008390 <HAL_RCC_OscConfig+0x4ac>)
 80081fa:	f043 0301 	orr.w	r3, r3, #1
 80081fe:	6713      	str	r3, [r2, #112]	; 0x70
 8008200:	e01c      	b.n	800823c <HAL_RCC_OscConfig+0x358>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	689b      	ldr	r3, [r3, #8]
 8008206:	2b05      	cmp	r3, #5
 8008208:	d10c      	bne.n	8008224 <HAL_RCC_OscConfig+0x340>
 800820a:	4b61      	ldr	r3, [pc, #388]	; (8008390 <HAL_RCC_OscConfig+0x4ac>)
 800820c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800820e:	4a60      	ldr	r2, [pc, #384]	; (8008390 <HAL_RCC_OscConfig+0x4ac>)
 8008210:	f043 0304 	orr.w	r3, r3, #4
 8008214:	6713      	str	r3, [r2, #112]	; 0x70
 8008216:	4b5e      	ldr	r3, [pc, #376]	; (8008390 <HAL_RCC_OscConfig+0x4ac>)
 8008218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800821a:	4a5d      	ldr	r2, [pc, #372]	; (8008390 <HAL_RCC_OscConfig+0x4ac>)
 800821c:	f043 0301 	orr.w	r3, r3, #1
 8008220:	6713      	str	r3, [r2, #112]	; 0x70
 8008222:	e00b      	b.n	800823c <HAL_RCC_OscConfig+0x358>
 8008224:	4b5a      	ldr	r3, [pc, #360]	; (8008390 <HAL_RCC_OscConfig+0x4ac>)
 8008226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008228:	4a59      	ldr	r2, [pc, #356]	; (8008390 <HAL_RCC_OscConfig+0x4ac>)
 800822a:	f023 0301 	bic.w	r3, r3, #1
 800822e:	6713      	str	r3, [r2, #112]	; 0x70
 8008230:	4b57      	ldr	r3, [pc, #348]	; (8008390 <HAL_RCC_OscConfig+0x4ac>)
 8008232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008234:	4a56      	ldr	r2, [pc, #344]	; (8008390 <HAL_RCC_OscConfig+0x4ac>)
 8008236:	f023 0304 	bic.w	r3, r3, #4
 800823a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	689b      	ldr	r3, [r3, #8]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d015      	beq.n	8008270 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008244:	f7fe f90e 	bl	8006464 <HAL_GetTick>
 8008248:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800824a:	e00a      	b.n	8008262 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800824c:	f7fe f90a 	bl	8006464 <HAL_GetTick>
 8008250:	4602      	mov	r2, r0
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	1ad3      	subs	r3, r2, r3
 8008256:	f241 3288 	movw	r2, #5000	; 0x1388
 800825a:	4293      	cmp	r3, r2
 800825c:	d901      	bls.n	8008262 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800825e:	2303      	movs	r3, #3
 8008260:	e0d7      	b.n	8008412 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008262:	4b4b      	ldr	r3, [pc, #300]	; (8008390 <HAL_RCC_OscConfig+0x4ac>)
 8008264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008266:	f003 0302 	and.w	r3, r3, #2
 800826a:	2b00      	cmp	r3, #0
 800826c:	d0ee      	beq.n	800824c <HAL_RCC_OscConfig+0x368>
 800826e:	e014      	b.n	800829a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008270:	f7fe f8f8 	bl	8006464 <HAL_GetTick>
 8008274:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008276:	e00a      	b.n	800828e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008278:	f7fe f8f4 	bl	8006464 <HAL_GetTick>
 800827c:	4602      	mov	r2, r0
 800827e:	693b      	ldr	r3, [r7, #16]
 8008280:	1ad3      	subs	r3, r2, r3
 8008282:	f241 3288 	movw	r2, #5000	; 0x1388
 8008286:	4293      	cmp	r3, r2
 8008288:	d901      	bls.n	800828e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800828a:	2303      	movs	r3, #3
 800828c:	e0c1      	b.n	8008412 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800828e:	4b40      	ldr	r3, [pc, #256]	; (8008390 <HAL_RCC_OscConfig+0x4ac>)
 8008290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008292:	f003 0302 	and.w	r3, r3, #2
 8008296:	2b00      	cmp	r3, #0
 8008298:	d1ee      	bne.n	8008278 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800829a:	7dfb      	ldrb	r3, [r7, #23]
 800829c:	2b01      	cmp	r3, #1
 800829e:	d105      	bne.n	80082ac <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80082a0:	4b3b      	ldr	r3, [pc, #236]	; (8008390 <HAL_RCC_OscConfig+0x4ac>)
 80082a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082a4:	4a3a      	ldr	r2, [pc, #232]	; (8008390 <HAL_RCC_OscConfig+0x4ac>)
 80082a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80082aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	699b      	ldr	r3, [r3, #24]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	f000 80ad 	beq.w	8008410 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80082b6:	4b36      	ldr	r3, [pc, #216]	; (8008390 <HAL_RCC_OscConfig+0x4ac>)
 80082b8:	689b      	ldr	r3, [r3, #8]
 80082ba:	f003 030c 	and.w	r3, r3, #12
 80082be:	2b08      	cmp	r3, #8
 80082c0:	d060      	beq.n	8008384 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	699b      	ldr	r3, [r3, #24]
 80082c6:	2b02      	cmp	r3, #2
 80082c8:	d145      	bne.n	8008356 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082ca:	4b33      	ldr	r3, [pc, #204]	; (8008398 <HAL_RCC_OscConfig+0x4b4>)
 80082cc:	2200      	movs	r2, #0
 80082ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082d0:	f7fe f8c8 	bl	8006464 <HAL_GetTick>
 80082d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80082d6:	e008      	b.n	80082ea <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80082d8:	f7fe f8c4 	bl	8006464 <HAL_GetTick>
 80082dc:	4602      	mov	r2, r0
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	1ad3      	subs	r3, r2, r3
 80082e2:	2b02      	cmp	r3, #2
 80082e4:	d901      	bls.n	80082ea <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80082e6:	2303      	movs	r3, #3
 80082e8:	e093      	b.n	8008412 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80082ea:	4b29      	ldr	r3, [pc, #164]	; (8008390 <HAL_RCC_OscConfig+0x4ac>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d1f0      	bne.n	80082d8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	69da      	ldr	r2, [r3, #28]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6a1b      	ldr	r3, [r3, #32]
 80082fe:	431a      	orrs	r2, r3
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008304:	019b      	lsls	r3, r3, #6
 8008306:	431a      	orrs	r2, r3
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800830c:	085b      	lsrs	r3, r3, #1
 800830e:	3b01      	subs	r3, #1
 8008310:	041b      	lsls	r3, r3, #16
 8008312:	431a      	orrs	r2, r3
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008318:	061b      	lsls	r3, r3, #24
 800831a:	431a      	orrs	r2, r3
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008320:	071b      	lsls	r3, r3, #28
 8008322:	491b      	ldr	r1, [pc, #108]	; (8008390 <HAL_RCC_OscConfig+0x4ac>)
 8008324:	4313      	orrs	r3, r2
 8008326:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008328:	4b1b      	ldr	r3, [pc, #108]	; (8008398 <HAL_RCC_OscConfig+0x4b4>)
 800832a:	2201      	movs	r2, #1
 800832c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800832e:	f7fe f899 	bl	8006464 <HAL_GetTick>
 8008332:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008334:	e008      	b.n	8008348 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008336:	f7fe f895 	bl	8006464 <HAL_GetTick>
 800833a:	4602      	mov	r2, r0
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	1ad3      	subs	r3, r2, r3
 8008340:	2b02      	cmp	r3, #2
 8008342:	d901      	bls.n	8008348 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8008344:	2303      	movs	r3, #3
 8008346:	e064      	b.n	8008412 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008348:	4b11      	ldr	r3, [pc, #68]	; (8008390 <HAL_RCC_OscConfig+0x4ac>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008350:	2b00      	cmp	r3, #0
 8008352:	d0f0      	beq.n	8008336 <HAL_RCC_OscConfig+0x452>
 8008354:	e05c      	b.n	8008410 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008356:	4b10      	ldr	r3, [pc, #64]	; (8008398 <HAL_RCC_OscConfig+0x4b4>)
 8008358:	2200      	movs	r2, #0
 800835a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800835c:	f7fe f882 	bl	8006464 <HAL_GetTick>
 8008360:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008362:	e008      	b.n	8008376 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008364:	f7fe f87e 	bl	8006464 <HAL_GetTick>
 8008368:	4602      	mov	r2, r0
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	1ad3      	subs	r3, r2, r3
 800836e:	2b02      	cmp	r3, #2
 8008370:	d901      	bls.n	8008376 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8008372:	2303      	movs	r3, #3
 8008374:	e04d      	b.n	8008412 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008376:	4b06      	ldr	r3, [pc, #24]	; (8008390 <HAL_RCC_OscConfig+0x4ac>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800837e:	2b00      	cmp	r3, #0
 8008380:	d1f0      	bne.n	8008364 <HAL_RCC_OscConfig+0x480>
 8008382:	e045      	b.n	8008410 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	699b      	ldr	r3, [r3, #24]
 8008388:	2b01      	cmp	r3, #1
 800838a:	d107      	bne.n	800839c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800838c:	2301      	movs	r3, #1
 800838e:	e040      	b.n	8008412 <HAL_RCC_OscConfig+0x52e>
 8008390:	40023800 	.word	0x40023800
 8008394:	40007000 	.word	0x40007000
 8008398:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800839c:	4b1f      	ldr	r3, [pc, #124]	; (800841c <HAL_RCC_OscConfig+0x538>)
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	699b      	ldr	r3, [r3, #24]
 80083a6:	2b01      	cmp	r3, #1
 80083a8:	d030      	beq.n	800840c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80083b4:	429a      	cmp	r2, r3
 80083b6:	d129      	bne.n	800840c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083c2:	429a      	cmp	r2, r3
 80083c4:	d122      	bne.n	800840c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80083c6:	68fa      	ldr	r2, [r7, #12]
 80083c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80083cc:	4013      	ands	r3, r2
 80083ce:	687a      	ldr	r2, [r7, #4]
 80083d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80083d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d119      	bne.n	800840c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083e2:	085b      	lsrs	r3, r3, #1
 80083e4:	3b01      	subs	r3, #1
 80083e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d10f      	bne.n	800840c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80083f8:	429a      	cmp	r2, r3
 80083fa:	d107      	bne.n	800840c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008406:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008408:	429a      	cmp	r2, r3
 800840a:	d001      	beq.n	8008410 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800840c:	2301      	movs	r3, #1
 800840e:	e000      	b.n	8008412 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8008410:	2300      	movs	r3, #0
}
 8008412:	4618      	mov	r0, r3
 8008414:	3718      	adds	r7, #24
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}
 800841a:	bf00      	nop
 800841c:	40023800 	.word	0x40023800

08008420 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b082      	sub	sp, #8
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d101      	bne.n	8008432 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800842e:	2301      	movs	r3, #1
 8008430:	e07b      	b.n	800852a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008436:	2b00      	cmp	r3, #0
 8008438:	d108      	bne.n	800844c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008442:	d009      	beq.n	8008458 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2200      	movs	r2, #0
 8008448:	61da      	str	r2, [r3, #28]
 800844a:	e005      	b.n	8008458 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2200      	movs	r2, #0
 8008450:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2200      	movs	r2, #0
 8008456:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2200      	movs	r2, #0
 800845c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008464:	b2db      	uxtb	r3, r3
 8008466:	2b00      	cmp	r3, #0
 8008468:	d106      	bne.n	8008478 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2200      	movs	r2, #0
 800846e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f7f9 fcca 	bl	8001e0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2202      	movs	r2, #2
 800847c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	681a      	ldr	r2, [r3, #0]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800848e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	685b      	ldr	r3, [r3, #4]
 8008494:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	689b      	ldr	r3, [r3, #8]
 800849c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80084a0:	431a      	orrs	r2, r3
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	68db      	ldr	r3, [r3, #12]
 80084a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80084aa:	431a      	orrs	r2, r3
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	691b      	ldr	r3, [r3, #16]
 80084b0:	f003 0302 	and.w	r3, r3, #2
 80084b4:	431a      	orrs	r2, r3
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	695b      	ldr	r3, [r3, #20]
 80084ba:	f003 0301 	and.w	r3, r3, #1
 80084be:	431a      	orrs	r2, r3
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	699b      	ldr	r3, [r3, #24]
 80084c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80084c8:	431a      	orrs	r2, r3
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	69db      	ldr	r3, [r3, #28]
 80084ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80084d2:	431a      	orrs	r2, r3
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6a1b      	ldr	r3, [r3, #32]
 80084d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084dc:	ea42 0103 	orr.w	r1, r2, r3
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084e4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	430a      	orrs	r2, r1
 80084ee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	699b      	ldr	r3, [r3, #24]
 80084f4:	0c1b      	lsrs	r3, r3, #16
 80084f6:	f003 0104 	and.w	r1, r3, #4
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084fe:	f003 0210 	and.w	r2, r3, #16
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	430a      	orrs	r2, r1
 8008508:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	69da      	ldr	r2, [r3, #28]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008518:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2200      	movs	r2, #0
 800851e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2201      	movs	r2, #1
 8008524:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008528:	2300      	movs	r3, #0
}
 800852a:	4618      	mov	r0, r3
 800852c:	3708      	adds	r7, #8
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}

08008532 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008532:	b580      	push	{r7, lr}
 8008534:	b082      	sub	sp, #8
 8008536:	af00      	add	r7, sp, #0
 8008538:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d101      	bne.n	8008544 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008540:	2301      	movs	r3, #1
 8008542:	e041      	b.n	80085c8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800854a:	b2db      	uxtb	r3, r3
 800854c:	2b00      	cmp	r3, #0
 800854e:	d106      	bne.n	800855e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2200      	movs	r2, #0
 8008554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f7f9 fccf 	bl	8001efc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2202      	movs	r2, #2
 8008562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681a      	ldr	r2, [r3, #0]
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	3304      	adds	r3, #4
 800856e:	4619      	mov	r1, r3
 8008570:	4610      	mov	r0, r2
 8008572:	f000 f95d 	bl	8008830 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2201      	movs	r2, #1
 800857a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2201      	movs	r2, #1
 8008582:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2201      	movs	r2, #1
 800858a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2201      	movs	r2, #1
 8008592:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2201      	movs	r2, #1
 800859a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2201      	movs	r2, #1
 80085a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2201      	movs	r2, #1
 80085aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2201      	movs	r2, #1
 80085b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2201      	movs	r2, #1
 80085ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2201      	movs	r2, #1
 80085c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80085c6:	2300      	movs	r3, #0
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3708      	adds	r7, #8
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}

080085d0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80085d0:	b480      	push	{r7}
 80085d2:	b085      	sub	sp, #20
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085de:	b2db      	uxtb	r3, r3
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	d001      	beq.n	80085e8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80085e4:	2301      	movs	r3, #1
 80085e6:	e046      	b.n	8008676 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2202      	movs	r2, #2
 80085ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a23      	ldr	r2, [pc, #140]	; (8008684 <HAL_TIM_Base_Start+0xb4>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d022      	beq.n	8008640 <HAL_TIM_Base_Start+0x70>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008602:	d01d      	beq.n	8008640 <HAL_TIM_Base_Start+0x70>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4a1f      	ldr	r2, [pc, #124]	; (8008688 <HAL_TIM_Base_Start+0xb8>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d018      	beq.n	8008640 <HAL_TIM_Base_Start+0x70>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	4a1e      	ldr	r2, [pc, #120]	; (800868c <HAL_TIM_Base_Start+0xbc>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d013      	beq.n	8008640 <HAL_TIM_Base_Start+0x70>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4a1c      	ldr	r2, [pc, #112]	; (8008690 <HAL_TIM_Base_Start+0xc0>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d00e      	beq.n	8008640 <HAL_TIM_Base_Start+0x70>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4a1b      	ldr	r2, [pc, #108]	; (8008694 <HAL_TIM_Base_Start+0xc4>)
 8008628:	4293      	cmp	r3, r2
 800862a:	d009      	beq.n	8008640 <HAL_TIM_Base_Start+0x70>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a19      	ldr	r2, [pc, #100]	; (8008698 <HAL_TIM_Base_Start+0xc8>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d004      	beq.n	8008640 <HAL_TIM_Base_Start+0x70>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4a18      	ldr	r2, [pc, #96]	; (800869c <HAL_TIM_Base_Start+0xcc>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d111      	bne.n	8008664 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	689b      	ldr	r3, [r3, #8]
 8008646:	f003 0307 	and.w	r3, r3, #7
 800864a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2b06      	cmp	r3, #6
 8008650:	d010      	beq.n	8008674 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	681a      	ldr	r2, [r3, #0]
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f042 0201 	orr.w	r2, r2, #1
 8008660:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008662:	e007      	b.n	8008674 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	681a      	ldr	r2, [r3, #0]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f042 0201 	orr.w	r2, r2, #1
 8008672:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008674:	2300      	movs	r3, #0
}
 8008676:	4618      	mov	r0, r3
 8008678:	3714      	adds	r7, #20
 800867a:	46bd      	mov	sp, r7
 800867c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008680:	4770      	bx	lr
 8008682:	bf00      	nop
 8008684:	40010000 	.word	0x40010000
 8008688:	40000400 	.word	0x40000400
 800868c:	40000800 	.word	0x40000800
 8008690:	40000c00 	.word	0x40000c00
 8008694:	40010400 	.word	0x40010400
 8008698:	40014000 	.word	0x40014000
 800869c:	40001800 	.word	0x40001800

080086a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b084      	sub	sp, #16
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
 80086a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80086aa:	2300      	movs	r3, #0
 80086ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086b4:	2b01      	cmp	r3, #1
 80086b6:	d101      	bne.n	80086bc <HAL_TIM_ConfigClockSource+0x1c>
 80086b8:	2302      	movs	r3, #2
 80086ba:	e0b4      	b.n	8008826 <HAL_TIM_ConfigClockSource+0x186>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2201      	movs	r2, #1
 80086c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2202      	movs	r2, #2
 80086c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	689b      	ldr	r3, [r3, #8]
 80086d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80086da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80086e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	68ba      	ldr	r2, [r7, #8]
 80086ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086f4:	d03e      	beq.n	8008774 <HAL_TIM_ConfigClockSource+0xd4>
 80086f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086fa:	f200 8087 	bhi.w	800880c <HAL_TIM_ConfigClockSource+0x16c>
 80086fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008702:	f000 8086 	beq.w	8008812 <HAL_TIM_ConfigClockSource+0x172>
 8008706:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800870a:	d87f      	bhi.n	800880c <HAL_TIM_ConfigClockSource+0x16c>
 800870c:	2b70      	cmp	r3, #112	; 0x70
 800870e:	d01a      	beq.n	8008746 <HAL_TIM_ConfigClockSource+0xa6>
 8008710:	2b70      	cmp	r3, #112	; 0x70
 8008712:	d87b      	bhi.n	800880c <HAL_TIM_ConfigClockSource+0x16c>
 8008714:	2b60      	cmp	r3, #96	; 0x60
 8008716:	d050      	beq.n	80087ba <HAL_TIM_ConfigClockSource+0x11a>
 8008718:	2b60      	cmp	r3, #96	; 0x60
 800871a:	d877      	bhi.n	800880c <HAL_TIM_ConfigClockSource+0x16c>
 800871c:	2b50      	cmp	r3, #80	; 0x50
 800871e:	d03c      	beq.n	800879a <HAL_TIM_ConfigClockSource+0xfa>
 8008720:	2b50      	cmp	r3, #80	; 0x50
 8008722:	d873      	bhi.n	800880c <HAL_TIM_ConfigClockSource+0x16c>
 8008724:	2b40      	cmp	r3, #64	; 0x40
 8008726:	d058      	beq.n	80087da <HAL_TIM_ConfigClockSource+0x13a>
 8008728:	2b40      	cmp	r3, #64	; 0x40
 800872a:	d86f      	bhi.n	800880c <HAL_TIM_ConfigClockSource+0x16c>
 800872c:	2b30      	cmp	r3, #48	; 0x30
 800872e:	d064      	beq.n	80087fa <HAL_TIM_ConfigClockSource+0x15a>
 8008730:	2b30      	cmp	r3, #48	; 0x30
 8008732:	d86b      	bhi.n	800880c <HAL_TIM_ConfigClockSource+0x16c>
 8008734:	2b20      	cmp	r3, #32
 8008736:	d060      	beq.n	80087fa <HAL_TIM_ConfigClockSource+0x15a>
 8008738:	2b20      	cmp	r3, #32
 800873a:	d867      	bhi.n	800880c <HAL_TIM_ConfigClockSource+0x16c>
 800873c:	2b00      	cmp	r3, #0
 800873e:	d05c      	beq.n	80087fa <HAL_TIM_ConfigClockSource+0x15a>
 8008740:	2b10      	cmp	r3, #16
 8008742:	d05a      	beq.n	80087fa <HAL_TIM_ConfigClockSource+0x15a>
 8008744:	e062      	b.n	800880c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6818      	ldr	r0, [r3, #0]
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	6899      	ldr	r1, [r3, #8]
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	685a      	ldr	r2, [r3, #4]
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	68db      	ldr	r3, [r3, #12]
 8008756:	f000 f985 	bl	8008a64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	689b      	ldr	r3, [r3, #8]
 8008760:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008768:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	68ba      	ldr	r2, [r7, #8]
 8008770:	609a      	str	r2, [r3, #8]
      break;
 8008772:	e04f      	b.n	8008814 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6818      	ldr	r0, [r3, #0]
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	6899      	ldr	r1, [r3, #8]
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	685a      	ldr	r2, [r3, #4]
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	68db      	ldr	r3, [r3, #12]
 8008784:	f000 f96e 	bl	8008a64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	689a      	ldr	r2, [r3, #8]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008796:	609a      	str	r2, [r3, #8]
      break;
 8008798:	e03c      	b.n	8008814 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6818      	ldr	r0, [r3, #0]
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	6859      	ldr	r1, [r3, #4]
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	68db      	ldr	r3, [r3, #12]
 80087a6:	461a      	mov	r2, r3
 80087a8:	f000 f8e2 	bl	8008970 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	2150      	movs	r1, #80	; 0x50
 80087b2:	4618      	mov	r0, r3
 80087b4:	f000 f93b 	bl	8008a2e <TIM_ITRx_SetConfig>
      break;
 80087b8:	e02c      	b.n	8008814 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6818      	ldr	r0, [r3, #0]
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	6859      	ldr	r1, [r3, #4]
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	68db      	ldr	r3, [r3, #12]
 80087c6:	461a      	mov	r2, r3
 80087c8:	f000 f901 	bl	80089ce <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	2160      	movs	r1, #96	; 0x60
 80087d2:	4618      	mov	r0, r3
 80087d4:	f000 f92b 	bl	8008a2e <TIM_ITRx_SetConfig>
      break;
 80087d8:	e01c      	b.n	8008814 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6818      	ldr	r0, [r3, #0]
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	6859      	ldr	r1, [r3, #4]
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	68db      	ldr	r3, [r3, #12]
 80087e6:	461a      	mov	r2, r3
 80087e8:	f000 f8c2 	bl	8008970 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	2140      	movs	r1, #64	; 0x40
 80087f2:	4618      	mov	r0, r3
 80087f4:	f000 f91b 	bl	8008a2e <TIM_ITRx_SetConfig>
      break;
 80087f8:	e00c      	b.n	8008814 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681a      	ldr	r2, [r3, #0]
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4619      	mov	r1, r3
 8008804:	4610      	mov	r0, r2
 8008806:	f000 f912 	bl	8008a2e <TIM_ITRx_SetConfig>
      break;
 800880a:	e003      	b.n	8008814 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800880c:	2301      	movs	r3, #1
 800880e:	73fb      	strb	r3, [r7, #15]
      break;
 8008810:	e000      	b.n	8008814 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008812:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2201      	movs	r2, #1
 8008818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2200      	movs	r2, #0
 8008820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008824:	7bfb      	ldrb	r3, [r7, #15]
}
 8008826:	4618      	mov	r0, r3
 8008828:	3710      	adds	r7, #16
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}
	...

08008830 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008830:	b480      	push	{r7}
 8008832:	b085      	sub	sp, #20
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	4a40      	ldr	r2, [pc, #256]	; (8008944 <TIM_Base_SetConfig+0x114>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d013      	beq.n	8008870 <TIM_Base_SetConfig+0x40>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800884e:	d00f      	beq.n	8008870 <TIM_Base_SetConfig+0x40>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	4a3d      	ldr	r2, [pc, #244]	; (8008948 <TIM_Base_SetConfig+0x118>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d00b      	beq.n	8008870 <TIM_Base_SetConfig+0x40>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	4a3c      	ldr	r2, [pc, #240]	; (800894c <TIM_Base_SetConfig+0x11c>)
 800885c:	4293      	cmp	r3, r2
 800885e:	d007      	beq.n	8008870 <TIM_Base_SetConfig+0x40>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	4a3b      	ldr	r2, [pc, #236]	; (8008950 <TIM_Base_SetConfig+0x120>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d003      	beq.n	8008870 <TIM_Base_SetConfig+0x40>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	4a3a      	ldr	r2, [pc, #232]	; (8008954 <TIM_Base_SetConfig+0x124>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d108      	bne.n	8008882 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008876:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	68fa      	ldr	r2, [r7, #12]
 800887e:	4313      	orrs	r3, r2
 8008880:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	4a2f      	ldr	r2, [pc, #188]	; (8008944 <TIM_Base_SetConfig+0x114>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d02b      	beq.n	80088e2 <TIM_Base_SetConfig+0xb2>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008890:	d027      	beq.n	80088e2 <TIM_Base_SetConfig+0xb2>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	4a2c      	ldr	r2, [pc, #176]	; (8008948 <TIM_Base_SetConfig+0x118>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d023      	beq.n	80088e2 <TIM_Base_SetConfig+0xb2>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	4a2b      	ldr	r2, [pc, #172]	; (800894c <TIM_Base_SetConfig+0x11c>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d01f      	beq.n	80088e2 <TIM_Base_SetConfig+0xb2>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	4a2a      	ldr	r2, [pc, #168]	; (8008950 <TIM_Base_SetConfig+0x120>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d01b      	beq.n	80088e2 <TIM_Base_SetConfig+0xb2>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	4a29      	ldr	r2, [pc, #164]	; (8008954 <TIM_Base_SetConfig+0x124>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d017      	beq.n	80088e2 <TIM_Base_SetConfig+0xb2>
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	4a28      	ldr	r2, [pc, #160]	; (8008958 <TIM_Base_SetConfig+0x128>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d013      	beq.n	80088e2 <TIM_Base_SetConfig+0xb2>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	4a27      	ldr	r2, [pc, #156]	; (800895c <TIM_Base_SetConfig+0x12c>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d00f      	beq.n	80088e2 <TIM_Base_SetConfig+0xb2>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	4a26      	ldr	r2, [pc, #152]	; (8008960 <TIM_Base_SetConfig+0x130>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d00b      	beq.n	80088e2 <TIM_Base_SetConfig+0xb2>
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	4a25      	ldr	r2, [pc, #148]	; (8008964 <TIM_Base_SetConfig+0x134>)
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d007      	beq.n	80088e2 <TIM_Base_SetConfig+0xb2>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	4a24      	ldr	r2, [pc, #144]	; (8008968 <TIM_Base_SetConfig+0x138>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d003      	beq.n	80088e2 <TIM_Base_SetConfig+0xb2>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	4a23      	ldr	r2, [pc, #140]	; (800896c <TIM_Base_SetConfig+0x13c>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d108      	bne.n	80088f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	68db      	ldr	r3, [r3, #12]
 80088ee:	68fa      	ldr	r2, [r7, #12]
 80088f0:	4313      	orrs	r3, r2
 80088f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	695b      	ldr	r3, [r3, #20]
 80088fe:	4313      	orrs	r3, r2
 8008900:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	68fa      	ldr	r2, [r7, #12]
 8008906:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	689a      	ldr	r2, [r3, #8]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	681a      	ldr	r2, [r3, #0]
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	4a0a      	ldr	r2, [pc, #40]	; (8008944 <TIM_Base_SetConfig+0x114>)
 800891c:	4293      	cmp	r3, r2
 800891e:	d003      	beq.n	8008928 <TIM_Base_SetConfig+0xf8>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	4a0c      	ldr	r2, [pc, #48]	; (8008954 <TIM_Base_SetConfig+0x124>)
 8008924:	4293      	cmp	r3, r2
 8008926:	d103      	bne.n	8008930 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	691a      	ldr	r2, [r3, #16]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2201      	movs	r2, #1
 8008934:	615a      	str	r2, [r3, #20]
}
 8008936:	bf00      	nop
 8008938:	3714      	adds	r7, #20
 800893a:	46bd      	mov	sp, r7
 800893c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008940:	4770      	bx	lr
 8008942:	bf00      	nop
 8008944:	40010000 	.word	0x40010000
 8008948:	40000400 	.word	0x40000400
 800894c:	40000800 	.word	0x40000800
 8008950:	40000c00 	.word	0x40000c00
 8008954:	40010400 	.word	0x40010400
 8008958:	40014000 	.word	0x40014000
 800895c:	40014400 	.word	0x40014400
 8008960:	40014800 	.word	0x40014800
 8008964:	40001800 	.word	0x40001800
 8008968:	40001c00 	.word	0x40001c00
 800896c:	40002000 	.word	0x40002000

08008970 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008970:	b480      	push	{r7}
 8008972:	b087      	sub	sp, #28
 8008974:	af00      	add	r7, sp, #0
 8008976:	60f8      	str	r0, [r7, #12]
 8008978:	60b9      	str	r1, [r7, #8]
 800897a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	6a1b      	ldr	r3, [r3, #32]
 8008980:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	6a1b      	ldr	r3, [r3, #32]
 8008986:	f023 0201 	bic.w	r2, r3, #1
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	699b      	ldr	r3, [r3, #24]
 8008992:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800899a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	011b      	lsls	r3, r3, #4
 80089a0:	693a      	ldr	r2, [r7, #16]
 80089a2:	4313      	orrs	r3, r2
 80089a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	f023 030a 	bic.w	r3, r3, #10
 80089ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80089ae:	697a      	ldr	r2, [r7, #20]
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	4313      	orrs	r3, r2
 80089b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	693a      	ldr	r2, [r7, #16]
 80089ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	697a      	ldr	r2, [r7, #20]
 80089c0:	621a      	str	r2, [r3, #32]
}
 80089c2:	bf00      	nop
 80089c4:	371c      	adds	r7, #28
 80089c6:	46bd      	mov	sp, r7
 80089c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089cc:	4770      	bx	lr

080089ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80089ce:	b480      	push	{r7}
 80089d0:	b087      	sub	sp, #28
 80089d2:	af00      	add	r7, sp, #0
 80089d4:	60f8      	str	r0, [r7, #12]
 80089d6:	60b9      	str	r1, [r7, #8]
 80089d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	6a1b      	ldr	r3, [r3, #32]
 80089de:	f023 0210 	bic.w	r2, r3, #16
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	699b      	ldr	r3, [r3, #24]
 80089ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	6a1b      	ldr	r3, [r3, #32]
 80089f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80089f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	031b      	lsls	r3, r3, #12
 80089fe:	697a      	ldr	r2, [r7, #20]
 8008a00:	4313      	orrs	r3, r2
 8008a02:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008a04:	693b      	ldr	r3, [r7, #16]
 8008a06:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008a0a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	011b      	lsls	r3, r3, #4
 8008a10:	693a      	ldr	r2, [r7, #16]
 8008a12:	4313      	orrs	r3, r2
 8008a14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	697a      	ldr	r2, [r7, #20]
 8008a1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	693a      	ldr	r2, [r7, #16]
 8008a20:	621a      	str	r2, [r3, #32]
}
 8008a22:	bf00      	nop
 8008a24:	371c      	adds	r7, #28
 8008a26:	46bd      	mov	sp, r7
 8008a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2c:	4770      	bx	lr

08008a2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008a2e:	b480      	push	{r7}
 8008a30:	b085      	sub	sp, #20
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	6078      	str	r0, [r7, #4]
 8008a36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	689b      	ldr	r3, [r3, #8]
 8008a3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008a46:	683a      	ldr	r2, [r7, #0]
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	4313      	orrs	r3, r2
 8008a4c:	f043 0307 	orr.w	r3, r3, #7
 8008a50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	68fa      	ldr	r2, [r7, #12]
 8008a56:	609a      	str	r2, [r3, #8]
}
 8008a58:	bf00      	nop
 8008a5a:	3714      	adds	r7, #20
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a62:	4770      	bx	lr

08008a64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b087      	sub	sp, #28
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	60f8      	str	r0, [r7, #12]
 8008a6c:	60b9      	str	r1, [r7, #8]
 8008a6e:	607a      	str	r2, [r7, #4]
 8008a70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	689b      	ldr	r3, [r3, #8]
 8008a76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a78:	697b      	ldr	r3, [r7, #20]
 8008a7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008a7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	021a      	lsls	r2, r3, #8
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	431a      	orrs	r2, r3
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	697a      	ldr	r2, [r7, #20]
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	697a      	ldr	r2, [r7, #20]
 8008a96:	609a      	str	r2, [r3, #8]
}
 8008a98:	bf00      	nop
 8008a9a:	371c      	adds	r7, #28
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa2:	4770      	bx	lr

08008aa4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b085      	sub	sp, #20
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ab4:	2b01      	cmp	r3, #1
 8008ab6:	d101      	bne.n	8008abc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008ab8:	2302      	movs	r3, #2
 8008aba:	e05a      	b.n	8008b72 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2201      	movs	r2, #1
 8008ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2202      	movs	r2, #2
 8008ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	685b      	ldr	r3, [r3, #4]
 8008ad2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	689b      	ldr	r3, [r3, #8]
 8008ada:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ae2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	68fa      	ldr	r2, [r7, #12]
 8008aea:	4313      	orrs	r3, r2
 8008aec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	68fa      	ldr	r2, [r7, #12]
 8008af4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4a21      	ldr	r2, [pc, #132]	; (8008b80 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d022      	beq.n	8008b46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b08:	d01d      	beq.n	8008b46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	4a1d      	ldr	r2, [pc, #116]	; (8008b84 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d018      	beq.n	8008b46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	4a1b      	ldr	r2, [pc, #108]	; (8008b88 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d013      	beq.n	8008b46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	4a1a      	ldr	r2, [pc, #104]	; (8008b8c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d00e      	beq.n	8008b46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4a18      	ldr	r2, [pc, #96]	; (8008b90 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d009      	beq.n	8008b46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	4a17      	ldr	r2, [pc, #92]	; (8008b94 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d004      	beq.n	8008b46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4a15      	ldr	r2, [pc, #84]	; (8008b98 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d10c      	bne.n	8008b60 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	68ba      	ldr	r2, [r7, #8]
 8008b54:	4313      	orrs	r3, r2
 8008b56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	68ba      	ldr	r2, [r7, #8]
 8008b5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2201      	movs	r2, #1
 8008b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b70:	2300      	movs	r3, #0
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3714      	adds	r7, #20
 8008b76:	46bd      	mov	sp, r7
 8008b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7c:	4770      	bx	lr
 8008b7e:	bf00      	nop
 8008b80:	40010000 	.word	0x40010000
 8008b84:	40000400 	.word	0x40000400
 8008b88:	40000800 	.word	0x40000800
 8008b8c:	40000c00 	.word	0x40000c00
 8008b90:	40010400 	.word	0x40010400
 8008b94:	40014000 	.word	0x40014000
 8008b98:	40001800 	.word	0x40001800

08008b9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b082      	sub	sp, #8
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d101      	bne.n	8008bae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008baa:	2301      	movs	r3, #1
 8008bac:	e03f      	b.n	8008c2e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bb4:	b2db      	uxtb	r3, r3
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d106      	bne.n	8008bc8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f7f9 f9bc 	bl	8001f40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2224      	movs	r2, #36	; 0x24
 8008bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	68da      	ldr	r2, [r3, #12]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008bde:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f000 f929 	bl	8008e38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	691a      	ldr	r2, [r3, #16]
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008bf4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	695a      	ldr	r2, [r3, #20]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008c04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	68da      	ldr	r2, [r3, #12]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008c14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2220      	movs	r2, #32
 8008c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2220      	movs	r2, #32
 8008c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008c2c:	2300      	movs	r3, #0
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3708      	adds	r7, #8
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}

08008c36 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c36:	b580      	push	{r7, lr}
 8008c38:	b08a      	sub	sp, #40	; 0x28
 8008c3a:	af02      	add	r7, sp, #8
 8008c3c:	60f8      	str	r0, [r7, #12]
 8008c3e:	60b9      	str	r1, [r7, #8]
 8008c40:	603b      	str	r3, [r7, #0]
 8008c42:	4613      	mov	r3, r2
 8008c44:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008c46:	2300      	movs	r3, #0
 8008c48:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c50:	b2db      	uxtb	r3, r3
 8008c52:	2b20      	cmp	r3, #32
 8008c54:	d17c      	bne.n	8008d50 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d002      	beq.n	8008c62 <HAL_UART_Transmit+0x2c>
 8008c5c:	88fb      	ldrh	r3, [r7, #6]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d101      	bne.n	8008c66 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008c62:	2301      	movs	r3, #1
 8008c64:	e075      	b.n	8008d52 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c6c:	2b01      	cmp	r3, #1
 8008c6e:	d101      	bne.n	8008c74 <HAL_UART_Transmit+0x3e>
 8008c70:	2302      	movs	r3, #2
 8008c72:	e06e      	b.n	8008d52 <HAL_UART_Transmit+0x11c>
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	2201      	movs	r2, #1
 8008c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	2221      	movs	r2, #33	; 0x21
 8008c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008c8a:	f7fd fbeb 	bl	8006464 <HAL_GetTick>
 8008c8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	88fa      	ldrh	r2, [r7, #6]
 8008c94:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	88fa      	ldrh	r2, [r7, #6]
 8008c9a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	689b      	ldr	r3, [r3, #8]
 8008ca0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ca4:	d108      	bne.n	8008cb8 <HAL_UART_Transmit+0x82>
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	691b      	ldr	r3, [r3, #16]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d104      	bne.n	8008cb8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	61bb      	str	r3, [r7, #24]
 8008cb6:	e003      	b.n	8008cc0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008cc8:	e02a      	b.n	8008d20 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	9300      	str	r3, [sp, #0]
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	2180      	movs	r1, #128	; 0x80
 8008cd4:	68f8      	ldr	r0, [r7, #12]
 8008cd6:	f000 f840 	bl	8008d5a <UART_WaitOnFlagUntilTimeout>
 8008cda:	4603      	mov	r3, r0
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d001      	beq.n	8008ce4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008ce0:	2303      	movs	r3, #3
 8008ce2:	e036      	b.n	8008d52 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008ce4:	69fb      	ldr	r3, [r7, #28]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d10b      	bne.n	8008d02 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008cea:	69bb      	ldr	r3, [r7, #24]
 8008cec:	881b      	ldrh	r3, [r3, #0]
 8008cee:	461a      	mov	r2, r3
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008cf8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008cfa:	69bb      	ldr	r3, [r7, #24]
 8008cfc:	3302      	adds	r3, #2
 8008cfe:	61bb      	str	r3, [r7, #24]
 8008d00:	e007      	b.n	8008d12 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008d02:	69fb      	ldr	r3, [r7, #28]
 8008d04:	781a      	ldrb	r2, [r3, #0]
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008d0c:	69fb      	ldr	r3, [r7, #28]
 8008d0e:	3301      	adds	r3, #1
 8008d10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008d16:	b29b      	uxth	r3, r3
 8008d18:	3b01      	subs	r3, #1
 8008d1a:	b29a      	uxth	r2, r3
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008d24:	b29b      	uxth	r3, r3
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d1cf      	bne.n	8008cca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	9300      	str	r3, [sp, #0]
 8008d2e:	697b      	ldr	r3, [r7, #20]
 8008d30:	2200      	movs	r2, #0
 8008d32:	2140      	movs	r1, #64	; 0x40
 8008d34:	68f8      	ldr	r0, [r7, #12]
 8008d36:	f000 f810 	bl	8008d5a <UART_WaitOnFlagUntilTimeout>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d001      	beq.n	8008d44 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008d40:	2303      	movs	r3, #3
 8008d42:	e006      	b.n	8008d52 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	2220      	movs	r2, #32
 8008d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	e000      	b.n	8008d52 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008d50:	2302      	movs	r3, #2
  }
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3720      	adds	r7, #32
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}

08008d5a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008d5a:	b580      	push	{r7, lr}
 8008d5c:	b090      	sub	sp, #64	; 0x40
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	60f8      	str	r0, [r7, #12]
 8008d62:	60b9      	str	r1, [r7, #8]
 8008d64:	603b      	str	r3, [r7, #0]
 8008d66:	4613      	mov	r3, r2
 8008d68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d6a:	e050      	b.n	8008e0e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d72:	d04c      	beq.n	8008e0e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008d74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d007      	beq.n	8008d8a <UART_WaitOnFlagUntilTimeout+0x30>
 8008d7a:	f7fd fb73 	bl	8006464 <HAL_GetTick>
 8008d7e:	4602      	mov	r2, r0
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	1ad3      	subs	r3, r2, r3
 8008d84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d86:	429a      	cmp	r2, r3
 8008d88:	d241      	bcs.n	8008e0e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	330c      	adds	r3, #12
 8008d90:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d94:	e853 3f00 	ldrex	r3, [r3]
 8008d98:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d9c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008da0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	330c      	adds	r3, #12
 8008da8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008daa:	637a      	str	r2, [r7, #52]	; 0x34
 8008dac:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008db0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008db2:	e841 2300 	strex	r3, r2, [r1]
 8008db6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d1e5      	bne.n	8008d8a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	3314      	adds	r3, #20
 8008dc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	e853 3f00 	ldrex	r3, [r3]
 8008dcc:	613b      	str	r3, [r7, #16]
   return(result);
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	f023 0301 	bic.w	r3, r3, #1
 8008dd4:	63bb      	str	r3, [r7, #56]	; 0x38
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	3314      	adds	r3, #20
 8008ddc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008dde:	623a      	str	r2, [r7, #32]
 8008de0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008de2:	69f9      	ldr	r1, [r7, #28]
 8008de4:	6a3a      	ldr	r2, [r7, #32]
 8008de6:	e841 2300 	strex	r3, r2, [r1]
 8008dea:	61bb      	str	r3, [r7, #24]
   return(result);
 8008dec:	69bb      	ldr	r3, [r7, #24]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d1e5      	bne.n	8008dbe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	2220      	movs	r2, #32
 8008df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	2220      	movs	r2, #32
 8008dfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	2200      	movs	r2, #0
 8008e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008e0a:	2303      	movs	r3, #3
 8008e0c:	e00f      	b.n	8008e2e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	681a      	ldr	r2, [r3, #0]
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	4013      	ands	r3, r2
 8008e18:	68ba      	ldr	r2, [r7, #8]
 8008e1a:	429a      	cmp	r2, r3
 8008e1c:	bf0c      	ite	eq
 8008e1e:	2301      	moveq	r3, #1
 8008e20:	2300      	movne	r3, #0
 8008e22:	b2db      	uxtb	r3, r3
 8008e24:	461a      	mov	r2, r3
 8008e26:	79fb      	ldrb	r3, [r7, #7]
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	d09f      	beq.n	8008d6c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008e2c:	2300      	movs	r3, #0
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	3740      	adds	r7, #64	; 0x40
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}
	...

08008e38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e3c:	b09f      	sub	sp, #124	; 0x7c
 8008e3e:	af00      	add	r7, sp, #0
 8008e40:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008e42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	691b      	ldr	r3, [r3, #16]
 8008e48:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008e4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e4e:	68d9      	ldr	r1, [r3, #12]
 8008e50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e52:	681a      	ldr	r2, [r3, #0]
 8008e54:	ea40 0301 	orr.w	r3, r0, r1
 8008e58:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008e5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e5c:	689a      	ldr	r2, [r3, #8]
 8008e5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e60:	691b      	ldr	r3, [r3, #16]
 8008e62:	431a      	orrs	r2, r3
 8008e64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e66:	695b      	ldr	r3, [r3, #20]
 8008e68:	431a      	orrs	r2, r3
 8008e6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e6c:	69db      	ldr	r3, [r3, #28]
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8008e72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	68db      	ldr	r3, [r3, #12]
 8008e78:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008e7c:	f021 010c 	bic.w	r1, r1, #12
 8008e80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e82:	681a      	ldr	r2, [r3, #0]
 8008e84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008e86:	430b      	orrs	r3, r1
 8008e88:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008e8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	695b      	ldr	r3, [r3, #20]
 8008e90:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008e94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e96:	6999      	ldr	r1, [r3, #24]
 8008e98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e9a:	681a      	ldr	r2, [r3, #0]
 8008e9c:	ea40 0301 	orr.w	r3, r0, r1
 8008ea0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008ea2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ea4:	681a      	ldr	r2, [r3, #0]
 8008ea6:	4bc5      	ldr	r3, [pc, #788]	; (80091bc <UART_SetConfig+0x384>)
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	d004      	beq.n	8008eb6 <UART_SetConfig+0x7e>
 8008eac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008eae:	681a      	ldr	r2, [r3, #0]
 8008eb0:	4bc3      	ldr	r3, [pc, #780]	; (80091c0 <UART_SetConfig+0x388>)
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	d103      	bne.n	8008ebe <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008eb6:	f7fe fe4f 	bl	8007b58 <HAL_RCC_GetPCLK2Freq>
 8008eba:	6778      	str	r0, [r7, #116]	; 0x74
 8008ebc:	e002      	b.n	8008ec4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008ebe:	f7fe fe37 	bl	8007b30 <HAL_RCC_GetPCLK1Freq>
 8008ec2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ec4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ec6:	69db      	ldr	r3, [r3, #28]
 8008ec8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ecc:	f040 80b6 	bne.w	800903c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008ed0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ed2:	461c      	mov	r4, r3
 8008ed4:	f04f 0500 	mov.w	r5, #0
 8008ed8:	4622      	mov	r2, r4
 8008eda:	462b      	mov	r3, r5
 8008edc:	1891      	adds	r1, r2, r2
 8008ede:	6439      	str	r1, [r7, #64]	; 0x40
 8008ee0:	415b      	adcs	r3, r3
 8008ee2:	647b      	str	r3, [r7, #68]	; 0x44
 8008ee4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008ee8:	1912      	adds	r2, r2, r4
 8008eea:	eb45 0303 	adc.w	r3, r5, r3
 8008eee:	f04f 0000 	mov.w	r0, #0
 8008ef2:	f04f 0100 	mov.w	r1, #0
 8008ef6:	00d9      	lsls	r1, r3, #3
 8008ef8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008efc:	00d0      	lsls	r0, r2, #3
 8008efe:	4602      	mov	r2, r0
 8008f00:	460b      	mov	r3, r1
 8008f02:	1911      	adds	r1, r2, r4
 8008f04:	6639      	str	r1, [r7, #96]	; 0x60
 8008f06:	416b      	adcs	r3, r5
 8008f08:	667b      	str	r3, [r7, #100]	; 0x64
 8008f0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f0c:	685b      	ldr	r3, [r3, #4]
 8008f0e:	461a      	mov	r2, r3
 8008f10:	f04f 0300 	mov.w	r3, #0
 8008f14:	1891      	adds	r1, r2, r2
 8008f16:	63b9      	str	r1, [r7, #56]	; 0x38
 8008f18:	415b      	adcs	r3, r3
 8008f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f1c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008f20:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008f24:	f7f7 feb0 	bl	8000c88 <__aeabi_uldivmod>
 8008f28:	4602      	mov	r2, r0
 8008f2a:	460b      	mov	r3, r1
 8008f2c:	4ba5      	ldr	r3, [pc, #660]	; (80091c4 <UART_SetConfig+0x38c>)
 8008f2e:	fba3 2302 	umull	r2, r3, r3, r2
 8008f32:	095b      	lsrs	r3, r3, #5
 8008f34:	011e      	lsls	r6, r3, #4
 8008f36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f38:	461c      	mov	r4, r3
 8008f3a:	f04f 0500 	mov.w	r5, #0
 8008f3e:	4622      	mov	r2, r4
 8008f40:	462b      	mov	r3, r5
 8008f42:	1891      	adds	r1, r2, r2
 8008f44:	6339      	str	r1, [r7, #48]	; 0x30
 8008f46:	415b      	adcs	r3, r3
 8008f48:	637b      	str	r3, [r7, #52]	; 0x34
 8008f4a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008f4e:	1912      	adds	r2, r2, r4
 8008f50:	eb45 0303 	adc.w	r3, r5, r3
 8008f54:	f04f 0000 	mov.w	r0, #0
 8008f58:	f04f 0100 	mov.w	r1, #0
 8008f5c:	00d9      	lsls	r1, r3, #3
 8008f5e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008f62:	00d0      	lsls	r0, r2, #3
 8008f64:	4602      	mov	r2, r0
 8008f66:	460b      	mov	r3, r1
 8008f68:	1911      	adds	r1, r2, r4
 8008f6a:	65b9      	str	r1, [r7, #88]	; 0x58
 8008f6c:	416b      	adcs	r3, r5
 8008f6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008f70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	461a      	mov	r2, r3
 8008f76:	f04f 0300 	mov.w	r3, #0
 8008f7a:	1891      	adds	r1, r2, r2
 8008f7c:	62b9      	str	r1, [r7, #40]	; 0x28
 8008f7e:	415b      	adcs	r3, r3
 8008f80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008f86:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008f8a:	f7f7 fe7d 	bl	8000c88 <__aeabi_uldivmod>
 8008f8e:	4602      	mov	r2, r0
 8008f90:	460b      	mov	r3, r1
 8008f92:	4b8c      	ldr	r3, [pc, #560]	; (80091c4 <UART_SetConfig+0x38c>)
 8008f94:	fba3 1302 	umull	r1, r3, r3, r2
 8008f98:	095b      	lsrs	r3, r3, #5
 8008f9a:	2164      	movs	r1, #100	; 0x64
 8008f9c:	fb01 f303 	mul.w	r3, r1, r3
 8008fa0:	1ad3      	subs	r3, r2, r3
 8008fa2:	00db      	lsls	r3, r3, #3
 8008fa4:	3332      	adds	r3, #50	; 0x32
 8008fa6:	4a87      	ldr	r2, [pc, #540]	; (80091c4 <UART_SetConfig+0x38c>)
 8008fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8008fac:	095b      	lsrs	r3, r3, #5
 8008fae:	005b      	lsls	r3, r3, #1
 8008fb0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008fb4:	441e      	add	r6, r3
 8008fb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f04f 0100 	mov.w	r1, #0
 8008fbe:	4602      	mov	r2, r0
 8008fc0:	460b      	mov	r3, r1
 8008fc2:	1894      	adds	r4, r2, r2
 8008fc4:	623c      	str	r4, [r7, #32]
 8008fc6:	415b      	adcs	r3, r3
 8008fc8:	627b      	str	r3, [r7, #36]	; 0x24
 8008fca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008fce:	1812      	adds	r2, r2, r0
 8008fd0:	eb41 0303 	adc.w	r3, r1, r3
 8008fd4:	f04f 0400 	mov.w	r4, #0
 8008fd8:	f04f 0500 	mov.w	r5, #0
 8008fdc:	00dd      	lsls	r5, r3, #3
 8008fde:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008fe2:	00d4      	lsls	r4, r2, #3
 8008fe4:	4622      	mov	r2, r4
 8008fe6:	462b      	mov	r3, r5
 8008fe8:	1814      	adds	r4, r2, r0
 8008fea:	653c      	str	r4, [r7, #80]	; 0x50
 8008fec:	414b      	adcs	r3, r1
 8008fee:	657b      	str	r3, [r7, #84]	; 0x54
 8008ff0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ff2:	685b      	ldr	r3, [r3, #4]
 8008ff4:	461a      	mov	r2, r3
 8008ff6:	f04f 0300 	mov.w	r3, #0
 8008ffa:	1891      	adds	r1, r2, r2
 8008ffc:	61b9      	str	r1, [r7, #24]
 8008ffe:	415b      	adcs	r3, r3
 8009000:	61fb      	str	r3, [r7, #28]
 8009002:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009006:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800900a:	f7f7 fe3d 	bl	8000c88 <__aeabi_uldivmod>
 800900e:	4602      	mov	r2, r0
 8009010:	460b      	mov	r3, r1
 8009012:	4b6c      	ldr	r3, [pc, #432]	; (80091c4 <UART_SetConfig+0x38c>)
 8009014:	fba3 1302 	umull	r1, r3, r3, r2
 8009018:	095b      	lsrs	r3, r3, #5
 800901a:	2164      	movs	r1, #100	; 0x64
 800901c:	fb01 f303 	mul.w	r3, r1, r3
 8009020:	1ad3      	subs	r3, r2, r3
 8009022:	00db      	lsls	r3, r3, #3
 8009024:	3332      	adds	r3, #50	; 0x32
 8009026:	4a67      	ldr	r2, [pc, #412]	; (80091c4 <UART_SetConfig+0x38c>)
 8009028:	fba2 2303 	umull	r2, r3, r2, r3
 800902c:	095b      	lsrs	r3, r3, #5
 800902e:	f003 0207 	and.w	r2, r3, #7
 8009032:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	4432      	add	r2, r6
 8009038:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800903a:	e0b9      	b.n	80091b0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800903c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800903e:	461c      	mov	r4, r3
 8009040:	f04f 0500 	mov.w	r5, #0
 8009044:	4622      	mov	r2, r4
 8009046:	462b      	mov	r3, r5
 8009048:	1891      	adds	r1, r2, r2
 800904a:	6139      	str	r1, [r7, #16]
 800904c:	415b      	adcs	r3, r3
 800904e:	617b      	str	r3, [r7, #20]
 8009050:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009054:	1912      	adds	r2, r2, r4
 8009056:	eb45 0303 	adc.w	r3, r5, r3
 800905a:	f04f 0000 	mov.w	r0, #0
 800905e:	f04f 0100 	mov.w	r1, #0
 8009062:	00d9      	lsls	r1, r3, #3
 8009064:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009068:	00d0      	lsls	r0, r2, #3
 800906a:	4602      	mov	r2, r0
 800906c:	460b      	mov	r3, r1
 800906e:	eb12 0804 	adds.w	r8, r2, r4
 8009072:	eb43 0905 	adc.w	r9, r3, r5
 8009076:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009078:	685b      	ldr	r3, [r3, #4]
 800907a:	4618      	mov	r0, r3
 800907c:	f04f 0100 	mov.w	r1, #0
 8009080:	f04f 0200 	mov.w	r2, #0
 8009084:	f04f 0300 	mov.w	r3, #0
 8009088:	008b      	lsls	r3, r1, #2
 800908a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800908e:	0082      	lsls	r2, r0, #2
 8009090:	4640      	mov	r0, r8
 8009092:	4649      	mov	r1, r9
 8009094:	f7f7 fdf8 	bl	8000c88 <__aeabi_uldivmod>
 8009098:	4602      	mov	r2, r0
 800909a:	460b      	mov	r3, r1
 800909c:	4b49      	ldr	r3, [pc, #292]	; (80091c4 <UART_SetConfig+0x38c>)
 800909e:	fba3 2302 	umull	r2, r3, r3, r2
 80090a2:	095b      	lsrs	r3, r3, #5
 80090a4:	011e      	lsls	r6, r3, #4
 80090a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090a8:	4618      	mov	r0, r3
 80090aa:	f04f 0100 	mov.w	r1, #0
 80090ae:	4602      	mov	r2, r0
 80090b0:	460b      	mov	r3, r1
 80090b2:	1894      	adds	r4, r2, r2
 80090b4:	60bc      	str	r4, [r7, #8]
 80090b6:	415b      	adcs	r3, r3
 80090b8:	60fb      	str	r3, [r7, #12]
 80090ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80090be:	1812      	adds	r2, r2, r0
 80090c0:	eb41 0303 	adc.w	r3, r1, r3
 80090c4:	f04f 0400 	mov.w	r4, #0
 80090c8:	f04f 0500 	mov.w	r5, #0
 80090cc:	00dd      	lsls	r5, r3, #3
 80090ce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80090d2:	00d4      	lsls	r4, r2, #3
 80090d4:	4622      	mov	r2, r4
 80090d6:	462b      	mov	r3, r5
 80090d8:	1814      	adds	r4, r2, r0
 80090da:	64bc      	str	r4, [r7, #72]	; 0x48
 80090dc:	414b      	adcs	r3, r1
 80090de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80090e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090e2:	685b      	ldr	r3, [r3, #4]
 80090e4:	4618      	mov	r0, r3
 80090e6:	f04f 0100 	mov.w	r1, #0
 80090ea:	f04f 0200 	mov.w	r2, #0
 80090ee:	f04f 0300 	mov.w	r3, #0
 80090f2:	008b      	lsls	r3, r1, #2
 80090f4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80090f8:	0082      	lsls	r2, r0, #2
 80090fa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80090fe:	f7f7 fdc3 	bl	8000c88 <__aeabi_uldivmod>
 8009102:	4602      	mov	r2, r0
 8009104:	460b      	mov	r3, r1
 8009106:	4b2f      	ldr	r3, [pc, #188]	; (80091c4 <UART_SetConfig+0x38c>)
 8009108:	fba3 1302 	umull	r1, r3, r3, r2
 800910c:	095b      	lsrs	r3, r3, #5
 800910e:	2164      	movs	r1, #100	; 0x64
 8009110:	fb01 f303 	mul.w	r3, r1, r3
 8009114:	1ad3      	subs	r3, r2, r3
 8009116:	011b      	lsls	r3, r3, #4
 8009118:	3332      	adds	r3, #50	; 0x32
 800911a:	4a2a      	ldr	r2, [pc, #168]	; (80091c4 <UART_SetConfig+0x38c>)
 800911c:	fba2 2303 	umull	r2, r3, r2, r3
 8009120:	095b      	lsrs	r3, r3, #5
 8009122:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009126:	441e      	add	r6, r3
 8009128:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800912a:	4618      	mov	r0, r3
 800912c:	f04f 0100 	mov.w	r1, #0
 8009130:	4602      	mov	r2, r0
 8009132:	460b      	mov	r3, r1
 8009134:	1894      	adds	r4, r2, r2
 8009136:	603c      	str	r4, [r7, #0]
 8009138:	415b      	adcs	r3, r3
 800913a:	607b      	str	r3, [r7, #4]
 800913c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009140:	1812      	adds	r2, r2, r0
 8009142:	eb41 0303 	adc.w	r3, r1, r3
 8009146:	f04f 0400 	mov.w	r4, #0
 800914a:	f04f 0500 	mov.w	r5, #0
 800914e:	00dd      	lsls	r5, r3, #3
 8009150:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009154:	00d4      	lsls	r4, r2, #3
 8009156:	4622      	mov	r2, r4
 8009158:	462b      	mov	r3, r5
 800915a:	eb12 0a00 	adds.w	sl, r2, r0
 800915e:	eb43 0b01 	adc.w	fp, r3, r1
 8009162:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009164:	685b      	ldr	r3, [r3, #4]
 8009166:	4618      	mov	r0, r3
 8009168:	f04f 0100 	mov.w	r1, #0
 800916c:	f04f 0200 	mov.w	r2, #0
 8009170:	f04f 0300 	mov.w	r3, #0
 8009174:	008b      	lsls	r3, r1, #2
 8009176:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800917a:	0082      	lsls	r2, r0, #2
 800917c:	4650      	mov	r0, sl
 800917e:	4659      	mov	r1, fp
 8009180:	f7f7 fd82 	bl	8000c88 <__aeabi_uldivmod>
 8009184:	4602      	mov	r2, r0
 8009186:	460b      	mov	r3, r1
 8009188:	4b0e      	ldr	r3, [pc, #56]	; (80091c4 <UART_SetConfig+0x38c>)
 800918a:	fba3 1302 	umull	r1, r3, r3, r2
 800918e:	095b      	lsrs	r3, r3, #5
 8009190:	2164      	movs	r1, #100	; 0x64
 8009192:	fb01 f303 	mul.w	r3, r1, r3
 8009196:	1ad3      	subs	r3, r2, r3
 8009198:	011b      	lsls	r3, r3, #4
 800919a:	3332      	adds	r3, #50	; 0x32
 800919c:	4a09      	ldr	r2, [pc, #36]	; (80091c4 <UART_SetConfig+0x38c>)
 800919e:	fba2 2303 	umull	r2, r3, r2, r3
 80091a2:	095b      	lsrs	r3, r3, #5
 80091a4:	f003 020f 	and.w	r2, r3, #15
 80091a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	4432      	add	r2, r6
 80091ae:	609a      	str	r2, [r3, #8]
}
 80091b0:	bf00      	nop
 80091b2:	377c      	adds	r7, #124	; 0x7c
 80091b4:	46bd      	mov	sp, r7
 80091b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091ba:	bf00      	nop
 80091bc:	40011000 	.word	0x40011000
 80091c0:	40011400 	.word	0x40011400
 80091c4:	51eb851f 	.word	0x51eb851f

080091c8 <__errno>:
 80091c8:	4b01      	ldr	r3, [pc, #4]	; (80091d0 <__errno+0x8>)
 80091ca:	6818      	ldr	r0, [r3, #0]
 80091cc:	4770      	bx	lr
 80091ce:	bf00      	nop
 80091d0:	20000024 	.word	0x20000024

080091d4 <__libc_init_array>:
 80091d4:	b570      	push	{r4, r5, r6, lr}
 80091d6:	4d0d      	ldr	r5, [pc, #52]	; (800920c <__libc_init_array+0x38>)
 80091d8:	4c0d      	ldr	r4, [pc, #52]	; (8009210 <__libc_init_array+0x3c>)
 80091da:	1b64      	subs	r4, r4, r5
 80091dc:	10a4      	asrs	r4, r4, #2
 80091de:	2600      	movs	r6, #0
 80091e0:	42a6      	cmp	r6, r4
 80091e2:	d109      	bne.n	80091f8 <__libc_init_array+0x24>
 80091e4:	4d0b      	ldr	r5, [pc, #44]	; (8009214 <__libc_init_array+0x40>)
 80091e6:	4c0c      	ldr	r4, [pc, #48]	; (8009218 <__libc_init_array+0x44>)
 80091e8:	f003 f850 	bl	800c28c <_init>
 80091ec:	1b64      	subs	r4, r4, r5
 80091ee:	10a4      	asrs	r4, r4, #2
 80091f0:	2600      	movs	r6, #0
 80091f2:	42a6      	cmp	r6, r4
 80091f4:	d105      	bne.n	8009202 <__libc_init_array+0x2e>
 80091f6:	bd70      	pop	{r4, r5, r6, pc}
 80091f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80091fc:	4798      	blx	r3
 80091fe:	3601      	adds	r6, #1
 8009200:	e7ee      	b.n	80091e0 <__libc_init_array+0xc>
 8009202:	f855 3b04 	ldr.w	r3, [r5], #4
 8009206:	4798      	blx	r3
 8009208:	3601      	adds	r6, #1
 800920a:	e7f2      	b.n	80091f2 <__libc_init_array+0x1e>
 800920c:	0800d290 	.word	0x0800d290
 8009210:	0800d290 	.word	0x0800d290
 8009214:	0800d290 	.word	0x0800d290
 8009218:	0800d294 	.word	0x0800d294

0800921c <memset>:
 800921c:	4402      	add	r2, r0
 800921e:	4603      	mov	r3, r0
 8009220:	4293      	cmp	r3, r2
 8009222:	d100      	bne.n	8009226 <memset+0xa>
 8009224:	4770      	bx	lr
 8009226:	f803 1b01 	strb.w	r1, [r3], #1
 800922a:	e7f9      	b.n	8009220 <memset+0x4>

0800922c <__cvt>:
 800922c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009230:	ec55 4b10 	vmov	r4, r5, d0
 8009234:	2d00      	cmp	r5, #0
 8009236:	460e      	mov	r6, r1
 8009238:	4619      	mov	r1, r3
 800923a:	462b      	mov	r3, r5
 800923c:	bfbb      	ittet	lt
 800923e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009242:	461d      	movlt	r5, r3
 8009244:	2300      	movge	r3, #0
 8009246:	232d      	movlt	r3, #45	; 0x2d
 8009248:	700b      	strb	r3, [r1, #0]
 800924a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800924c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009250:	4691      	mov	r9, r2
 8009252:	f023 0820 	bic.w	r8, r3, #32
 8009256:	bfbc      	itt	lt
 8009258:	4622      	movlt	r2, r4
 800925a:	4614      	movlt	r4, r2
 800925c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009260:	d005      	beq.n	800926e <__cvt+0x42>
 8009262:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009266:	d100      	bne.n	800926a <__cvt+0x3e>
 8009268:	3601      	adds	r6, #1
 800926a:	2102      	movs	r1, #2
 800926c:	e000      	b.n	8009270 <__cvt+0x44>
 800926e:	2103      	movs	r1, #3
 8009270:	ab03      	add	r3, sp, #12
 8009272:	9301      	str	r3, [sp, #4]
 8009274:	ab02      	add	r3, sp, #8
 8009276:	9300      	str	r3, [sp, #0]
 8009278:	ec45 4b10 	vmov	d0, r4, r5
 800927c:	4653      	mov	r3, sl
 800927e:	4632      	mov	r2, r6
 8009280:	f000 fcca 	bl	8009c18 <_dtoa_r>
 8009284:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009288:	4607      	mov	r7, r0
 800928a:	d102      	bne.n	8009292 <__cvt+0x66>
 800928c:	f019 0f01 	tst.w	r9, #1
 8009290:	d022      	beq.n	80092d8 <__cvt+0xac>
 8009292:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009296:	eb07 0906 	add.w	r9, r7, r6
 800929a:	d110      	bne.n	80092be <__cvt+0x92>
 800929c:	783b      	ldrb	r3, [r7, #0]
 800929e:	2b30      	cmp	r3, #48	; 0x30
 80092a0:	d10a      	bne.n	80092b8 <__cvt+0x8c>
 80092a2:	2200      	movs	r2, #0
 80092a4:	2300      	movs	r3, #0
 80092a6:	4620      	mov	r0, r4
 80092a8:	4629      	mov	r1, r5
 80092aa:	f7f7 fc2d 	bl	8000b08 <__aeabi_dcmpeq>
 80092ae:	b918      	cbnz	r0, 80092b8 <__cvt+0x8c>
 80092b0:	f1c6 0601 	rsb	r6, r6, #1
 80092b4:	f8ca 6000 	str.w	r6, [sl]
 80092b8:	f8da 3000 	ldr.w	r3, [sl]
 80092bc:	4499      	add	r9, r3
 80092be:	2200      	movs	r2, #0
 80092c0:	2300      	movs	r3, #0
 80092c2:	4620      	mov	r0, r4
 80092c4:	4629      	mov	r1, r5
 80092c6:	f7f7 fc1f 	bl	8000b08 <__aeabi_dcmpeq>
 80092ca:	b108      	cbz	r0, 80092d0 <__cvt+0xa4>
 80092cc:	f8cd 900c 	str.w	r9, [sp, #12]
 80092d0:	2230      	movs	r2, #48	; 0x30
 80092d2:	9b03      	ldr	r3, [sp, #12]
 80092d4:	454b      	cmp	r3, r9
 80092d6:	d307      	bcc.n	80092e8 <__cvt+0xbc>
 80092d8:	9b03      	ldr	r3, [sp, #12]
 80092da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80092dc:	1bdb      	subs	r3, r3, r7
 80092de:	4638      	mov	r0, r7
 80092e0:	6013      	str	r3, [r2, #0]
 80092e2:	b004      	add	sp, #16
 80092e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092e8:	1c59      	adds	r1, r3, #1
 80092ea:	9103      	str	r1, [sp, #12]
 80092ec:	701a      	strb	r2, [r3, #0]
 80092ee:	e7f0      	b.n	80092d2 <__cvt+0xa6>

080092f0 <__exponent>:
 80092f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80092f2:	4603      	mov	r3, r0
 80092f4:	2900      	cmp	r1, #0
 80092f6:	bfb8      	it	lt
 80092f8:	4249      	neglt	r1, r1
 80092fa:	f803 2b02 	strb.w	r2, [r3], #2
 80092fe:	bfb4      	ite	lt
 8009300:	222d      	movlt	r2, #45	; 0x2d
 8009302:	222b      	movge	r2, #43	; 0x2b
 8009304:	2909      	cmp	r1, #9
 8009306:	7042      	strb	r2, [r0, #1]
 8009308:	dd2a      	ble.n	8009360 <__exponent+0x70>
 800930a:	f10d 0407 	add.w	r4, sp, #7
 800930e:	46a4      	mov	ip, r4
 8009310:	270a      	movs	r7, #10
 8009312:	46a6      	mov	lr, r4
 8009314:	460a      	mov	r2, r1
 8009316:	fb91 f6f7 	sdiv	r6, r1, r7
 800931a:	fb07 1516 	mls	r5, r7, r6, r1
 800931e:	3530      	adds	r5, #48	; 0x30
 8009320:	2a63      	cmp	r2, #99	; 0x63
 8009322:	f104 34ff 	add.w	r4, r4, #4294967295
 8009326:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800932a:	4631      	mov	r1, r6
 800932c:	dcf1      	bgt.n	8009312 <__exponent+0x22>
 800932e:	3130      	adds	r1, #48	; 0x30
 8009330:	f1ae 0502 	sub.w	r5, lr, #2
 8009334:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009338:	1c44      	adds	r4, r0, #1
 800933a:	4629      	mov	r1, r5
 800933c:	4561      	cmp	r1, ip
 800933e:	d30a      	bcc.n	8009356 <__exponent+0x66>
 8009340:	f10d 0209 	add.w	r2, sp, #9
 8009344:	eba2 020e 	sub.w	r2, r2, lr
 8009348:	4565      	cmp	r5, ip
 800934a:	bf88      	it	hi
 800934c:	2200      	movhi	r2, #0
 800934e:	4413      	add	r3, r2
 8009350:	1a18      	subs	r0, r3, r0
 8009352:	b003      	add	sp, #12
 8009354:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009356:	f811 2b01 	ldrb.w	r2, [r1], #1
 800935a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800935e:	e7ed      	b.n	800933c <__exponent+0x4c>
 8009360:	2330      	movs	r3, #48	; 0x30
 8009362:	3130      	adds	r1, #48	; 0x30
 8009364:	7083      	strb	r3, [r0, #2]
 8009366:	70c1      	strb	r1, [r0, #3]
 8009368:	1d03      	adds	r3, r0, #4
 800936a:	e7f1      	b.n	8009350 <__exponent+0x60>

0800936c <_printf_float>:
 800936c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009370:	ed2d 8b02 	vpush	{d8}
 8009374:	b08d      	sub	sp, #52	; 0x34
 8009376:	460c      	mov	r4, r1
 8009378:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800937c:	4616      	mov	r6, r2
 800937e:	461f      	mov	r7, r3
 8009380:	4605      	mov	r5, r0
 8009382:	f001 fa35 	bl	800a7f0 <_localeconv_r>
 8009386:	f8d0 a000 	ldr.w	sl, [r0]
 800938a:	4650      	mov	r0, sl
 800938c:	f7f6 ff40 	bl	8000210 <strlen>
 8009390:	2300      	movs	r3, #0
 8009392:	930a      	str	r3, [sp, #40]	; 0x28
 8009394:	6823      	ldr	r3, [r4, #0]
 8009396:	9305      	str	r3, [sp, #20]
 8009398:	f8d8 3000 	ldr.w	r3, [r8]
 800939c:	f894 b018 	ldrb.w	fp, [r4, #24]
 80093a0:	3307      	adds	r3, #7
 80093a2:	f023 0307 	bic.w	r3, r3, #7
 80093a6:	f103 0208 	add.w	r2, r3, #8
 80093aa:	f8c8 2000 	str.w	r2, [r8]
 80093ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093b2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80093b6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80093ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80093be:	9307      	str	r3, [sp, #28]
 80093c0:	f8cd 8018 	str.w	r8, [sp, #24]
 80093c4:	ee08 0a10 	vmov	s16, r0
 80093c8:	4b9f      	ldr	r3, [pc, #636]	; (8009648 <_printf_float+0x2dc>)
 80093ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80093ce:	f04f 32ff 	mov.w	r2, #4294967295
 80093d2:	f7f7 fbcb 	bl	8000b6c <__aeabi_dcmpun>
 80093d6:	bb88      	cbnz	r0, 800943c <_printf_float+0xd0>
 80093d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80093dc:	4b9a      	ldr	r3, [pc, #616]	; (8009648 <_printf_float+0x2dc>)
 80093de:	f04f 32ff 	mov.w	r2, #4294967295
 80093e2:	f7f7 fba5 	bl	8000b30 <__aeabi_dcmple>
 80093e6:	bb48      	cbnz	r0, 800943c <_printf_float+0xd0>
 80093e8:	2200      	movs	r2, #0
 80093ea:	2300      	movs	r3, #0
 80093ec:	4640      	mov	r0, r8
 80093ee:	4649      	mov	r1, r9
 80093f0:	f7f7 fb94 	bl	8000b1c <__aeabi_dcmplt>
 80093f4:	b110      	cbz	r0, 80093fc <_printf_float+0x90>
 80093f6:	232d      	movs	r3, #45	; 0x2d
 80093f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093fc:	4b93      	ldr	r3, [pc, #588]	; (800964c <_printf_float+0x2e0>)
 80093fe:	4894      	ldr	r0, [pc, #592]	; (8009650 <_printf_float+0x2e4>)
 8009400:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009404:	bf94      	ite	ls
 8009406:	4698      	movls	r8, r3
 8009408:	4680      	movhi	r8, r0
 800940a:	2303      	movs	r3, #3
 800940c:	6123      	str	r3, [r4, #16]
 800940e:	9b05      	ldr	r3, [sp, #20]
 8009410:	f023 0204 	bic.w	r2, r3, #4
 8009414:	6022      	str	r2, [r4, #0]
 8009416:	f04f 0900 	mov.w	r9, #0
 800941a:	9700      	str	r7, [sp, #0]
 800941c:	4633      	mov	r3, r6
 800941e:	aa0b      	add	r2, sp, #44	; 0x2c
 8009420:	4621      	mov	r1, r4
 8009422:	4628      	mov	r0, r5
 8009424:	f000 f9d8 	bl	80097d8 <_printf_common>
 8009428:	3001      	adds	r0, #1
 800942a:	f040 8090 	bne.w	800954e <_printf_float+0x1e2>
 800942e:	f04f 30ff 	mov.w	r0, #4294967295
 8009432:	b00d      	add	sp, #52	; 0x34
 8009434:	ecbd 8b02 	vpop	{d8}
 8009438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800943c:	4642      	mov	r2, r8
 800943e:	464b      	mov	r3, r9
 8009440:	4640      	mov	r0, r8
 8009442:	4649      	mov	r1, r9
 8009444:	f7f7 fb92 	bl	8000b6c <__aeabi_dcmpun>
 8009448:	b140      	cbz	r0, 800945c <_printf_float+0xf0>
 800944a:	464b      	mov	r3, r9
 800944c:	2b00      	cmp	r3, #0
 800944e:	bfbc      	itt	lt
 8009450:	232d      	movlt	r3, #45	; 0x2d
 8009452:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009456:	487f      	ldr	r0, [pc, #508]	; (8009654 <_printf_float+0x2e8>)
 8009458:	4b7f      	ldr	r3, [pc, #508]	; (8009658 <_printf_float+0x2ec>)
 800945a:	e7d1      	b.n	8009400 <_printf_float+0x94>
 800945c:	6863      	ldr	r3, [r4, #4]
 800945e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009462:	9206      	str	r2, [sp, #24]
 8009464:	1c5a      	adds	r2, r3, #1
 8009466:	d13f      	bne.n	80094e8 <_printf_float+0x17c>
 8009468:	2306      	movs	r3, #6
 800946a:	6063      	str	r3, [r4, #4]
 800946c:	9b05      	ldr	r3, [sp, #20]
 800946e:	6861      	ldr	r1, [r4, #4]
 8009470:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009474:	2300      	movs	r3, #0
 8009476:	9303      	str	r3, [sp, #12]
 8009478:	ab0a      	add	r3, sp, #40	; 0x28
 800947a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800947e:	ab09      	add	r3, sp, #36	; 0x24
 8009480:	ec49 8b10 	vmov	d0, r8, r9
 8009484:	9300      	str	r3, [sp, #0]
 8009486:	6022      	str	r2, [r4, #0]
 8009488:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800948c:	4628      	mov	r0, r5
 800948e:	f7ff fecd 	bl	800922c <__cvt>
 8009492:	9b06      	ldr	r3, [sp, #24]
 8009494:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009496:	2b47      	cmp	r3, #71	; 0x47
 8009498:	4680      	mov	r8, r0
 800949a:	d108      	bne.n	80094ae <_printf_float+0x142>
 800949c:	1cc8      	adds	r0, r1, #3
 800949e:	db02      	blt.n	80094a6 <_printf_float+0x13a>
 80094a0:	6863      	ldr	r3, [r4, #4]
 80094a2:	4299      	cmp	r1, r3
 80094a4:	dd41      	ble.n	800952a <_printf_float+0x1be>
 80094a6:	f1ab 0b02 	sub.w	fp, fp, #2
 80094aa:	fa5f fb8b 	uxtb.w	fp, fp
 80094ae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80094b2:	d820      	bhi.n	80094f6 <_printf_float+0x18a>
 80094b4:	3901      	subs	r1, #1
 80094b6:	465a      	mov	r2, fp
 80094b8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80094bc:	9109      	str	r1, [sp, #36]	; 0x24
 80094be:	f7ff ff17 	bl	80092f0 <__exponent>
 80094c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80094c4:	1813      	adds	r3, r2, r0
 80094c6:	2a01      	cmp	r2, #1
 80094c8:	4681      	mov	r9, r0
 80094ca:	6123      	str	r3, [r4, #16]
 80094cc:	dc02      	bgt.n	80094d4 <_printf_float+0x168>
 80094ce:	6822      	ldr	r2, [r4, #0]
 80094d0:	07d2      	lsls	r2, r2, #31
 80094d2:	d501      	bpl.n	80094d8 <_printf_float+0x16c>
 80094d4:	3301      	adds	r3, #1
 80094d6:	6123      	str	r3, [r4, #16]
 80094d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d09c      	beq.n	800941a <_printf_float+0xae>
 80094e0:	232d      	movs	r3, #45	; 0x2d
 80094e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094e6:	e798      	b.n	800941a <_printf_float+0xae>
 80094e8:	9a06      	ldr	r2, [sp, #24]
 80094ea:	2a47      	cmp	r2, #71	; 0x47
 80094ec:	d1be      	bne.n	800946c <_printf_float+0x100>
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d1bc      	bne.n	800946c <_printf_float+0x100>
 80094f2:	2301      	movs	r3, #1
 80094f4:	e7b9      	b.n	800946a <_printf_float+0xfe>
 80094f6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80094fa:	d118      	bne.n	800952e <_printf_float+0x1c2>
 80094fc:	2900      	cmp	r1, #0
 80094fe:	6863      	ldr	r3, [r4, #4]
 8009500:	dd0b      	ble.n	800951a <_printf_float+0x1ae>
 8009502:	6121      	str	r1, [r4, #16]
 8009504:	b913      	cbnz	r3, 800950c <_printf_float+0x1a0>
 8009506:	6822      	ldr	r2, [r4, #0]
 8009508:	07d0      	lsls	r0, r2, #31
 800950a:	d502      	bpl.n	8009512 <_printf_float+0x1a6>
 800950c:	3301      	adds	r3, #1
 800950e:	440b      	add	r3, r1
 8009510:	6123      	str	r3, [r4, #16]
 8009512:	65a1      	str	r1, [r4, #88]	; 0x58
 8009514:	f04f 0900 	mov.w	r9, #0
 8009518:	e7de      	b.n	80094d8 <_printf_float+0x16c>
 800951a:	b913      	cbnz	r3, 8009522 <_printf_float+0x1b6>
 800951c:	6822      	ldr	r2, [r4, #0]
 800951e:	07d2      	lsls	r2, r2, #31
 8009520:	d501      	bpl.n	8009526 <_printf_float+0x1ba>
 8009522:	3302      	adds	r3, #2
 8009524:	e7f4      	b.n	8009510 <_printf_float+0x1a4>
 8009526:	2301      	movs	r3, #1
 8009528:	e7f2      	b.n	8009510 <_printf_float+0x1a4>
 800952a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800952e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009530:	4299      	cmp	r1, r3
 8009532:	db05      	blt.n	8009540 <_printf_float+0x1d4>
 8009534:	6823      	ldr	r3, [r4, #0]
 8009536:	6121      	str	r1, [r4, #16]
 8009538:	07d8      	lsls	r0, r3, #31
 800953a:	d5ea      	bpl.n	8009512 <_printf_float+0x1a6>
 800953c:	1c4b      	adds	r3, r1, #1
 800953e:	e7e7      	b.n	8009510 <_printf_float+0x1a4>
 8009540:	2900      	cmp	r1, #0
 8009542:	bfd4      	ite	le
 8009544:	f1c1 0202 	rsble	r2, r1, #2
 8009548:	2201      	movgt	r2, #1
 800954a:	4413      	add	r3, r2
 800954c:	e7e0      	b.n	8009510 <_printf_float+0x1a4>
 800954e:	6823      	ldr	r3, [r4, #0]
 8009550:	055a      	lsls	r2, r3, #21
 8009552:	d407      	bmi.n	8009564 <_printf_float+0x1f8>
 8009554:	6923      	ldr	r3, [r4, #16]
 8009556:	4642      	mov	r2, r8
 8009558:	4631      	mov	r1, r6
 800955a:	4628      	mov	r0, r5
 800955c:	47b8      	blx	r7
 800955e:	3001      	adds	r0, #1
 8009560:	d12c      	bne.n	80095bc <_printf_float+0x250>
 8009562:	e764      	b.n	800942e <_printf_float+0xc2>
 8009564:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009568:	f240 80e0 	bls.w	800972c <_printf_float+0x3c0>
 800956c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009570:	2200      	movs	r2, #0
 8009572:	2300      	movs	r3, #0
 8009574:	f7f7 fac8 	bl	8000b08 <__aeabi_dcmpeq>
 8009578:	2800      	cmp	r0, #0
 800957a:	d034      	beq.n	80095e6 <_printf_float+0x27a>
 800957c:	4a37      	ldr	r2, [pc, #220]	; (800965c <_printf_float+0x2f0>)
 800957e:	2301      	movs	r3, #1
 8009580:	4631      	mov	r1, r6
 8009582:	4628      	mov	r0, r5
 8009584:	47b8      	blx	r7
 8009586:	3001      	adds	r0, #1
 8009588:	f43f af51 	beq.w	800942e <_printf_float+0xc2>
 800958c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009590:	429a      	cmp	r2, r3
 8009592:	db02      	blt.n	800959a <_printf_float+0x22e>
 8009594:	6823      	ldr	r3, [r4, #0]
 8009596:	07d8      	lsls	r0, r3, #31
 8009598:	d510      	bpl.n	80095bc <_printf_float+0x250>
 800959a:	ee18 3a10 	vmov	r3, s16
 800959e:	4652      	mov	r2, sl
 80095a0:	4631      	mov	r1, r6
 80095a2:	4628      	mov	r0, r5
 80095a4:	47b8      	blx	r7
 80095a6:	3001      	adds	r0, #1
 80095a8:	f43f af41 	beq.w	800942e <_printf_float+0xc2>
 80095ac:	f04f 0800 	mov.w	r8, #0
 80095b0:	f104 091a 	add.w	r9, r4, #26
 80095b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095b6:	3b01      	subs	r3, #1
 80095b8:	4543      	cmp	r3, r8
 80095ba:	dc09      	bgt.n	80095d0 <_printf_float+0x264>
 80095bc:	6823      	ldr	r3, [r4, #0]
 80095be:	079b      	lsls	r3, r3, #30
 80095c0:	f100 8105 	bmi.w	80097ce <_printf_float+0x462>
 80095c4:	68e0      	ldr	r0, [r4, #12]
 80095c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095c8:	4298      	cmp	r0, r3
 80095ca:	bfb8      	it	lt
 80095cc:	4618      	movlt	r0, r3
 80095ce:	e730      	b.n	8009432 <_printf_float+0xc6>
 80095d0:	2301      	movs	r3, #1
 80095d2:	464a      	mov	r2, r9
 80095d4:	4631      	mov	r1, r6
 80095d6:	4628      	mov	r0, r5
 80095d8:	47b8      	blx	r7
 80095da:	3001      	adds	r0, #1
 80095dc:	f43f af27 	beq.w	800942e <_printf_float+0xc2>
 80095e0:	f108 0801 	add.w	r8, r8, #1
 80095e4:	e7e6      	b.n	80095b4 <_printf_float+0x248>
 80095e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	dc39      	bgt.n	8009660 <_printf_float+0x2f4>
 80095ec:	4a1b      	ldr	r2, [pc, #108]	; (800965c <_printf_float+0x2f0>)
 80095ee:	2301      	movs	r3, #1
 80095f0:	4631      	mov	r1, r6
 80095f2:	4628      	mov	r0, r5
 80095f4:	47b8      	blx	r7
 80095f6:	3001      	adds	r0, #1
 80095f8:	f43f af19 	beq.w	800942e <_printf_float+0xc2>
 80095fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009600:	4313      	orrs	r3, r2
 8009602:	d102      	bne.n	800960a <_printf_float+0x29e>
 8009604:	6823      	ldr	r3, [r4, #0]
 8009606:	07d9      	lsls	r1, r3, #31
 8009608:	d5d8      	bpl.n	80095bc <_printf_float+0x250>
 800960a:	ee18 3a10 	vmov	r3, s16
 800960e:	4652      	mov	r2, sl
 8009610:	4631      	mov	r1, r6
 8009612:	4628      	mov	r0, r5
 8009614:	47b8      	blx	r7
 8009616:	3001      	adds	r0, #1
 8009618:	f43f af09 	beq.w	800942e <_printf_float+0xc2>
 800961c:	f04f 0900 	mov.w	r9, #0
 8009620:	f104 0a1a 	add.w	sl, r4, #26
 8009624:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009626:	425b      	negs	r3, r3
 8009628:	454b      	cmp	r3, r9
 800962a:	dc01      	bgt.n	8009630 <_printf_float+0x2c4>
 800962c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800962e:	e792      	b.n	8009556 <_printf_float+0x1ea>
 8009630:	2301      	movs	r3, #1
 8009632:	4652      	mov	r2, sl
 8009634:	4631      	mov	r1, r6
 8009636:	4628      	mov	r0, r5
 8009638:	47b8      	blx	r7
 800963a:	3001      	adds	r0, #1
 800963c:	f43f aef7 	beq.w	800942e <_printf_float+0xc2>
 8009640:	f109 0901 	add.w	r9, r9, #1
 8009644:	e7ee      	b.n	8009624 <_printf_float+0x2b8>
 8009646:	bf00      	nop
 8009648:	7fefffff 	.word	0x7fefffff
 800964c:	0800ce38 	.word	0x0800ce38
 8009650:	0800ce3c 	.word	0x0800ce3c
 8009654:	0800ce44 	.word	0x0800ce44
 8009658:	0800ce40 	.word	0x0800ce40
 800965c:	0800ce48 	.word	0x0800ce48
 8009660:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009662:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009664:	429a      	cmp	r2, r3
 8009666:	bfa8      	it	ge
 8009668:	461a      	movge	r2, r3
 800966a:	2a00      	cmp	r2, #0
 800966c:	4691      	mov	r9, r2
 800966e:	dc37      	bgt.n	80096e0 <_printf_float+0x374>
 8009670:	f04f 0b00 	mov.w	fp, #0
 8009674:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009678:	f104 021a 	add.w	r2, r4, #26
 800967c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800967e:	9305      	str	r3, [sp, #20]
 8009680:	eba3 0309 	sub.w	r3, r3, r9
 8009684:	455b      	cmp	r3, fp
 8009686:	dc33      	bgt.n	80096f0 <_printf_float+0x384>
 8009688:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800968c:	429a      	cmp	r2, r3
 800968e:	db3b      	blt.n	8009708 <_printf_float+0x39c>
 8009690:	6823      	ldr	r3, [r4, #0]
 8009692:	07da      	lsls	r2, r3, #31
 8009694:	d438      	bmi.n	8009708 <_printf_float+0x39c>
 8009696:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009698:	9b05      	ldr	r3, [sp, #20]
 800969a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800969c:	1ad3      	subs	r3, r2, r3
 800969e:	eba2 0901 	sub.w	r9, r2, r1
 80096a2:	4599      	cmp	r9, r3
 80096a4:	bfa8      	it	ge
 80096a6:	4699      	movge	r9, r3
 80096a8:	f1b9 0f00 	cmp.w	r9, #0
 80096ac:	dc35      	bgt.n	800971a <_printf_float+0x3ae>
 80096ae:	f04f 0800 	mov.w	r8, #0
 80096b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80096b6:	f104 0a1a 	add.w	sl, r4, #26
 80096ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80096be:	1a9b      	subs	r3, r3, r2
 80096c0:	eba3 0309 	sub.w	r3, r3, r9
 80096c4:	4543      	cmp	r3, r8
 80096c6:	f77f af79 	ble.w	80095bc <_printf_float+0x250>
 80096ca:	2301      	movs	r3, #1
 80096cc:	4652      	mov	r2, sl
 80096ce:	4631      	mov	r1, r6
 80096d0:	4628      	mov	r0, r5
 80096d2:	47b8      	blx	r7
 80096d4:	3001      	adds	r0, #1
 80096d6:	f43f aeaa 	beq.w	800942e <_printf_float+0xc2>
 80096da:	f108 0801 	add.w	r8, r8, #1
 80096de:	e7ec      	b.n	80096ba <_printf_float+0x34e>
 80096e0:	4613      	mov	r3, r2
 80096e2:	4631      	mov	r1, r6
 80096e4:	4642      	mov	r2, r8
 80096e6:	4628      	mov	r0, r5
 80096e8:	47b8      	blx	r7
 80096ea:	3001      	adds	r0, #1
 80096ec:	d1c0      	bne.n	8009670 <_printf_float+0x304>
 80096ee:	e69e      	b.n	800942e <_printf_float+0xc2>
 80096f0:	2301      	movs	r3, #1
 80096f2:	4631      	mov	r1, r6
 80096f4:	4628      	mov	r0, r5
 80096f6:	9205      	str	r2, [sp, #20]
 80096f8:	47b8      	blx	r7
 80096fa:	3001      	adds	r0, #1
 80096fc:	f43f ae97 	beq.w	800942e <_printf_float+0xc2>
 8009700:	9a05      	ldr	r2, [sp, #20]
 8009702:	f10b 0b01 	add.w	fp, fp, #1
 8009706:	e7b9      	b.n	800967c <_printf_float+0x310>
 8009708:	ee18 3a10 	vmov	r3, s16
 800970c:	4652      	mov	r2, sl
 800970e:	4631      	mov	r1, r6
 8009710:	4628      	mov	r0, r5
 8009712:	47b8      	blx	r7
 8009714:	3001      	adds	r0, #1
 8009716:	d1be      	bne.n	8009696 <_printf_float+0x32a>
 8009718:	e689      	b.n	800942e <_printf_float+0xc2>
 800971a:	9a05      	ldr	r2, [sp, #20]
 800971c:	464b      	mov	r3, r9
 800971e:	4442      	add	r2, r8
 8009720:	4631      	mov	r1, r6
 8009722:	4628      	mov	r0, r5
 8009724:	47b8      	blx	r7
 8009726:	3001      	adds	r0, #1
 8009728:	d1c1      	bne.n	80096ae <_printf_float+0x342>
 800972a:	e680      	b.n	800942e <_printf_float+0xc2>
 800972c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800972e:	2a01      	cmp	r2, #1
 8009730:	dc01      	bgt.n	8009736 <_printf_float+0x3ca>
 8009732:	07db      	lsls	r3, r3, #31
 8009734:	d538      	bpl.n	80097a8 <_printf_float+0x43c>
 8009736:	2301      	movs	r3, #1
 8009738:	4642      	mov	r2, r8
 800973a:	4631      	mov	r1, r6
 800973c:	4628      	mov	r0, r5
 800973e:	47b8      	blx	r7
 8009740:	3001      	adds	r0, #1
 8009742:	f43f ae74 	beq.w	800942e <_printf_float+0xc2>
 8009746:	ee18 3a10 	vmov	r3, s16
 800974a:	4652      	mov	r2, sl
 800974c:	4631      	mov	r1, r6
 800974e:	4628      	mov	r0, r5
 8009750:	47b8      	blx	r7
 8009752:	3001      	adds	r0, #1
 8009754:	f43f ae6b 	beq.w	800942e <_printf_float+0xc2>
 8009758:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800975c:	2200      	movs	r2, #0
 800975e:	2300      	movs	r3, #0
 8009760:	f7f7 f9d2 	bl	8000b08 <__aeabi_dcmpeq>
 8009764:	b9d8      	cbnz	r0, 800979e <_printf_float+0x432>
 8009766:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009768:	f108 0201 	add.w	r2, r8, #1
 800976c:	3b01      	subs	r3, #1
 800976e:	4631      	mov	r1, r6
 8009770:	4628      	mov	r0, r5
 8009772:	47b8      	blx	r7
 8009774:	3001      	adds	r0, #1
 8009776:	d10e      	bne.n	8009796 <_printf_float+0x42a>
 8009778:	e659      	b.n	800942e <_printf_float+0xc2>
 800977a:	2301      	movs	r3, #1
 800977c:	4652      	mov	r2, sl
 800977e:	4631      	mov	r1, r6
 8009780:	4628      	mov	r0, r5
 8009782:	47b8      	blx	r7
 8009784:	3001      	adds	r0, #1
 8009786:	f43f ae52 	beq.w	800942e <_printf_float+0xc2>
 800978a:	f108 0801 	add.w	r8, r8, #1
 800978e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009790:	3b01      	subs	r3, #1
 8009792:	4543      	cmp	r3, r8
 8009794:	dcf1      	bgt.n	800977a <_printf_float+0x40e>
 8009796:	464b      	mov	r3, r9
 8009798:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800979c:	e6dc      	b.n	8009558 <_printf_float+0x1ec>
 800979e:	f04f 0800 	mov.w	r8, #0
 80097a2:	f104 0a1a 	add.w	sl, r4, #26
 80097a6:	e7f2      	b.n	800978e <_printf_float+0x422>
 80097a8:	2301      	movs	r3, #1
 80097aa:	4642      	mov	r2, r8
 80097ac:	e7df      	b.n	800976e <_printf_float+0x402>
 80097ae:	2301      	movs	r3, #1
 80097b0:	464a      	mov	r2, r9
 80097b2:	4631      	mov	r1, r6
 80097b4:	4628      	mov	r0, r5
 80097b6:	47b8      	blx	r7
 80097b8:	3001      	adds	r0, #1
 80097ba:	f43f ae38 	beq.w	800942e <_printf_float+0xc2>
 80097be:	f108 0801 	add.w	r8, r8, #1
 80097c2:	68e3      	ldr	r3, [r4, #12]
 80097c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80097c6:	1a5b      	subs	r3, r3, r1
 80097c8:	4543      	cmp	r3, r8
 80097ca:	dcf0      	bgt.n	80097ae <_printf_float+0x442>
 80097cc:	e6fa      	b.n	80095c4 <_printf_float+0x258>
 80097ce:	f04f 0800 	mov.w	r8, #0
 80097d2:	f104 0919 	add.w	r9, r4, #25
 80097d6:	e7f4      	b.n	80097c2 <_printf_float+0x456>

080097d8 <_printf_common>:
 80097d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097dc:	4616      	mov	r6, r2
 80097de:	4699      	mov	r9, r3
 80097e0:	688a      	ldr	r2, [r1, #8]
 80097e2:	690b      	ldr	r3, [r1, #16]
 80097e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80097e8:	4293      	cmp	r3, r2
 80097ea:	bfb8      	it	lt
 80097ec:	4613      	movlt	r3, r2
 80097ee:	6033      	str	r3, [r6, #0]
 80097f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80097f4:	4607      	mov	r7, r0
 80097f6:	460c      	mov	r4, r1
 80097f8:	b10a      	cbz	r2, 80097fe <_printf_common+0x26>
 80097fa:	3301      	adds	r3, #1
 80097fc:	6033      	str	r3, [r6, #0]
 80097fe:	6823      	ldr	r3, [r4, #0]
 8009800:	0699      	lsls	r1, r3, #26
 8009802:	bf42      	ittt	mi
 8009804:	6833      	ldrmi	r3, [r6, #0]
 8009806:	3302      	addmi	r3, #2
 8009808:	6033      	strmi	r3, [r6, #0]
 800980a:	6825      	ldr	r5, [r4, #0]
 800980c:	f015 0506 	ands.w	r5, r5, #6
 8009810:	d106      	bne.n	8009820 <_printf_common+0x48>
 8009812:	f104 0a19 	add.w	sl, r4, #25
 8009816:	68e3      	ldr	r3, [r4, #12]
 8009818:	6832      	ldr	r2, [r6, #0]
 800981a:	1a9b      	subs	r3, r3, r2
 800981c:	42ab      	cmp	r3, r5
 800981e:	dc26      	bgt.n	800986e <_printf_common+0x96>
 8009820:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009824:	1e13      	subs	r3, r2, #0
 8009826:	6822      	ldr	r2, [r4, #0]
 8009828:	bf18      	it	ne
 800982a:	2301      	movne	r3, #1
 800982c:	0692      	lsls	r2, r2, #26
 800982e:	d42b      	bmi.n	8009888 <_printf_common+0xb0>
 8009830:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009834:	4649      	mov	r1, r9
 8009836:	4638      	mov	r0, r7
 8009838:	47c0      	blx	r8
 800983a:	3001      	adds	r0, #1
 800983c:	d01e      	beq.n	800987c <_printf_common+0xa4>
 800983e:	6823      	ldr	r3, [r4, #0]
 8009840:	68e5      	ldr	r5, [r4, #12]
 8009842:	6832      	ldr	r2, [r6, #0]
 8009844:	f003 0306 	and.w	r3, r3, #6
 8009848:	2b04      	cmp	r3, #4
 800984a:	bf08      	it	eq
 800984c:	1aad      	subeq	r5, r5, r2
 800984e:	68a3      	ldr	r3, [r4, #8]
 8009850:	6922      	ldr	r2, [r4, #16]
 8009852:	bf0c      	ite	eq
 8009854:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009858:	2500      	movne	r5, #0
 800985a:	4293      	cmp	r3, r2
 800985c:	bfc4      	itt	gt
 800985e:	1a9b      	subgt	r3, r3, r2
 8009860:	18ed      	addgt	r5, r5, r3
 8009862:	2600      	movs	r6, #0
 8009864:	341a      	adds	r4, #26
 8009866:	42b5      	cmp	r5, r6
 8009868:	d11a      	bne.n	80098a0 <_printf_common+0xc8>
 800986a:	2000      	movs	r0, #0
 800986c:	e008      	b.n	8009880 <_printf_common+0xa8>
 800986e:	2301      	movs	r3, #1
 8009870:	4652      	mov	r2, sl
 8009872:	4649      	mov	r1, r9
 8009874:	4638      	mov	r0, r7
 8009876:	47c0      	blx	r8
 8009878:	3001      	adds	r0, #1
 800987a:	d103      	bne.n	8009884 <_printf_common+0xac>
 800987c:	f04f 30ff 	mov.w	r0, #4294967295
 8009880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009884:	3501      	adds	r5, #1
 8009886:	e7c6      	b.n	8009816 <_printf_common+0x3e>
 8009888:	18e1      	adds	r1, r4, r3
 800988a:	1c5a      	adds	r2, r3, #1
 800988c:	2030      	movs	r0, #48	; 0x30
 800988e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009892:	4422      	add	r2, r4
 8009894:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009898:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800989c:	3302      	adds	r3, #2
 800989e:	e7c7      	b.n	8009830 <_printf_common+0x58>
 80098a0:	2301      	movs	r3, #1
 80098a2:	4622      	mov	r2, r4
 80098a4:	4649      	mov	r1, r9
 80098a6:	4638      	mov	r0, r7
 80098a8:	47c0      	blx	r8
 80098aa:	3001      	adds	r0, #1
 80098ac:	d0e6      	beq.n	800987c <_printf_common+0xa4>
 80098ae:	3601      	adds	r6, #1
 80098b0:	e7d9      	b.n	8009866 <_printf_common+0x8e>
	...

080098b4 <_printf_i>:
 80098b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80098b8:	460c      	mov	r4, r1
 80098ba:	4691      	mov	r9, r2
 80098bc:	7e27      	ldrb	r7, [r4, #24]
 80098be:	990c      	ldr	r1, [sp, #48]	; 0x30
 80098c0:	2f78      	cmp	r7, #120	; 0x78
 80098c2:	4680      	mov	r8, r0
 80098c4:	469a      	mov	sl, r3
 80098c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80098ca:	d807      	bhi.n	80098dc <_printf_i+0x28>
 80098cc:	2f62      	cmp	r7, #98	; 0x62
 80098ce:	d80a      	bhi.n	80098e6 <_printf_i+0x32>
 80098d0:	2f00      	cmp	r7, #0
 80098d2:	f000 80d8 	beq.w	8009a86 <_printf_i+0x1d2>
 80098d6:	2f58      	cmp	r7, #88	; 0x58
 80098d8:	f000 80a3 	beq.w	8009a22 <_printf_i+0x16e>
 80098dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80098e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80098e4:	e03a      	b.n	800995c <_printf_i+0xa8>
 80098e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80098ea:	2b15      	cmp	r3, #21
 80098ec:	d8f6      	bhi.n	80098dc <_printf_i+0x28>
 80098ee:	a001      	add	r0, pc, #4	; (adr r0, 80098f4 <_printf_i+0x40>)
 80098f0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80098f4:	0800994d 	.word	0x0800994d
 80098f8:	08009961 	.word	0x08009961
 80098fc:	080098dd 	.word	0x080098dd
 8009900:	080098dd 	.word	0x080098dd
 8009904:	080098dd 	.word	0x080098dd
 8009908:	080098dd 	.word	0x080098dd
 800990c:	08009961 	.word	0x08009961
 8009910:	080098dd 	.word	0x080098dd
 8009914:	080098dd 	.word	0x080098dd
 8009918:	080098dd 	.word	0x080098dd
 800991c:	080098dd 	.word	0x080098dd
 8009920:	08009a6d 	.word	0x08009a6d
 8009924:	08009991 	.word	0x08009991
 8009928:	08009a4f 	.word	0x08009a4f
 800992c:	080098dd 	.word	0x080098dd
 8009930:	080098dd 	.word	0x080098dd
 8009934:	08009a8f 	.word	0x08009a8f
 8009938:	080098dd 	.word	0x080098dd
 800993c:	08009991 	.word	0x08009991
 8009940:	080098dd 	.word	0x080098dd
 8009944:	080098dd 	.word	0x080098dd
 8009948:	08009a57 	.word	0x08009a57
 800994c:	680b      	ldr	r3, [r1, #0]
 800994e:	1d1a      	adds	r2, r3, #4
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	600a      	str	r2, [r1, #0]
 8009954:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009958:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800995c:	2301      	movs	r3, #1
 800995e:	e0a3      	b.n	8009aa8 <_printf_i+0x1f4>
 8009960:	6825      	ldr	r5, [r4, #0]
 8009962:	6808      	ldr	r0, [r1, #0]
 8009964:	062e      	lsls	r6, r5, #24
 8009966:	f100 0304 	add.w	r3, r0, #4
 800996a:	d50a      	bpl.n	8009982 <_printf_i+0xce>
 800996c:	6805      	ldr	r5, [r0, #0]
 800996e:	600b      	str	r3, [r1, #0]
 8009970:	2d00      	cmp	r5, #0
 8009972:	da03      	bge.n	800997c <_printf_i+0xc8>
 8009974:	232d      	movs	r3, #45	; 0x2d
 8009976:	426d      	negs	r5, r5
 8009978:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800997c:	485e      	ldr	r0, [pc, #376]	; (8009af8 <_printf_i+0x244>)
 800997e:	230a      	movs	r3, #10
 8009980:	e019      	b.n	80099b6 <_printf_i+0x102>
 8009982:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009986:	6805      	ldr	r5, [r0, #0]
 8009988:	600b      	str	r3, [r1, #0]
 800998a:	bf18      	it	ne
 800998c:	b22d      	sxthne	r5, r5
 800998e:	e7ef      	b.n	8009970 <_printf_i+0xbc>
 8009990:	680b      	ldr	r3, [r1, #0]
 8009992:	6825      	ldr	r5, [r4, #0]
 8009994:	1d18      	adds	r0, r3, #4
 8009996:	6008      	str	r0, [r1, #0]
 8009998:	0628      	lsls	r0, r5, #24
 800999a:	d501      	bpl.n	80099a0 <_printf_i+0xec>
 800999c:	681d      	ldr	r5, [r3, #0]
 800999e:	e002      	b.n	80099a6 <_printf_i+0xf2>
 80099a0:	0669      	lsls	r1, r5, #25
 80099a2:	d5fb      	bpl.n	800999c <_printf_i+0xe8>
 80099a4:	881d      	ldrh	r5, [r3, #0]
 80099a6:	4854      	ldr	r0, [pc, #336]	; (8009af8 <_printf_i+0x244>)
 80099a8:	2f6f      	cmp	r7, #111	; 0x6f
 80099aa:	bf0c      	ite	eq
 80099ac:	2308      	moveq	r3, #8
 80099ae:	230a      	movne	r3, #10
 80099b0:	2100      	movs	r1, #0
 80099b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80099b6:	6866      	ldr	r6, [r4, #4]
 80099b8:	60a6      	str	r6, [r4, #8]
 80099ba:	2e00      	cmp	r6, #0
 80099bc:	bfa2      	ittt	ge
 80099be:	6821      	ldrge	r1, [r4, #0]
 80099c0:	f021 0104 	bicge.w	r1, r1, #4
 80099c4:	6021      	strge	r1, [r4, #0]
 80099c6:	b90d      	cbnz	r5, 80099cc <_printf_i+0x118>
 80099c8:	2e00      	cmp	r6, #0
 80099ca:	d04d      	beq.n	8009a68 <_printf_i+0x1b4>
 80099cc:	4616      	mov	r6, r2
 80099ce:	fbb5 f1f3 	udiv	r1, r5, r3
 80099d2:	fb03 5711 	mls	r7, r3, r1, r5
 80099d6:	5dc7      	ldrb	r7, [r0, r7]
 80099d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80099dc:	462f      	mov	r7, r5
 80099de:	42bb      	cmp	r3, r7
 80099e0:	460d      	mov	r5, r1
 80099e2:	d9f4      	bls.n	80099ce <_printf_i+0x11a>
 80099e4:	2b08      	cmp	r3, #8
 80099e6:	d10b      	bne.n	8009a00 <_printf_i+0x14c>
 80099e8:	6823      	ldr	r3, [r4, #0]
 80099ea:	07df      	lsls	r7, r3, #31
 80099ec:	d508      	bpl.n	8009a00 <_printf_i+0x14c>
 80099ee:	6923      	ldr	r3, [r4, #16]
 80099f0:	6861      	ldr	r1, [r4, #4]
 80099f2:	4299      	cmp	r1, r3
 80099f4:	bfde      	ittt	le
 80099f6:	2330      	movle	r3, #48	; 0x30
 80099f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80099fc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009a00:	1b92      	subs	r2, r2, r6
 8009a02:	6122      	str	r2, [r4, #16]
 8009a04:	f8cd a000 	str.w	sl, [sp]
 8009a08:	464b      	mov	r3, r9
 8009a0a:	aa03      	add	r2, sp, #12
 8009a0c:	4621      	mov	r1, r4
 8009a0e:	4640      	mov	r0, r8
 8009a10:	f7ff fee2 	bl	80097d8 <_printf_common>
 8009a14:	3001      	adds	r0, #1
 8009a16:	d14c      	bne.n	8009ab2 <_printf_i+0x1fe>
 8009a18:	f04f 30ff 	mov.w	r0, #4294967295
 8009a1c:	b004      	add	sp, #16
 8009a1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a22:	4835      	ldr	r0, [pc, #212]	; (8009af8 <_printf_i+0x244>)
 8009a24:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009a28:	6823      	ldr	r3, [r4, #0]
 8009a2a:	680e      	ldr	r6, [r1, #0]
 8009a2c:	061f      	lsls	r7, r3, #24
 8009a2e:	f856 5b04 	ldr.w	r5, [r6], #4
 8009a32:	600e      	str	r6, [r1, #0]
 8009a34:	d514      	bpl.n	8009a60 <_printf_i+0x1ac>
 8009a36:	07d9      	lsls	r1, r3, #31
 8009a38:	bf44      	itt	mi
 8009a3a:	f043 0320 	orrmi.w	r3, r3, #32
 8009a3e:	6023      	strmi	r3, [r4, #0]
 8009a40:	b91d      	cbnz	r5, 8009a4a <_printf_i+0x196>
 8009a42:	6823      	ldr	r3, [r4, #0]
 8009a44:	f023 0320 	bic.w	r3, r3, #32
 8009a48:	6023      	str	r3, [r4, #0]
 8009a4a:	2310      	movs	r3, #16
 8009a4c:	e7b0      	b.n	80099b0 <_printf_i+0xfc>
 8009a4e:	6823      	ldr	r3, [r4, #0]
 8009a50:	f043 0320 	orr.w	r3, r3, #32
 8009a54:	6023      	str	r3, [r4, #0]
 8009a56:	2378      	movs	r3, #120	; 0x78
 8009a58:	4828      	ldr	r0, [pc, #160]	; (8009afc <_printf_i+0x248>)
 8009a5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009a5e:	e7e3      	b.n	8009a28 <_printf_i+0x174>
 8009a60:	065e      	lsls	r6, r3, #25
 8009a62:	bf48      	it	mi
 8009a64:	b2ad      	uxthmi	r5, r5
 8009a66:	e7e6      	b.n	8009a36 <_printf_i+0x182>
 8009a68:	4616      	mov	r6, r2
 8009a6a:	e7bb      	b.n	80099e4 <_printf_i+0x130>
 8009a6c:	680b      	ldr	r3, [r1, #0]
 8009a6e:	6826      	ldr	r6, [r4, #0]
 8009a70:	6960      	ldr	r0, [r4, #20]
 8009a72:	1d1d      	adds	r5, r3, #4
 8009a74:	600d      	str	r5, [r1, #0]
 8009a76:	0635      	lsls	r5, r6, #24
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	d501      	bpl.n	8009a80 <_printf_i+0x1cc>
 8009a7c:	6018      	str	r0, [r3, #0]
 8009a7e:	e002      	b.n	8009a86 <_printf_i+0x1d2>
 8009a80:	0671      	lsls	r1, r6, #25
 8009a82:	d5fb      	bpl.n	8009a7c <_printf_i+0x1c8>
 8009a84:	8018      	strh	r0, [r3, #0]
 8009a86:	2300      	movs	r3, #0
 8009a88:	6123      	str	r3, [r4, #16]
 8009a8a:	4616      	mov	r6, r2
 8009a8c:	e7ba      	b.n	8009a04 <_printf_i+0x150>
 8009a8e:	680b      	ldr	r3, [r1, #0]
 8009a90:	1d1a      	adds	r2, r3, #4
 8009a92:	600a      	str	r2, [r1, #0]
 8009a94:	681e      	ldr	r6, [r3, #0]
 8009a96:	6862      	ldr	r2, [r4, #4]
 8009a98:	2100      	movs	r1, #0
 8009a9a:	4630      	mov	r0, r6
 8009a9c:	f7f6 fbc0 	bl	8000220 <memchr>
 8009aa0:	b108      	cbz	r0, 8009aa6 <_printf_i+0x1f2>
 8009aa2:	1b80      	subs	r0, r0, r6
 8009aa4:	6060      	str	r0, [r4, #4]
 8009aa6:	6863      	ldr	r3, [r4, #4]
 8009aa8:	6123      	str	r3, [r4, #16]
 8009aaa:	2300      	movs	r3, #0
 8009aac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ab0:	e7a8      	b.n	8009a04 <_printf_i+0x150>
 8009ab2:	6923      	ldr	r3, [r4, #16]
 8009ab4:	4632      	mov	r2, r6
 8009ab6:	4649      	mov	r1, r9
 8009ab8:	4640      	mov	r0, r8
 8009aba:	47d0      	blx	sl
 8009abc:	3001      	adds	r0, #1
 8009abe:	d0ab      	beq.n	8009a18 <_printf_i+0x164>
 8009ac0:	6823      	ldr	r3, [r4, #0]
 8009ac2:	079b      	lsls	r3, r3, #30
 8009ac4:	d413      	bmi.n	8009aee <_printf_i+0x23a>
 8009ac6:	68e0      	ldr	r0, [r4, #12]
 8009ac8:	9b03      	ldr	r3, [sp, #12]
 8009aca:	4298      	cmp	r0, r3
 8009acc:	bfb8      	it	lt
 8009ace:	4618      	movlt	r0, r3
 8009ad0:	e7a4      	b.n	8009a1c <_printf_i+0x168>
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	4632      	mov	r2, r6
 8009ad6:	4649      	mov	r1, r9
 8009ad8:	4640      	mov	r0, r8
 8009ada:	47d0      	blx	sl
 8009adc:	3001      	adds	r0, #1
 8009ade:	d09b      	beq.n	8009a18 <_printf_i+0x164>
 8009ae0:	3501      	adds	r5, #1
 8009ae2:	68e3      	ldr	r3, [r4, #12]
 8009ae4:	9903      	ldr	r1, [sp, #12]
 8009ae6:	1a5b      	subs	r3, r3, r1
 8009ae8:	42ab      	cmp	r3, r5
 8009aea:	dcf2      	bgt.n	8009ad2 <_printf_i+0x21e>
 8009aec:	e7eb      	b.n	8009ac6 <_printf_i+0x212>
 8009aee:	2500      	movs	r5, #0
 8009af0:	f104 0619 	add.w	r6, r4, #25
 8009af4:	e7f5      	b.n	8009ae2 <_printf_i+0x22e>
 8009af6:	bf00      	nop
 8009af8:	0800ce4a 	.word	0x0800ce4a
 8009afc:	0800ce5b 	.word	0x0800ce5b

08009b00 <quorem>:
 8009b00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b04:	6903      	ldr	r3, [r0, #16]
 8009b06:	690c      	ldr	r4, [r1, #16]
 8009b08:	42a3      	cmp	r3, r4
 8009b0a:	4607      	mov	r7, r0
 8009b0c:	f2c0 8081 	blt.w	8009c12 <quorem+0x112>
 8009b10:	3c01      	subs	r4, #1
 8009b12:	f101 0814 	add.w	r8, r1, #20
 8009b16:	f100 0514 	add.w	r5, r0, #20
 8009b1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009b1e:	9301      	str	r3, [sp, #4]
 8009b20:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009b24:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009b28:	3301      	adds	r3, #1
 8009b2a:	429a      	cmp	r2, r3
 8009b2c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009b30:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009b34:	fbb2 f6f3 	udiv	r6, r2, r3
 8009b38:	d331      	bcc.n	8009b9e <quorem+0x9e>
 8009b3a:	f04f 0e00 	mov.w	lr, #0
 8009b3e:	4640      	mov	r0, r8
 8009b40:	46ac      	mov	ip, r5
 8009b42:	46f2      	mov	sl, lr
 8009b44:	f850 2b04 	ldr.w	r2, [r0], #4
 8009b48:	b293      	uxth	r3, r2
 8009b4a:	fb06 e303 	mla	r3, r6, r3, lr
 8009b4e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009b52:	b29b      	uxth	r3, r3
 8009b54:	ebaa 0303 	sub.w	r3, sl, r3
 8009b58:	0c12      	lsrs	r2, r2, #16
 8009b5a:	f8dc a000 	ldr.w	sl, [ip]
 8009b5e:	fb06 e202 	mla	r2, r6, r2, lr
 8009b62:	fa13 f38a 	uxtah	r3, r3, sl
 8009b66:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009b6a:	fa1f fa82 	uxth.w	sl, r2
 8009b6e:	f8dc 2000 	ldr.w	r2, [ip]
 8009b72:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8009b76:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009b7a:	b29b      	uxth	r3, r3
 8009b7c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009b80:	4581      	cmp	r9, r0
 8009b82:	f84c 3b04 	str.w	r3, [ip], #4
 8009b86:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009b8a:	d2db      	bcs.n	8009b44 <quorem+0x44>
 8009b8c:	f855 300b 	ldr.w	r3, [r5, fp]
 8009b90:	b92b      	cbnz	r3, 8009b9e <quorem+0x9e>
 8009b92:	9b01      	ldr	r3, [sp, #4]
 8009b94:	3b04      	subs	r3, #4
 8009b96:	429d      	cmp	r5, r3
 8009b98:	461a      	mov	r2, r3
 8009b9a:	d32e      	bcc.n	8009bfa <quorem+0xfa>
 8009b9c:	613c      	str	r4, [r7, #16]
 8009b9e:	4638      	mov	r0, r7
 8009ba0:	f001 f8be 	bl	800ad20 <__mcmp>
 8009ba4:	2800      	cmp	r0, #0
 8009ba6:	db24      	blt.n	8009bf2 <quorem+0xf2>
 8009ba8:	3601      	adds	r6, #1
 8009baa:	4628      	mov	r0, r5
 8009bac:	f04f 0c00 	mov.w	ip, #0
 8009bb0:	f858 2b04 	ldr.w	r2, [r8], #4
 8009bb4:	f8d0 e000 	ldr.w	lr, [r0]
 8009bb8:	b293      	uxth	r3, r2
 8009bba:	ebac 0303 	sub.w	r3, ip, r3
 8009bbe:	0c12      	lsrs	r2, r2, #16
 8009bc0:	fa13 f38e 	uxtah	r3, r3, lr
 8009bc4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009bc8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009bcc:	b29b      	uxth	r3, r3
 8009bce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009bd2:	45c1      	cmp	r9, r8
 8009bd4:	f840 3b04 	str.w	r3, [r0], #4
 8009bd8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009bdc:	d2e8      	bcs.n	8009bb0 <quorem+0xb0>
 8009bde:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009be2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009be6:	b922      	cbnz	r2, 8009bf2 <quorem+0xf2>
 8009be8:	3b04      	subs	r3, #4
 8009bea:	429d      	cmp	r5, r3
 8009bec:	461a      	mov	r2, r3
 8009bee:	d30a      	bcc.n	8009c06 <quorem+0x106>
 8009bf0:	613c      	str	r4, [r7, #16]
 8009bf2:	4630      	mov	r0, r6
 8009bf4:	b003      	add	sp, #12
 8009bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bfa:	6812      	ldr	r2, [r2, #0]
 8009bfc:	3b04      	subs	r3, #4
 8009bfe:	2a00      	cmp	r2, #0
 8009c00:	d1cc      	bne.n	8009b9c <quorem+0x9c>
 8009c02:	3c01      	subs	r4, #1
 8009c04:	e7c7      	b.n	8009b96 <quorem+0x96>
 8009c06:	6812      	ldr	r2, [r2, #0]
 8009c08:	3b04      	subs	r3, #4
 8009c0a:	2a00      	cmp	r2, #0
 8009c0c:	d1f0      	bne.n	8009bf0 <quorem+0xf0>
 8009c0e:	3c01      	subs	r4, #1
 8009c10:	e7eb      	b.n	8009bea <quorem+0xea>
 8009c12:	2000      	movs	r0, #0
 8009c14:	e7ee      	b.n	8009bf4 <quorem+0xf4>
	...

08009c18 <_dtoa_r>:
 8009c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c1c:	ed2d 8b02 	vpush	{d8}
 8009c20:	ec57 6b10 	vmov	r6, r7, d0
 8009c24:	b095      	sub	sp, #84	; 0x54
 8009c26:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009c28:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009c2c:	9105      	str	r1, [sp, #20]
 8009c2e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8009c32:	4604      	mov	r4, r0
 8009c34:	9209      	str	r2, [sp, #36]	; 0x24
 8009c36:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c38:	b975      	cbnz	r5, 8009c58 <_dtoa_r+0x40>
 8009c3a:	2010      	movs	r0, #16
 8009c3c:	f000 fddc 	bl	800a7f8 <malloc>
 8009c40:	4602      	mov	r2, r0
 8009c42:	6260      	str	r0, [r4, #36]	; 0x24
 8009c44:	b920      	cbnz	r0, 8009c50 <_dtoa_r+0x38>
 8009c46:	4bb2      	ldr	r3, [pc, #712]	; (8009f10 <_dtoa_r+0x2f8>)
 8009c48:	21ea      	movs	r1, #234	; 0xea
 8009c4a:	48b2      	ldr	r0, [pc, #712]	; (8009f14 <_dtoa_r+0x2fc>)
 8009c4c:	f001 fa32 	bl	800b0b4 <__assert_func>
 8009c50:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009c54:	6005      	str	r5, [r0, #0]
 8009c56:	60c5      	str	r5, [r0, #12]
 8009c58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c5a:	6819      	ldr	r1, [r3, #0]
 8009c5c:	b151      	cbz	r1, 8009c74 <_dtoa_r+0x5c>
 8009c5e:	685a      	ldr	r2, [r3, #4]
 8009c60:	604a      	str	r2, [r1, #4]
 8009c62:	2301      	movs	r3, #1
 8009c64:	4093      	lsls	r3, r2
 8009c66:	608b      	str	r3, [r1, #8]
 8009c68:	4620      	mov	r0, r4
 8009c6a:	f000 fe1b 	bl	800a8a4 <_Bfree>
 8009c6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c70:	2200      	movs	r2, #0
 8009c72:	601a      	str	r2, [r3, #0]
 8009c74:	1e3b      	subs	r3, r7, #0
 8009c76:	bfb9      	ittee	lt
 8009c78:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009c7c:	9303      	strlt	r3, [sp, #12]
 8009c7e:	2300      	movge	r3, #0
 8009c80:	f8c8 3000 	strge.w	r3, [r8]
 8009c84:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009c88:	4ba3      	ldr	r3, [pc, #652]	; (8009f18 <_dtoa_r+0x300>)
 8009c8a:	bfbc      	itt	lt
 8009c8c:	2201      	movlt	r2, #1
 8009c8e:	f8c8 2000 	strlt.w	r2, [r8]
 8009c92:	ea33 0309 	bics.w	r3, r3, r9
 8009c96:	d11b      	bne.n	8009cd0 <_dtoa_r+0xb8>
 8009c98:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009c9a:	f242 730f 	movw	r3, #9999	; 0x270f
 8009c9e:	6013      	str	r3, [r2, #0]
 8009ca0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009ca4:	4333      	orrs	r3, r6
 8009ca6:	f000 857a 	beq.w	800a79e <_dtoa_r+0xb86>
 8009caa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009cac:	b963      	cbnz	r3, 8009cc8 <_dtoa_r+0xb0>
 8009cae:	4b9b      	ldr	r3, [pc, #620]	; (8009f1c <_dtoa_r+0x304>)
 8009cb0:	e024      	b.n	8009cfc <_dtoa_r+0xe4>
 8009cb2:	4b9b      	ldr	r3, [pc, #620]	; (8009f20 <_dtoa_r+0x308>)
 8009cb4:	9300      	str	r3, [sp, #0]
 8009cb6:	3308      	adds	r3, #8
 8009cb8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009cba:	6013      	str	r3, [r2, #0]
 8009cbc:	9800      	ldr	r0, [sp, #0]
 8009cbe:	b015      	add	sp, #84	; 0x54
 8009cc0:	ecbd 8b02 	vpop	{d8}
 8009cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cc8:	4b94      	ldr	r3, [pc, #592]	; (8009f1c <_dtoa_r+0x304>)
 8009cca:	9300      	str	r3, [sp, #0]
 8009ccc:	3303      	adds	r3, #3
 8009cce:	e7f3      	b.n	8009cb8 <_dtoa_r+0xa0>
 8009cd0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	ec51 0b17 	vmov	r0, r1, d7
 8009cda:	2300      	movs	r3, #0
 8009cdc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009ce0:	f7f6 ff12 	bl	8000b08 <__aeabi_dcmpeq>
 8009ce4:	4680      	mov	r8, r0
 8009ce6:	b158      	cbz	r0, 8009d00 <_dtoa_r+0xe8>
 8009ce8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009cea:	2301      	movs	r3, #1
 8009cec:	6013      	str	r3, [r2, #0]
 8009cee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	f000 8551 	beq.w	800a798 <_dtoa_r+0xb80>
 8009cf6:	488b      	ldr	r0, [pc, #556]	; (8009f24 <_dtoa_r+0x30c>)
 8009cf8:	6018      	str	r0, [r3, #0]
 8009cfa:	1e43      	subs	r3, r0, #1
 8009cfc:	9300      	str	r3, [sp, #0]
 8009cfe:	e7dd      	b.n	8009cbc <_dtoa_r+0xa4>
 8009d00:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009d04:	aa12      	add	r2, sp, #72	; 0x48
 8009d06:	a913      	add	r1, sp, #76	; 0x4c
 8009d08:	4620      	mov	r0, r4
 8009d0a:	f001 f8ad 	bl	800ae68 <__d2b>
 8009d0e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009d12:	4683      	mov	fp, r0
 8009d14:	2d00      	cmp	r5, #0
 8009d16:	d07c      	beq.n	8009e12 <_dtoa_r+0x1fa>
 8009d18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d1a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8009d1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d22:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8009d26:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009d2a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009d2e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009d32:	4b7d      	ldr	r3, [pc, #500]	; (8009f28 <_dtoa_r+0x310>)
 8009d34:	2200      	movs	r2, #0
 8009d36:	4630      	mov	r0, r6
 8009d38:	4639      	mov	r1, r7
 8009d3a:	f7f6 fac5 	bl	80002c8 <__aeabi_dsub>
 8009d3e:	a36e      	add	r3, pc, #440	; (adr r3, 8009ef8 <_dtoa_r+0x2e0>)
 8009d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d44:	f7f6 fc78 	bl	8000638 <__aeabi_dmul>
 8009d48:	a36d      	add	r3, pc, #436	; (adr r3, 8009f00 <_dtoa_r+0x2e8>)
 8009d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d4e:	f7f6 fabd 	bl	80002cc <__adddf3>
 8009d52:	4606      	mov	r6, r0
 8009d54:	4628      	mov	r0, r5
 8009d56:	460f      	mov	r7, r1
 8009d58:	f7f6 fc04 	bl	8000564 <__aeabi_i2d>
 8009d5c:	a36a      	add	r3, pc, #424	; (adr r3, 8009f08 <_dtoa_r+0x2f0>)
 8009d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d62:	f7f6 fc69 	bl	8000638 <__aeabi_dmul>
 8009d66:	4602      	mov	r2, r0
 8009d68:	460b      	mov	r3, r1
 8009d6a:	4630      	mov	r0, r6
 8009d6c:	4639      	mov	r1, r7
 8009d6e:	f7f6 faad 	bl	80002cc <__adddf3>
 8009d72:	4606      	mov	r6, r0
 8009d74:	460f      	mov	r7, r1
 8009d76:	f7f6 ff0f 	bl	8000b98 <__aeabi_d2iz>
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	4682      	mov	sl, r0
 8009d7e:	2300      	movs	r3, #0
 8009d80:	4630      	mov	r0, r6
 8009d82:	4639      	mov	r1, r7
 8009d84:	f7f6 feca 	bl	8000b1c <__aeabi_dcmplt>
 8009d88:	b148      	cbz	r0, 8009d9e <_dtoa_r+0x186>
 8009d8a:	4650      	mov	r0, sl
 8009d8c:	f7f6 fbea 	bl	8000564 <__aeabi_i2d>
 8009d90:	4632      	mov	r2, r6
 8009d92:	463b      	mov	r3, r7
 8009d94:	f7f6 feb8 	bl	8000b08 <__aeabi_dcmpeq>
 8009d98:	b908      	cbnz	r0, 8009d9e <_dtoa_r+0x186>
 8009d9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009d9e:	f1ba 0f16 	cmp.w	sl, #22
 8009da2:	d854      	bhi.n	8009e4e <_dtoa_r+0x236>
 8009da4:	4b61      	ldr	r3, [pc, #388]	; (8009f2c <_dtoa_r+0x314>)
 8009da6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009db2:	f7f6 feb3 	bl	8000b1c <__aeabi_dcmplt>
 8009db6:	2800      	cmp	r0, #0
 8009db8:	d04b      	beq.n	8009e52 <_dtoa_r+0x23a>
 8009dba:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	930e      	str	r3, [sp, #56]	; 0x38
 8009dc2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009dc4:	1b5d      	subs	r5, r3, r5
 8009dc6:	1e6b      	subs	r3, r5, #1
 8009dc8:	9304      	str	r3, [sp, #16]
 8009dca:	bf43      	ittte	mi
 8009dcc:	2300      	movmi	r3, #0
 8009dce:	f1c5 0801 	rsbmi	r8, r5, #1
 8009dd2:	9304      	strmi	r3, [sp, #16]
 8009dd4:	f04f 0800 	movpl.w	r8, #0
 8009dd8:	f1ba 0f00 	cmp.w	sl, #0
 8009ddc:	db3b      	blt.n	8009e56 <_dtoa_r+0x23e>
 8009dde:	9b04      	ldr	r3, [sp, #16]
 8009de0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8009de4:	4453      	add	r3, sl
 8009de6:	9304      	str	r3, [sp, #16]
 8009de8:	2300      	movs	r3, #0
 8009dea:	9306      	str	r3, [sp, #24]
 8009dec:	9b05      	ldr	r3, [sp, #20]
 8009dee:	2b09      	cmp	r3, #9
 8009df0:	d869      	bhi.n	8009ec6 <_dtoa_r+0x2ae>
 8009df2:	2b05      	cmp	r3, #5
 8009df4:	bfc4      	itt	gt
 8009df6:	3b04      	subgt	r3, #4
 8009df8:	9305      	strgt	r3, [sp, #20]
 8009dfa:	9b05      	ldr	r3, [sp, #20]
 8009dfc:	f1a3 0302 	sub.w	r3, r3, #2
 8009e00:	bfcc      	ite	gt
 8009e02:	2500      	movgt	r5, #0
 8009e04:	2501      	movle	r5, #1
 8009e06:	2b03      	cmp	r3, #3
 8009e08:	d869      	bhi.n	8009ede <_dtoa_r+0x2c6>
 8009e0a:	e8df f003 	tbb	[pc, r3]
 8009e0e:	4e2c      	.short	0x4e2c
 8009e10:	5a4c      	.short	0x5a4c
 8009e12:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8009e16:	441d      	add	r5, r3
 8009e18:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009e1c:	2b20      	cmp	r3, #32
 8009e1e:	bfc1      	itttt	gt
 8009e20:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009e24:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009e28:	fa09 f303 	lslgt.w	r3, r9, r3
 8009e2c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009e30:	bfda      	itte	le
 8009e32:	f1c3 0320 	rsble	r3, r3, #32
 8009e36:	fa06 f003 	lslle.w	r0, r6, r3
 8009e3a:	4318      	orrgt	r0, r3
 8009e3c:	f7f6 fb82 	bl	8000544 <__aeabi_ui2d>
 8009e40:	2301      	movs	r3, #1
 8009e42:	4606      	mov	r6, r0
 8009e44:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009e48:	3d01      	subs	r5, #1
 8009e4a:	9310      	str	r3, [sp, #64]	; 0x40
 8009e4c:	e771      	b.n	8009d32 <_dtoa_r+0x11a>
 8009e4e:	2301      	movs	r3, #1
 8009e50:	e7b6      	b.n	8009dc0 <_dtoa_r+0x1a8>
 8009e52:	900e      	str	r0, [sp, #56]	; 0x38
 8009e54:	e7b5      	b.n	8009dc2 <_dtoa_r+0x1aa>
 8009e56:	f1ca 0300 	rsb	r3, sl, #0
 8009e5a:	9306      	str	r3, [sp, #24]
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	eba8 080a 	sub.w	r8, r8, sl
 8009e62:	930d      	str	r3, [sp, #52]	; 0x34
 8009e64:	e7c2      	b.n	8009dec <_dtoa_r+0x1d4>
 8009e66:	2300      	movs	r3, #0
 8009e68:	9308      	str	r3, [sp, #32]
 8009e6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	dc39      	bgt.n	8009ee4 <_dtoa_r+0x2cc>
 8009e70:	f04f 0901 	mov.w	r9, #1
 8009e74:	f8cd 9004 	str.w	r9, [sp, #4]
 8009e78:	464b      	mov	r3, r9
 8009e7a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009e7e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009e80:	2200      	movs	r2, #0
 8009e82:	6042      	str	r2, [r0, #4]
 8009e84:	2204      	movs	r2, #4
 8009e86:	f102 0614 	add.w	r6, r2, #20
 8009e8a:	429e      	cmp	r6, r3
 8009e8c:	6841      	ldr	r1, [r0, #4]
 8009e8e:	d92f      	bls.n	8009ef0 <_dtoa_r+0x2d8>
 8009e90:	4620      	mov	r0, r4
 8009e92:	f000 fcc7 	bl	800a824 <_Balloc>
 8009e96:	9000      	str	r0, [sp, #0]
 8009e98:	2800      	cmp	r0, #0
 8009e9a:	d14b      	bne.n	8009f34 <_dtoa_r+0x31c>
 8009e9c:	4b24      	ldr	r3, [pc, #144]	; (8009f30 <_dtoa_r+0x318>)
 8009e9e:	4602      	mov	r2, r0
 8009ea0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009ea4:	e6d1      	b.n	8009c4a <_dtoa_r+0x32>
 8009ea6:	2301      	movs	r3, #1
 8009ea8:	e7de      	b.n	8009e68 <_dtoa_r+0x250>
 8009eaa:	2300      	movs	r3, #0
 8009eac:	9308      	str	r3, [sp, #32]
 8009eae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009eb0:	eb0a 0903 	add.w	r9, sl, r3
 8009eb4:	f109 0301 	add.w	r3, r9, #1
 8009eb8:	2b01      	cmp	r3, #1
 8009eba:	9301      	str	r3, [sp, #4]
 8009ebc:	bfb8      	it	lt
 8009ebe:	2301      	movlt	r3, #1
 8009ec0:	e7dd      	b.n	8009e7e <_dtoa_r+0x266>
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	e7f2      	b.n	8009eac <_dtoa_r+0x294>
 8009ec6:	2501      	movs	r5, #1
 8009ec8:	2300      	movs	r3, #0
 8009eca:	9305      	str	r3, [sp, #20]
 8009ecc:	9508      	str	r5, [sp, #32]
 8009ece:	f04f 39ff 	mov.w	r9, #4294967295
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	f8cd 9004 	str.w	r9, [sp, #4]
 8009ed8:	2312      	movs	r3, #18
 8009eda:	9209      	str	r2, [sp, #36]	; 0x24
 8009edc:	e7cf      	b.n	8009e7e <_dtoa_r+0x266>
 8009ede:	2301      	movs	r3, #1
 8009ee0:	9308      	str	r3, [sp, #32]
 8009ee2:	e7f4      	b.n	8009ece <_dtoa_r+0x2b6>
 8009ee4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009ee8:	f8cd 9004 	str.w	r9, [sp, #4]
 8009eec:	464b      	mov	r3, r9
 8009eee:	e7c6      	b.n	8009e7e <_dtoa_r+0x266>
 8009ef0:	3101      	adds	r1, #1
 8009ef2:	6041      	str	r1, [r0, #4]
 8009ef4:	0052      	lsls	r2, r2, #1
 8009ef6:	e7c6      	b.n	8009e86 <_dtoa_r+0x26e>
 8009ef8:	636f4361 	.word	0x636f4361
 8009efc:	3fd287a7 	.word	0x3fd287a7
 8009f00:	8b60c8b3 	.word	0x8b60c8b3
 8009f04:	3fc68a28 	.word	0x3fc68a28
 8009f08:	509f79fb 	.word	0x509f79fb
 8009f0c:	3fd34413 	.word	0x3fd34413
 8009f10:	0800ce79 	.word	0x0800ce79
 8009f14:	0800ce90 	.word	0x0800ce90
 8009f18:	7ff00000 	.word	0x7ff00000
 8009f1c:	0800ce75 	.word	0x0800ce75
 8009f20:	0800ce6c 	.word	0x0800ce6c
 8009f24:	0800ce49 	.word	0x0800ce49
 8009f28:	3ff80000 	.word	0x3ff80000
 8009f2c:	0800cf88 	.word	0x0800cf88
 8009f30:	0800ceef 	.word	0x0800ceef
 8009f34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f36:	9a00      	ldr	r2, [sp, #0]
 8009f38:	601a      	str	r2, [r3, #0]
 8009f3a:	9b01      	ldr	r3, [sp, #4]
 8009f3c:	2b0e      	cmp	r3, #14
 8009f3e:	f200 80ad 	bhi.w	800a09c <_dtoa_r+0x484>
 8009f42:	2d00      	cmp	r5, #0
 8009f44:	f000 80aa 	beq.w	800a09c <_dtoa_r+0x484>
 8009f48:	f1ba 0f00 	cmp.w	sl, #0
 8009f4c:	dd36      	ble.n	8009fbc <_dtoa_r+0x3a4>
 8009f4e:	4ac3      	ldr	r2, [pc, #780]	; (800a25c <_dtoa_r+0x644>)
 8009f50:	f00a 030f 	and.w	r3, sl, #15
 8009f54:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009f58:	ed93 7b00 	vldr	d7, [r3]
 8009f5c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009f60:	ea4f 172a 	mov.w	r7, sl, asr #4
 8009f64:	eeb0 8a47 	vmov.f32	s16, s14
 8009f68:	eef0 8a67 	vmov.f32	s17, s15
 8009f6c:	d016      	beq.n	8009f9c <_dtoa_r+0x384>
 8009f6e:	4bbc      	ldr	r3, [pc, #752]	; (800a260 <_dtoa_r+0x648>)
 8009f70:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009f74:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009f78:	f7f6 fc88 	bl	800088c <__aeabi_ddiv>
 8009f7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f80:	f007 070f 	and.w	r7, r7, #15
 8009f84:	2503      	movs	r5, #3
 8009f86:	4eb6      	ldr	r6, [pc, #728]	; (800a260 <_dtoa_r+0x648>)
 8009f88:	b957      	cbnz	r7, 8009fa0 <_dtoa_r+0x388>
 8009f8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f8e:	ec53 2b18 	vmov	r2, r3, d8
 8009f92:	f7f6 fc7b 	bl	800088c <__aeabi_ddiv>
 8009f96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f9a:	e029      	b.n	8009ff0 <_dtoa_r+0x3d8>
 8009f9c:	2502      	movs	r5, #2
 8009f9e:	e7f2      	b.n	8009f86 <_dtoa_r+0x36e>
 8009fa0:	07f9      	lsls	r1, r7, #31
 8009fa2:	d508      	bpl.n	8009fb6 <_dtoa_r+0x39e>
 8009fa4:	ec51 0b18 	vmov	r0, r1, d8
 8009fa8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009fac:	f7f6 fb44 	bl	8000638 <__aeabi_dmul>
 8009fb0:	ec41 0b18 	vmov	d8, r0, r1
 8009fb4:	3501      	adds	r5, #1
 8009fb6:	107f      	asrs	r7, r7, #1
 8009fb8:	3608      	adds	r6, #8
 8009fba:	e7e5      	b.n	8009f88 <_dtoa_r+0x370>
 8009fbc:	f000 80a6 	beq.w	800a10c <_dtoa_r+0x4f4>
 8009fc0:	f1ca 0600 	rsb	r6, sl, #0
 8009fc4:	4ba5      	ldr	r3, [pc, #660]	; (800a25c <_dtoa_r+0x644>)
 8009fc6:	4fa6      	ldr	r7, [pc, #664]	; (800a260 <_dtoa_r+0x648>)
 8009fc8:	f006 020f 	and.w	r2, r6, #15
 8009fcc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fd4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009fd8:	f7f6 fb2e 	bl	8000638 <__aeabi_dmul>
 8009fdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009fe0:	1136      	asrs	r6, r6, #4
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	2502      	movs	r5, #2
 8009fe6:	2e00      	cmp	r6, #0
 8009fe8:	f040 8085 	bne.w	800a0f6 <_dtoa_r+0x4de>
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d1d2      	bne.n	8009f96 <_dtoa_r+0x37e>
 8009ff0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	f000 808c 	beq.w	800a110 <_dtoa_r+0x4f8>
 8009ff8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009ffc:	4b99      	ldr	r3, [pc, #612]	; (800a264 <_dtoa_r+0x64c>)
 8009ffe:	2200      	movs	r2, #0
 800a000:	4630      	mov	r0, r6
 800a002:	4639      	mov	r1, r7
 800a004:	f7f6 fd8a 	bl	8000b1c <__aeabi_dcmplt>
 800a008:	2800      	cmp	r0, #0
 800a00a:	f000 8081 	beq.w	800a110 <_dtoa_r+0x4f8>
 800a00e:	9b01      	ldr	r3, [sp, #4]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d07d      	beq.n	800a110 <_dtoa_r+0x4f8>
 800a014:	f1b9 0f00 	cmp.w	r9, #0
 800a018:	dd3c      	ble.n	800a094 <_dtoa_r+0x47c>
 800a01a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a01e:	9307      	str	r3, [sp, #28]
 800a020:	2200      	movs	r2, #0
 800a022:	4b91      	ldr	r3, [pc, #580]	; (800a268 <_dtoa_r+0x650>)
 800a024:	4630      	mov	r0, r6
 800a026:	4639      	mov	r1, r7
 800a028:	f7f6 fb06 	bl	8000638 <__aeabi_dmul>
 800a02c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a030:	3501      	adds	r5, #1
 800a032:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800a036:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a03a:	4628      	mov	r0, r5
 800a03c:	f7f6 fa92 	bl	8000564 <__aeabi_i2d>
 800a040:	4632      	mov	r2, r6
 800a042:	463b      	mov	r3, r7
 800a044:	f7f6 faf8 	bl	8000638 <__aeabi_dmul>
 800a048:	4b88      	ldr	r3, [pc, #544]	; (800a26c <_dtoa_r+0x654>)
 800a04a:	2200      	movs	r2, #0
 800a04c:	f7f6 f93e 	bl	80002cc <__adddf3>
 800a050:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a054:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a058:	9303      	str	r3, [sp, #12]
 800a05a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d15c      	bne.n	800a11a <_dtoa_r+0x502>
 800a060:	4b83      	ldr	r3, [pc, #524]	; (800a270 <_dtoa_r+0x658>)
 800a062:	2200      	movs	r2, #0
 800a064:	4630      	mov	r0, r6
 800a066:	4639      	mov	r1, r7
 800a068:	f7f6 f92e 	bl	80002c8 <__aeabi_dsub>
 800a06c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a070:	4606      	mov	r6, r0
 800a072:	460f      	mov	r7, r1
 800a074:	f7f6 fd70 	bl	8000b58 <__aeabi_dcmpgt>
 800a078:	2800      	cmp	r0, #0
 800a07a:	f040 8296 	bne.w	800a5aa <_dtoa_r+0x992>
 800a07e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a082:	4630      	mov	r0, r6
 800a084:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a088:	4639      	mov	r1, r7
 800a08a:	f7f6 fd47 	bl	8000b1c <__aeabi_dcmplt>
 800a08e:	2800      	cmp	r0, #0
 800a090:	f040 8288 	bne.w	800a5a4 <_dtoa_r+0x98c>
 800a094:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a098:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a09c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	f2c0 8158 	blt.w	800a354 <_dtoa_r+0x73c>
 800a0a4:	f1ba 0f0e 	cmp.w	sl, #14
 800a0a8:	f300 8154 	bgt.w	800a354 <_dtoa_r+0x73c>
 800a0ac:	4b6b      	ldr	r3, [pc, #428]	; (800a25c <_dtoa_r+0x644>)
 800a0ae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a0b2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a0b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	f280 80e3 	bge.w	800a284 <_dtoa_r+0x66c>
 800a0be:	9b01      	ldr	r3, [sp, #4]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	f300 80df 	bgt.w	800a284 <_dtoa_r+0x66c>
 800a0c6:	f040 826d 	bne.w	800a5a4 <_dtoa_r+0x98c>
 800a0ca:	4b69      	ldr	r3, [pc, #420]	; (800a270 <_dtoa_r+0x658>)
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	4640      	mov	r0, r8
 800a0d0:	4649      	mov	r1, r9
 800a0d2:	f7f6 fab1 	bl	8000638 <__aeabi_dmul>
 800a0d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a0da:	f7f6 fd33 	bl	8000b44 <__aeabi_dcmpge>
 800a0de:	9e01      	ldr	r6, [sp, #4]
 800a0e0:	4637      	mov	r7, r6
 800a0e2:	2800      	cmp	r0, #0
 800a0e4:	f040 8243 	bne.w	800a56e <_dtoa_r+0x956>
 800a0e8:	9d00      	ldr	r5, [sp, #0]
 800a0ea:	2331      	movs	r3, #49	; 0x31
 800a0ec:	f805 3b01 	strb.w	r3, [r5], #1
 800a0f0:	f10a 0a01 	add.w	sl, sl, #1
 800a0f4:	e23f      	b.n	800a576 <_dtoa_r+0x95e>
 800a0f6:	07f2      	lsls	r2, r6, #31
 800a0f8:	d505      	bpl.n	800a106 <_dtoa_r+0x4ee>
 800a0fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a0fe:	f7f6 fa9b 	bl	8000638 <__aeabi_dmul>
 800a102:	3501      	adds	r5, #1
 800a104:	2301      	movs	r3, #1
 800a106:	1076      	asrs	r6, r6, #1
 800a108:	3708      	adds	r7, #8
 800a10a:	e76c      	b.n	8009fe6 <_dtoa_r+0x3ce>
 800a10c:	2502      	movs	r5, #2
 800a10e:	e76f      	b.n	8009ff0 <_dtoa_r+0x3d8>
 800a110:	9b01      	ldr	r3, [sp, #4]
 800a112:	f8cd a01c 	str.w	sl, [sp, #28]
 800a116:	930c      	str	r3, [sp, #48]	; 0x30
 800a118:	e78d      	b.n	800a036 <_dtoa_r+0x41e>
 800a11a:	9900      	ldr	r1, [sp, #0]
 800a11c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a11e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a120:	4b4e      	ldr	r3, [pc, #312]	; (800a25c <_dtoa_r+0x644>)
 800a122:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a126:	4401      	add	r1, r0
 800a128:	9102      	str	r1, [sp, #8]
 800a12a:	9908      	ldr	r1, [sp, #32]
 800a12c:	eeb0 8a47 	vmov.f32	s16, s14
 800a130:	eef0 8a67 	vmov.f32	s17, s15
 800a134:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a138:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a13c:	2900      	cmp	r1, #0
 800a13e:	d045      	beq.n	800a1cc <_dtoa_r+0x5b4>
 800a140:	494c      	ldr	r1, [pc, #304]	; (800a274 <_dtoa_r+0x65c>)
 800a142:	2000      	movs	r0, #0
 800a144:	f7f6 fba2 	bl	800088c <__aeabi_ddiv>
 800a148:	ec53 2b18 	vmov	r2, r3, d8
 800a14c:	f7f6 f8bc 	bl	80002c8 <__aeabi_dsub>
 800a150:	9d00      	ldr	r5, [sp, #0]
 800a152:	ec41 0b18 	vmov	d8, r0, r1
 800a156:	4639      	mov	r1, r7
 800a158:	4630      	mov	r0, r6
 800a15a:	f7f6 fd1d 	bl	8000b98 <__aeabi_d2iz>
 800a15e:	900c      	str	r0, [sp, #48]	; 0x30
 800a160:	f7f6 fa00 	bl	8000564 <__aeabi_i2d>
 800a164:	4602      	mov	r2, r0
 800a166:	460b      	mov	r3, r1
 800a168:	4630      	mov	r0, r6
 800a16a:	4639      	mov	r1, r7
 800a16c:	f7f6 f8ac 	bl	80002c8 <__aeabi_dsub>
 800a170:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a172:	3330      	adds	r3, #48	; 0x30
 800a174:	f805 3b01 	strb.w	r3, [r5], #1
 800a178:	ec53 2b18 	vmov	r2, r3, d8
 800a17c:	4606      	mov	r6, r0
 800a17e:	460f      	mov	r7, r1
 800a180:	f7f6 fccc 	bl	8000b1c <__aeabi_dcmplt>
 800a184:	2800      	cmp	r0, #0
 800a186:	d165      	bne.n	800a254 <_dtoa_r+0x63c>
 800a188:	4632      	mov	r2, r6
 800a18a:	463b      	mov	r3, r7
 800a18c:	4935      	ldr	r1, [pc, #212]	; (800a264 <_dtoa_r+0x64c>)
 800a18e:	2000      	movs	r0, #0
 800a190:	f7f6 f89a 	bl	80002c8 <__aeabi_dsub>
 800a194:	ec53 2b18 	vmov	r2, r3, d8
 800a198:	f7f6 fcc0 	bl	8000b1c <__aeabi_dcmplt>
 800a19c:	2800      	cmp	r0, #0
 800a19e:	f040 80b9 	bne.w	800a314 <_dtoa_r+0x6fc>
 800a1a2:	9b02      	ldr	r3, [sp, #8]
 800a1a4:	429d      	cmp	r5, r3
 800a1a6:	f43f af75 	beq.w	800a094 <_dtoa_r+0x47c>
 800a1aa:	4b2f      	ldr	r3, [pc, #188]	; (800a268 <_dtoa_r+0x650>)
 800a1ac:	ec51 0b18 	vmov	r0, r1, d8
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	f7f6 fa41 	bl	8000638 <__aeabi_dmul>
 800a1b6:	4b2c      	ldr	r3, [pc, #176]	; (800a268 <_dtoa_r+0x650>)
 800a1b8:	ec41 0b18 	vmov	d8, r0, r1
 800a1bc:	2200      	movs	r2, #0
 800a1be:	4630      	mov	r0, r6
 800a1c0:	4639      	mov	r1, r7
 800a1c2:	f7f6 fa39 	bl	8000638 <__aeabi_dmul>
 800a1c6:	4606      	mov	r6, r0
 800a1c8:	460f      	mov	r7, r1
 800a1ca:	e7c4      	b.n	800a156 <_dtoa_r+0x53e>
 800a1cc:	ec51 0b17 	vmov	r0, r1, d7
 800a1d0:	f7f6 fa32 	bl	8000638 <__aeabi_dmul>
 800a1d4:	9b02      	ldr	r3, [sp, #8]
 800a1d6:	9d00      	ldr	r5, [sp, #0]
 800a1d8:	930c      	str	r3, [sp, #48]	; 0x30
 800a1da:	ec41 0b18 	vmov	d8, r0, r1
 800a1de:	4639      	mov	r1, r7
 800a1e0:	4630      	mov	r0, r6
 800a1e2:	f7f6 fcd9 	bl	8000b98 <__aeabi_d2iz>
 800a1e6:	9011      	str	r0, [sp, #68]	; 0x44
 800a1e8:	f7f6 f9bc 	bl	8000564 <__aeabi_i2d>
 800a1ec:	4602      	mov	r2, r0
 800a1ee:	460b      	mov	r3, r1
 800a1f0:	4630      	mov	r0, r6
 800a1f2:	4639      	mov	r1, r7
 800a1f4:	f7f6 f868 	bl	80002c8 <__aeabi_dsub>
 800a1f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a1fa:	3330      	adds	r3, #48	; 0x30
 800a1fc:	f805 3b01 	strb.w	r3, [r5], #1
 800a200:	9b02      	ldr	r3, [sp, #8]
 800a202:	429d      	cmp	r5, r3
 800a204:	4606      	mov	r6, r0
 800a206:	460f      	mov	r7, r1
 800a208:	f04f 0200 	mov.w	r2, #0
 800a20c:	d134      	bne.n	800a278 <_dtoa_r+0x660>
 800a20e:	4b19      	ldr	r3, [pc, #100]	; (800a274 <_dtoa_r+0x65c>)
 800a210:	ec51 0b18 	vmov	r0, r1, d8
 800a214:	f7f6 f85a 	bl	80002cc <__adddf3>
 800a218:	4602      	mov	r2, r0
 800a21a:	460b      	mov	r3, r1
 800a21c:	4630      	mov	r0, r6
 800a21e:	4639      	mov	r1, r7
 800a220:	f7f6 fc9a 	bl	8000b58 <__aeabi_dcmpgt>
 800a224:	2800      	cmp	r0, #0
 800a226:	d175      	bne.n	800a314 <_dtoa_r+0x6fc>
 800a228:	ec53 2b18 	vmov	r2, r3, d8
 800a22c:	4911      	ldr	r1, [pc, #68]	; (800a274 <_dtoa_r+0x65c>)
 800a22e:	2000      	movs	r0, #0
 800a230:	f7f6 f84a 	bl	80002c8 <__aeabi_dsub>
 800a234:	4602      	mov	r2, r0
 800a236:	460b      	mov	r3, r1
 800a238:	4630      	mov	r0, r6
 800a23a:	4639      	mov	r1, r7
 800a23c:	f7f6 fc6e 	bl	8000b1c <__aeabi_dcmplt>
 800a240:	2800      	cmp	r0, #0
 800a242:	f43f af27 	beq.w	800a094 <_dtoa_r+0x47c>
 800a246:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a248:	1e6b      	subs	r3, r5, #1
 800a24a:	930c      	str	r3, [sp, #48]	; 0x30
 800a24c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a250:	2b30      	cmp	r3, #48	; 0x30
 800a252:	d0f8      	beq.n	800a246 <_dtoa_r+0x62e>
 800a254:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a258:	e04a      	b.n	800a2f0 <_dtoa_r+0x6d8>
 800a25a:	bf00      	nop
 800a25c:	0800cf88 	.word	0x0800cf88
 800a260:	0800cf60 	.word	0x0800cf60
 800a264:	3ff00000 	.word	0x3ff00000
 800a268:	40240000 	.word	0x40240000
 800a26c:	401c0000 	.word	0x401c0000
 800a270:	40140000 	.word	0x40140000
 800a274:	3fe00000 	.word	0x3fe00000
 800a278:	4baf      	ldr	r3, [pc, #700]	; (800a538 <_dtoa_r+0x920>)
 800a27a:	f7f6 f9dd 	bl	8000638 <__aeabi_dmul>
 800a27e:	4606      	mov	r6, r0
 800a280:	460f      	mov	r7, r1
 800a282:	e7ac      	b.n	800a1de <_dtoa_r+0x5c6>
 800a284:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a288:	9d00      	ldr	r5, [sp, #0]
 800a28a:	4642      	mov	r2, r8
 800a28c:	464b      	mov	r3, r9
 800a28e:	4630      	mov	r0, r6
 800a290:	4639      	mov	r1, r7
 800a292:	f7f6 fafb 	bl	800088c <__aeabi_ddiv>
 800a296:	f7f6 fc7f 	bl	8000b98 <__aeabi_d2iz>
 800a29a:	9002      	str	r0, [sp, #8]
 800a29c:	f7f6 f962 	bl	8000564 <__aeabi_i2d>
 800a2a0:	4642      	mov	r2, r8
 800a2a2:	464b      	mov	r3, r9
 800a2a4:	f7f6 f9c8 	bl	8000638 <__aeabi_dmul>
 800a2a8:	4602      	mov	r2, r0
 800a2aa:	460b      	mov	r3, r1
 800a2ac:	4630      	mov	r0, r6
 800a2ae:	4639      	mov	r1, r7
 800a2b0:	f7f6 f80a 	bl	80002c8 <__aeabi_dsub>
 800a2b4:	9e02      	ldr	r6, [sp, #8]
 800a2b6:	9f01      	ldr	r7, [sp, #4]
 800a2b8:	3630      	adds	r6, #48	; 0x30
 800a2ba:	f805 6b01 	strb.w	r6, [r5], #1
 800a2be:	9e00      	ldr	r6, [sp, #0]
 800a2c0:	1bae      	subs	r6, r5, r6
 800a2c2:	42b7      	cmp	r7, r6
 800a2c4:	4602      	mov	r2, r0
 800a2c6:	460b      	mov	r3, r1
 800a2c8:	d137      	bne.n	800a33a <_dtoa_r+0x722>
 800a2ca:	f7f5 ffff 	bl	80002cc <__adddf3>
 800a2ce:	4642      	mov	r2, r8
 800a2d0:	464b      	mov	r3, r9
 800a2d2:	4606      	mov	r6, r0
 800a2d4:	460f      	mov	r7, r1
 800a2d6:	f7f6 fc3f 	bl	8000b58 <__aeabi_dcmpgt>
 800a2da:	b9c8      	cbnz	r0, 800a310 <_dtoa_r+0x6f8>
 800a2dc:	4642      	mov	r2, r8
 800a2de:	464b      	mov	r3, r9
 800a2e0:	4630      	mov	r0, r6
 800a2e2:	4639      	mov	r1, r7
 800a2e4:	f7f6 fc10 	bl	8000b08 <__aeabi_dcmpeq>
 800a2e8:	b110      	cbz	r0, 800a2f0 <_dtoa_r+0x6d8>
 800a2ea:	9b02      	ldr	r3, [sp, #8]
 800a2ec:	07d9      	lsls	r1, r3, #31
 800a2ee:	d40f      	bmi.n	800a310 <_dtoa_r+0x6f8>
 800a2f0:	4620      	mov	r0, r4
 800a2f2:	4659      	mov	r1, fp
 800a2f4:	f000 fad6 	bl	800a8a4 <_Bfree>
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	702b      	strb	r3, [r5, #0]
 800a2fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a2fe:	f10a 0001 	add.w	r0, sl, #1
 800a302:	6018      	str	r0, [r3, #0]
 800a304:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a306:	2b00      	cmp	r3, #0
 800a308:	f43f acd8 	beq.w	8009cbc <_dtoa_r+0xa4>
 800a30c:	601d      	str	r5, [r3, #0]
 800a30e:	e4d5      	b.n	8009cbc <_dtoa_r+0xa4>
 800a310:	f8cd a01c 	str.w	sl, [sp, #28]
 800a314:	462b      	mov	r3, r5
 800a316:	461d      	mov	r5, r3
 800a318:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a31c:	2a39      	cmp	r2, #57	; 0x39
 800a31e:	d108      	bne.n	800a332 <_dtoa_r+0x71a>
 800a320:	9a00      	ldr	r2, [sp, #0]
 800a322:	429a      	cmp	r2, r3
 800a324:	d1f7      	bne.n	800a316 <_dtoa_r+0x6fe>
 800a326:	9a07      	ldr	r2, [sp, #28]
 800a328:	9900      	ldr	r1, [sp, #0]
 800a32a:	3201      	adds	r2, #1
 800a32c:	9207      	str	r2, [sp, #28]
 800a32e:	2230      	movs	r2, #48	; 0x30
 800a330:	700a      	strb	r2, [r1, #0]
 800a332:	781a      	ldrb	r2, [r3, #0]
 800a334:	3201      	adds	r2, #1
 800a336:	701a      	strb	r2, [r3, #0]
 800a338:	e78c      	b.n	800a254 <_dtoa_r+0x63c>
 800a33a:	4b7f      	ldr	r3, [pc, #508]	; (800a538 <_dtoa_r+0x920>)
 800a33c:	2200      	movs	r2, #0
 800a33e:	f7f6 f97b 	bl	8000638 <__aeabi_dmul>
 800a342:	2200      	movs	r2, #0
 800a344:	2300      	movs	r3, #0
 800a346:	4606      	mov	r6, r0
 800a348:	460f      	mov	r7, r1
 800a34a:	f7f6 fbdd 	bl	8000b08 <__aeabi_dcmpeq>
 800a34e:	2800      	cmp	r0, #0
 800a350:	d09b      	beq.n	800a28a <_dtoa_r+0x672>
 800a352:	e7cd      	b.n	800a2f0 <_dtoa_r+0x6d8>
 800a354:	9a08      	ldr	r2, [sp, #32]
 800a356:	2a00      	cmp	r2, #0
 800a358:	f000 80c4 	beq.w	800a4e4 <_dtoa_r+0x8cc>
 800a35c:	9a05      	ldr	r2, [sp, #20]
 800a35e:	2a01      	cmp	r2, #1
 800a360:	f300 80a8 	bgt.w	800a4b4 <_dtoa_r+0x89c>
 800a364:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a366:	2a00      	cmp	r2, #0
 800a368:	f000 80a0 	beq.w	800a4ac <_dtoa_r+0x894>
 800a36c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a370:	9e06      	ldr	r6, [sp, #24]
 800a372:	4645      	mov	r5, r8
 800a374:	9a04      	ldr	r2, [sp, #16]
 800a376:	2101      	movs	r1, #1
 800a378:	441a      	add	r2, r3
 800a37a:	4620      	mov	r0, r4
 800a37c:	4498      	add	r8, r3
 800a37e:	9204      	str	r2, [sp, #16]
 800a380:	f000 fb4c 	bl	800aa1c <__i2b>
 800a384:	4607      	mov	r7, r0
 800a386:	2d00      	cmp	r5, #0
 800a388:	dd0b      	ble.n	800a3a2 <_dtoa_r+0x78a>
 800a38a:	9b04      	ldr	r3, [sp, #16]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	dd08      	ble.n	800a3a2 <_dtoa_r+0x78a>
 800a390:	42ab      	cmp	r3, r5
 800a392:	9a04      	ldr	r2, [sp, #16]
 800a394:	bfa8      	it	ge
 800a396:	462b      	movge	r3, r5
 800a398:	eba8 0803 	sub.w	r8, r8, r3
 800a39c:	1aed      	subs	r5, r5, r3
 800a39e:	1ad3      	subs	r3, r2, r3
 800a3a0:	9304      	str	r3, [sp, #16]
 800a3a2:	9b06      	ldr	r3, [sp, #24]
 800a3a4:	b1fb      	cbz	r3, 800a3e6 <_dtoa_r+0x7ce>
 800a3a6:	9b08      	ldr	r3, [sp, #32]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	f000 809f 	beq.w	800a4ec <_dtoa_r+0x8d4>
 800a3ae:	2e00      	cmp	r6, #0
 800a3b0:	dd11      	ble.n	800a3d6 <_dtoa_r+0x7be>
 800a3b2:	4639      	mov	r1, r7
 800a3b4:	4632      	mov	r2, r6
 800a3b6:	4620      	mov	r0, r4
 800a3b8:	f000 fbec 	bl	800ab94 <__pow5mult>
 800a3bc:	465a      	mov	r2, fp
 800a3be:	4601      	mov	r1, r0
 800a3c0:	4607      	mov	r7, r0
 800a3c2:	4620      	mov	r0, r4
 800a3c4:	f000 fb40 	bl	800aa48 <__multiply>
 800a3c8:	4659      	mov	r1, fp
 800a3ca:	9007      	str	r0, [sp, #28]
 800a3cc:	4620      	mov	r0, r4
 800a3ce:	f000 fa69 	bl	800a8a4 <_Bfree>
 800a3d2:	9b07      	ldr	r3, [sp, #28]
 800a3d4:	469b      	mov	fp, r3
 800a3d6:	9b06      	ldr	r3, [sp, #24]
 800a3d8:	1b9a      	subs	r2, r3, r6
 800a3da:	d004      	beq.n	800a3e6 <_dtoa_r+0x7ce>
 800a3dc:	4659      	mov	r1, fp
 800a3de:	4620      	mov	r0, r4
 800a3e0:	f000 fbd8 	bl	800ab94 <__pow5mult>
 800a3e4:	4683      	mov	fp, r0
 800a3e6:	2101      	movs	r1, #1
 800a3e8:	4620      	mov	r0, r4
 800a3ea:	f000 fb17 	bl	800aa1c <__i2b>
 800a3ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	4606      	mov	r6, r0
 800a3f4:	dd7c      	ble.n	800a4f0 <_dtoa_r+0x8d8>
 800a3f6:	461a      	mov	r2, r3
 800a3f8:	4601      	mov	r1, r0
 800a3fa:	4620      	mov	r0, r4
 800a3fc:	f000 fbca 	bl	800ab94 <__pow5mult>
 800a400:	9b05      	ldr	r3, [sp, #20]
 800a402:	2b01      	cmp	r3, #1
 800a404:	4606      	mov	r6, r0
 800a406:	dd76      	ble.n	800a4f6 <_dtoa_r+0x8de>
 800a408:	2300      	movs	r3, #0
 800a40a:	9306      	str	r3, [sp, #24]
 800a40c:	6933      	ldr	r3, [r6, #16]
 800a40e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a412:	6918      	ldr	r0, [r3, #16]
 800a414:	f000 fab2 	bl	800a97c <__hi0bits>
 800a418:	f1c0 0020 	rsb	r0, r0, #32
 800a41c:	9b04      	ldr	r3, [sp, #16]
 800a41e:	4418      	add	r0, r3
 800a420:	f010 001f 	ands.w	r0, r0, #31
 800a424:	f000 8086 	beq.w	800a534 <_dtoa_r+0x91c>
 800a428:	f1c0 0320 	rsb	r3, r0, #32
 800a42c:	2b04      	cmp	r3, #4
 800a42e:	dd7f      	ble.n	800a530 <_dtoa_r+0x918>
 800a430:	f1c0 001c 	rsb	r0, r0, #28
 800a434:	9b04      	ldr	r3, [sp, #16]
 800a436:	4403      	add	r3, r0
 800a438:	4480      	add	r8, r0
 800a43a:	4405      	add	r5, r0
 800a43c:	9304      	str	r3, [sp, #16]
 800a43e:	f1b8 0f00 	cmp.w	r8, #0
 800a442:	dd05      	ble.n	800a450 <_dtoa_r+0x838>
 800a444:	4659      	mov	r1, fp
 800a446:	4642      	mov	r2, r8
 800a448:	4620      	mov	r0, r4
 800a44a:	f000 fbfd 	bl	800ac48 <__lshift>
 800a44e:	4683      	mov	fp, r0
 800a450:	9b04      	ldr	r3, [sp, #16]
 800a452:	2b00      	cmp	r3, #0
 800a454:	dd05      	ble.n	800a462 <_dtoa_r+0x84a>
 800a456:	4631      	mov	r1, r6
 800a458:	461a      	mov	r2, r3
 800a45a:	4620      	mov	r0, r4
 800a45c:	f000 fbf4 	bl	800ac48 <__lshift>
 800a460:	4606      	mov	r6, r0
 800a462:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a464:	2b00      	cmp	r3, #0
 800a466:	d069      	beq.n	800a53c <_dtoa_r+0x924>
 800a468:	4631      	mov	r1, r6
 800a46a:	4658      	mov	r0, fp
 800a46c:	f000 fc58 	bl	800ad20 <__mcmp>
 800a470:	2800      	cmp	r0, #0
 800a472:	da63      	bge.n	800a53c <_dtoa_r+0x924>
 800a474:	2300      	movs	r3, #0
 800a476:	4659      	mov	r1, fp
 800a478:	220a      	movs	r2, #10
 800a47a:	4620      	mov	r0, r4
 800a47c:	f000 fa34 	bl	800a8e8 <__multadd>
 800a480:	9b08      	ldr	r3, [sp, #32]
 800a482:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a486:	4683      	mov	fp, r0
 800a488:	2b00      	cmp	r3, #0
 800a48a:	f000 818f 	beq.w	800a7ac <_dtoa_r+0xb94>
 800a48e:	4639      	mov	r1, r7
 800a490:	2300      	movs	r3, #0
 800a492:	220a      	movs	r2, #10
 800a494:	4620      	mov	r0, r4
 800a496:	f000 fa27 	bl	800a8e8 <__multadd>
 800a49a:	f1b9 0f00 	cmp.w	r9, #0
 800a49e:	4607      	mov	r7, r0
 800a4a0:	f300 808e 	bgt.w	800a5c0 <_dtoa_r+0x9a8>
 800a4a4:	9b05      	ldr	r3, [sp, #20]
 800a4a6:	2b02      	cmp	r3, #2
 800a4a8:	dc50      	bgt.n	800a54c <_dtoa_r+0x934>
 800a4aa:	e089      	b.n	800a5c0 <_dtoa_r+0x9a8>
 800a4ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a4ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a4b2:	e75d      	b.n	800a370 <_dtoa_r+0x758>
 800a4b4:	9b01      	ldr	r3, [sp, #4]
 800a4b6:	1e5e      	subs	r6, r3, #1
 800a4b8:	9b06      	ldr	r3, [sp, #24]
 800a4ba:	42b3      	cmp	r3, r6
 800a4bc:	bfbf      	itttt	lt
 800a4be:	9b06      	ldrlt	r3, [sp, #24]
 800a4c0:	9606      	strlt	r6, [sp, #24]
 800a4c2:	1af2      	sublt	r2, r6, r3
 800a4c4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800a4c6:	bfb6      	itet	lt
 800a4c8:	189b      	addlt	r3, r3, r2
 800a4ca:	1b9e      	subge	r6, r3, r6
 800a4cc:	930d      	strlt	r3, [sp, #52]	; 0x34
 800a4ce:	9b01      	ldr	r3, [sp, #4]
 800a4d0:	bfb8      	it	lt
 800a4d2:	2600      	movlt	r6, #0
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	bfb5      	itete	lt
 800a4d8:	eba8 0503 	sublt.w	r5, r8, r3
 800a4dc:	9b01      	ldrge	r3, [sp, #4]
 800a4de:	2300      	movlt	r3, #0
 800a4e0:	4645      	movge	r5, r8
 800a4e2:	e747      	b.n	800a374 <_dtoa_r+0x75c>
 800a4e4:	9e06      	ldr	r6, [sp, #24]
 800a4e6:	9f08      	ldr	r7, [sp, #32]
 800a4e8:	4645      	mov	r5, r8
 800a4ea:	e74c      	b.n	800a386 <_dtoa_r+0x76e>
 800a4ec:	9a06      	ldr	r2, [sp, #24]
 800a4ee:	e775      	b.n	800a3dc <_dtoa_r+0x7c4>
 800a4f0:	9b05      	ldr	r3, [sp, #20]
 800a4f2:	2b01      	cmp	r3, #1
 800a4f4:	dc18      	bgt.n	800a528 <_dtoa_r+0x910>
 800a4f6:	9b02      	ldr	r3, [sp, #8]
 800a4f8:	b9b3      	cbnz	r3, 800a528 <_dtoa_r+0x910>
 800a4fa:	9b03      	ldr	r3, [sp, #12]
 800a4fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a500:	b9a3      	cbnz	r3, 800a52c <_dtoa_r+0x914>
 800a502:	9b03      	ldr	r3, [sp, #12]
 800a504:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a508:	0d1b      	lsrs	r3, r3, #20
 800a50a:	051b      	lsls	r3, r3, #20
 800a50c:	b12b      	cbz	r3, 800a51a <_dtoa_r+0x902>
 800a50e:	9b04      	ldr	r3, [sp, #16]
 800a510:	3301      	adds	r3, #1
 800a512:	9304      	str	r3, [sp, #16]
 800a514:	f108 0801 	add.w	r8, r8, #1
 800a518:	2301      	movs	r3, #1
 800a51a:	9306      	str	r3, [sp, #24]
 800a51c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a51e:	2b00      	cmp	r3, #0
 800a520:	f47f af74 	bne.w	800a40c <_dtoa_r+0x7f4>
 800a524:	2001      	movs	r0, #1
 800a526:	e779      	b.n	800a41c <_dtoa_r+0x804>
 800a528:	2300      	movs	r3, #0
 800a52a:	e7f6      	b.n	800a51a <_dtoa_r+0x902>
 800a52c:	9b02      	ldr	r3, [sp, #8]
 800a52e:	e7f4      	b.n	800a51a <_dtoa_r+0x902>
 800a530:	d085      	beq.n	800a43e <_dtoa_r+0x826>
 800a532:	4618      	mov	r0, r3
 800a534:	301c      	adds	r0, #28
 800a536:	e77d      	b.n	800a434 <_dtoa_r+0x81c>
 800a538:	40240000 	.word	0x40240000
 800a53c:	9b01      	ldr	r3, [sp, #4]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	dc38      	bgt.n	800a5b4 <_dtoa_r+0x99c>
 800a542:	9b05      	ldr	r3, [sp, #20]
 800a544:	2b02      	cmp	r3, #2
 800a546:	dd35      	ble.n	800a5b4 <_dtoa_r+0x99c>
 800a548:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a54c:	f1b9 0f00 	cmp.w	r9, #0
 800a550:	d10d      	bne.n	800a56e <_dtoa_r+0x956>
 800a552:	4631      	mov	r1, r6
 800a554:	464b      	mov	r3, r9
 800a556:	2205      	movs	r2, #5
 800a558:	4620      	mov	r0, r4
 800a55a:	f000 f9c5 	bl	800a8e8 <__multadd>
 800a55e:	4601      	mov	r1, r0
 800a560:	4606      	mov	r6, r0
 800a562:	4658      	mov	r0, fp
 800a564:	f000 fbdc 	bl	800ad20 <__mcmp>
 800a568:	2800      	cmp	r0, #0
 800a56a:	f73f adbd 	bgt.w	800a0e8 <_dtoa_r+0x4d0>
 800a56e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a570:	9d00      	ldr	r5, [sp, #0]
 800a572:	ea6f 0a03 	mvn.w	sl, r3
 800a576:	f04f 0800 	mov.w	r8, #0
 800a57a:	4631      	mov	r1, r6
 800a57c:	4620      	mov	r0, r4
 800a57e:	f000 f991 	bl	800a8a4 <_Bfree>
 800a582:	2f00      	cmp	r7, #0
 800a584:	f43f aeb4 	beq.w	800a2f0 <_dtoa_r+0x6d8>
 800a588:	f1b8 0f00 	cmp.w	r8, #0
 800a58c:	d005      	beq.n	800a59a <_dtoa_r+0x982>
 800a58e:	45b8      	cmp	r8, r7
 800a590:	d003      	beq.n	800a59a <_dtoa_r+0x982>
 800a592:	4641      	mov	r1, r8
 800a594:	4620      	mov	r0, r4
 800a596:	f000 f985 	bl	800a8a4 <_Bfree>
 800a59a:	4639      	mov	r1, r7
 800a59c:	4620      	mov	r0, r4
 800a59e:	f000 f981 	bl	800a8a4 <_Bfree>
 800a5a2:	e6a5      	b.n	800a2f0 <_dtoa_r+0x6d8>
 800a5a4:	2600      	movs	r6, #0
 800a5a6:	4637      	mov	r7, r6
 800a5a8:	e7e1      	b.n	800a56e <_dtoa_r+0x956>
 800a5aa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a5ac:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a5b0:	4637      	mov	r7, r6
 800a5b2:	e599      	b.n	800a0e8 <_dtoa_r+0x4d0>
 800a5b4:	9b08      	ldr	r3, [sp, #32]
 800a5b6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	f000 80fd 	beq.w	800a7ba <_dtoa_r+0xba2>
 800a5c0:	2d00      	cmp	r5, #0
 800a5c2:	dd05      	ble.n	800a5d0 <_dtoa_r+0x9b8>
 800a5c4:	4639      	mov	r1, r7
 800a5c6:	462a      	mov	r2, r5
 800a5c8:	4620      	mov	r0, r4
 800a5ca:	f000 fb3d 	bl	800ac48 <__lshift>
 800a5ce:	4607      	mov	r7, r0
 800a5d0:	9b06      	ldr	r3, [sp, #24]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d05c      	beq.n	800a690 <_dtoa_r+0xa78>
 800a5d6:	6879      	ldr	r1, [r7, #4]
 800a5d8:	4620      	mov	r0, r4
 800a5da:	f000 f923 	bl	800a824 <_Balloc>
 800a5de:	4605      	mov	r5, r0
 800a5e0:	b928      	cbnz	r0, 800a5ee <_dtoa_r+0x9d6>
 800a5e2:	4b80      	ldr	r3, [pc, #512]	; (800a7e4 <_dtoa_r+0xbcc>)
 800a5e4:	4602      	mov	r2, r0
 800a5e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a5ea:	f7ff bb2e 	b.w	8009c4a <_dtoa_r+0x32>
 800a5ee:	693a      	ldr	r2, [r7, #16]
 800a5f0:	3202      	adds	r2, #2
 800a5f2:	0092      	lsls	r2, r2, #2
 800a5f4:	f107 010c 	add.w	r1, r7, #12
 800a5f8:	300c      	adds	r0, #12
 800a5fa:	f000 f905 	bl	800a808 <memcpy>
 800a5fe:	2201      	movs	r2, #1
 800a600:	4629      	mov	r1, r5
 800a602:	4620      	mov	r0, r4
 800a604:	f000 fb20 	bl	800ac48 <__lshift>
 800a608:	9b00      	ldr	r3, [sp, #0]
 800a60a:	3301      	adds	r3, #1
 800a60c:	9301      	str	r3, [sp, #4]
 800a60e:	9b00      	ldr	r3, [sp, #0]
 800a610:	444b      	add	r3, r9
 800a612:	9307      	str	r3, [sp, #28]
 800a614:	9b02      	ldr	r3, [sp, #8]
 800a616:	f003 0301 	and.w	r3, r3, #1
 800a61a:	46b8      	mov	r8, r7
 800a61c:	9306      	str	r3, [sp, #24]
 800a61e:	4607      	mov	r7, r0
 800a620:	9b01      	ldr	r3, [sp, #4]
 800a622:	4631      	mov	r1, r6
 800a624:	3b01      	subs	r3, #1
 800a626:	4658      	mov	r0, fp
 800a628:	9302      	str	r3, [sp, #8]
 800a62a:	f7ff fa69 	bl	8009b00 <quorem>
 800a62e:	4603      	mov	r3, r0
 800a630:	3330      	adds	r3, #48	; 0x30
 800a632:	9004      	str	r0, [sp, #16]
 800a634:	4641      	mov	r1, r8
 800a636:	4658      	mov	r0, fp
 800a638:	9308      	str	r3, [sp, #32]
 800a63a:	f000 fb71 	bl	800ad20 <__mcmp>
 800a63e:	463a      	mov	r2, r7
 800a640:	4681      	mov	r9, r0
 800a642:	4631      	mov	r1, r6
 800a644:	4620      	mov	r0, r4
 800a646:	f000 fb87 	bl	800ad58 <__mdiff>
 800a64a:	68c2      	ldr	r2, [r0, #12]
 800a64c:	9b08      	ldr	r3, [sp, #32]
 800a64e:	4605      	mov	r5, r0
 800a650:	bb02      	cbnz	r2, 800a694 <_dtoa_r+0xa7c>
 800a652:	4601      	mov	r1, r0
 800a654:	4658      	mov	r0, fp
 800a656:	f000 fb63 	bl	800ad20 <__mcmp>
 800a65a:	9b08      	ldr	r3, [sp, #32]
 800a65c:	4602      	mov	r2, r0
 800a65e:	4629      	mov	r1, r5
 800a660:	4620      	mov	r0, r4
 800a662:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800a666:	f000 f91d 	bl	800a8a4 <_Bfree>
 800a66a:	9b05      	ldr	r3, [sp, #20]
 800a66c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a66e:	9d01      	ldr	r5, [sp, #4]
 800a670:	ea43 0102 	orr.w	r1, r3, r2
 800a674:	9b06      	ldr	r3, [sp, #24]
 800a676:	430b      	orrs	r3, r1
 800a678:	9b08      	ldr	r3, [sp, #32]
 800a67a:	d10d      	bne.n	800a698 <_dtoa_r+0xa80>
 800a67c:	2b39      	cmp	r3, #57	; 0x39
 800a67e:	d029      	beq.n	800a6d4 <_dtoa_r+0xabc>
 800a680:	f1b9 0f00 	cmp.w	r9, #0
 800a684:	dd01      	ble.n	800a68a <_dtoa_r+0xa72>
 800a686:	9b04      	ldr	r3, [sp, #16]
 800a688:	3331      	adds	r3, #49	; 0x31
 800a68a:	9a02      	ldr	r2, [sp, #8]
 800a68c:	7013      	strb	r3, [r2, #0]
 800a68e:	e774      	b.n	800a57a <_dtoa_r+0x962>
 800a690:	4638      	mov	r0, r7
 800a692:	e7b9      	b.n	800a608 <_dtoa_r+0x9f0>
 800a694:	2201      	movs	r2, #1
 800a696:	e7e2      	b.n	800a65e <_dtoa_r+0xa46>
 800a698:	f1b9 0f00 	cmp.w	r9, #0
 800a69c:	db06      	blt.n	800a6ac <_dtoa_r+0xa94>
 800a69e:	9905      	ldr	r1, [sp, #20]
 800a6a0:	ea41 0909 	orr.w	r9, r1, r9
 800a6a4:	9906      	ldr	r1, [sp, #24]
 800a6a6:	ea59 0101 	orrs.w	r1, r9, r1
 800a6aa:	d120      	bne.n	800a6ee <_dtoa_r+0xad6>
 800a6ac:	2a00      	cmp	r2, #0
 800a6ae:	ddec      	ble.n	800a68a <_dtoa_r+0xa72>
 800a6b0:	4659      	mov	r1, fp
 800a6b2:	2201      	movs	r2, #1
 800a6b4:	4620      	mov	r0, r4
 800a6b6:	9301      	str	r3, [sp, #4]
 800a6b8:	f000 fac6 	bl	800ac48 <__lshift>
 800a6bc:	4631      	mov	r1, r6
 800a6be:	4683      	mov	fp, r0
 800a6c0:	f000 fb2e 	bl	800ad20 <__mcmp>
 800a6c4:	2800      	cmp	r0, #0
 800a6c6:	9b01      	ldr	r3, [sp, #4]
 800a6c8:	dc02      	bgt.n	800a6d0 <_dtoa_r+0xab8>
 800a6ca:	d1de      	bne.n	800a68a <_dtoa_r+0xa72>
 800a6cc:	07da      	lsls	r2, r3, #31
 800a6ce:	d5dc      	bpl.n	800a68a <_dtoa_r+0xa72>
 800a6d0:	2b39      	cmp	r3, #57	; 0x39
 800a6d2:	d1d8      	bne.n	800a686 <_dtoa_r+0xa6e>
 800a6d4:	9a02      	ldr	r2, [sp, #8]
 800a6d6:	2339      	movs	r3, #57	; 0x39
 800a6d8:	7013      	strb	r3, [r2, #0]
 800a6da:	462b      	mov	r3, r5
 800a6dc:	461d      	mov	r5, r3
 800a6de:	3b01      	subs	r3, #1
 800a6e0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a6e4:	2a39      	cmp	r2, #57	; 0x39
 800a6e6:	d050      	beq.n	800a78a <_dtoa_r+0xb72>
 800a6e8:	3201      	adds	r2, #1
 800a6ea:	701a      	strb	r2, [r3, #0]
 800a6ec:	e745      	b.n	800a57a <_dtoa_r+0x962>
 800a6ee:	2a00      	cmp	r2, #0
 800a6f0:	dd03      	ble.n	800a6fa <_dtoa_r+0xae2>
 800a6f2:	2b39      	cmp	r3, #57	; 0x39
 800a6f4:	d0ee      	beq.n	800a6d4 <_dtoa_r+0xabc>
 800a6f6:	3301      	adds	r3, #1
 800a6f8:	e7c7      	b.n	800a68a <_dtoa_r+0xa72>
 800a6fa:	9a01      	ldr	r2, [sp, #4]
 800a6fc:	9907      	ldr	r1, [sp, #28]
 800a6fe:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a702:	428a      	cmp	r2, r1
 800a704:	d02a      	beq.n	800a75c <_dtoa_r+0xb44>
 800a706:	4659      	mov	r1, fp
 800a708:	2300      	movs	r3, #0
 800a70a:	220a      	movs	r2, #10
 800a70c:	4620      	mov	r0, r4
 800a70e:	f000 f8eb 	bl	800a8e8 <__multadd>
 800a712:	45b8      	cmp	r8, r7
 800a714:	4683      	mov	fp, r0
 800a716:	f04f 0300 	mov.w	r3, #0
 800a71a:	f04f 020a 	mov.w	r2, #10
 800a71e:	4641      	mov	r1, r8
 800a720:	4620      	mov	r0, r4
 800a722:	d107      	bne.n	800a734 <_dtoa_r+0xb1c>
 800a724:	f000 f8e0 	bl	800a8e8 <__multadd>
 800a728:	4680      	mov	r8, r0
 800a72a:	4607      	mov	r7, r0
 800a72c:	9b01      	ldr	r3, [sp, #4]
 800a72e:	3301      	adds	r3, #1
 800a730:	9301      	str	r3, [sp, #4]
 800a732:	e775      	b.n	800a620 <_dtoa_r+0xa08>
 800a734:	f000 f8d8 	bl	800a8e8 <__multadd>
 800a738:	4639      	mov	r1, r7
 800a73a:	4680      	mov	r8, r0
 800a73c:	2300      	movs	r3, #0
 800a73e:	220a      	movs	r2, #10
 800a740:	4620      	mov	r0, r4
 800a742:	f000 f8d1 	bl	800a8e8 <__multadd>
 800a746:	4607      	mov	r7, r0
 800a748:	e7f0      	b.n	800a72c <_dtoa_r+0xb14>
 800a74a:	f1b9 0f00 	cmp.w	r9, #0
 800a74e:	9a00      	ldr	r2, [sp, #0]
 800a750:	bfcc      	ite	gt
 800a752:	464d      	movgt	r5, r9
 800a754:	2501      	movle	r5, #1
 800a756:	4415      	add	r5, r2
 800a758:	f04f 0800 	mov.w	r8, #0
 800a75c:	4659      	mov	r1, fp
 800a75e:	2201      	movs	r2, #1
 800a760:	4620      	mov	r0, r4
 800a762:	9301      	str	r3, [sp, #4]
 800a764:	f000 fa70 	bl	800ac48 <__lshift>
 800a768:	4631      	mov	r1, r6
 800a76a:	4683      	mov	fp, r0
 800a76c:	f000 fad8 	bl	800ad20 <__mcmp>
 800a770:	2800      	cmp	r0, #0
 800a772:	dcb2      	bgt.n	800a6da <_dtoa_r+0xac2>
 800a774:	d102      	bne.n	800a77c <_dtoa_r+0xb64>
 800a776:	9b01      	ldr	r3, [sp, #4]
 800a778:	07db      	lsls	r3, r3, #31
 800a77a:	d4ae      	bmi.n	800a6da <_dtoa_r+0xac2>
 800a77c:	462b      	mov	r3, r5
 800a77e:	461d      	mov	r5, r3
 800a780:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a784:	2a30      	cmp	r2, #48	; 0x30
 800a786:	d0fa      	beq.n	800a77e <_dtoa_r+0xb66>
 800a788:	e6f7      	b.n	800a57a <_dtoa_r+0x962>
 800a78a:	9a00      	ldr	r2, [sp, #0]
 800a78c:	429a      	cmp	r2, r3
 800a78e:	d1a5      	bne.n	800a6dc <_dtoa_r+0xac4>
 800a790:	f10a 0a01 	add.w	sl, sl, #1
 800a794:	2331      	movs	r3, #49	; 0x31
 800a796:	e779      	b.n	800a68c <_dtoa_r+0xa74>
 800a798:	4b13      	ldr	r3, [pc, #76]	; (800a7e8 <_dtoa_r+0xbd0>)
 800a79a:	f7ff baaf 	b.w	8009cfc <_dtoa_r+0xe4>
 800a79e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	f47f aa86 	bne.w	8009cb2 <_dtoa_r+0x9a>
 800a7a6:	4b11      	ldr	r3, [pc, #68]	; (800a7ec <_dtoa_r+0xbd4>)
 800a7a8:	f7ff baa8 	b.w	8009cfc <_dtoa_r+0xe4>
 800a7ac:	f1b9 0f00 	cmp.w	r9, #0
 800a7b0:	dc03      	bgt.n	800a7ba <_dtoa_r+0xba2>
 800a7b2:	9b05      	ldr	r3, [sp, #20]
 800a7b4:	2b02      	cmp	r3, #2
 800a7b6:	f73f aec9 	bgt.w	800a54c <_dtoa_r+0x934>
 800a7ba:	9d00      	ldr	r5, [sp, #0]
 800a7bc:	4631      	mov	r1, r6
 800a7be:	4658      	mov	r0, fp
 800a7c0:	f7ff f99e 	bl	8009b00 <quorem>
 800a7c4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a7c8:	f805 3b01 	strb.w	r3, [r5], #1
 800a7cc:	9a00      	ldr	r2, [sp, #0]
 800a7ce:	1aaa      	subs	r2, r5, r2
 800a7d0:	4591      	cmp	r9, r2
 800a7d2:	ddba      	ble.n	800a74a <_dtoa_r+0xb32>
 800a7d4:	4659      	mov	r1, fp
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	220a      	movs	r2, #10
 800a7da:	4620      	mov	r0, r4
 800a7dc:	f000 f884 	bl	800a8e8 <__multadd>
 800a7e0:	4683      	mov	fp, r0
 800a7e2:	e7eb      	b.n	800a7bc <_dtoa_r+0xba4>
 800a7e4:	0800ceef 	.word	0x0800ceef
 800a7e8:	0800ce48 	.word	0x0800ce48
 800a7ec:	0800ce6c 	.word	0x0800ce6c

0800a7f0 <_localeconv_r>:
 800a7f0:	4800      	ldr	r0, [pc, #0]	; (800a7f4 <_localeconv_r+0x4>)
 800a7f2:	4770      	bx	lr
 800a7f4:	20000178 	.word	0x20000178

0800a7f8 <malloc>:
 800a7f8:	4b02      	ldr	r3, [pc, #8]	; (800a804 <malloc+0xc>)
 800a7fa:	4601      	mov	r1, r0
 800a7fc:	6818      	ldr	r0, [r3, #0]
 800a7fe:	f000 bbef 	b.w	800afe0 <_malloc_r>
 800a802:	bf00      	nop
 800a804:	20000024 	.word	0x20000024

0800a808 <memcpy>:
 800a808:	440a      	add	r2, r1
 800a80a:	4291      	cmp	r1, r2
 800a80c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a810:	d100      	bne.n	800a814 <memcpy+0xc>
 800a812:	4770      	bx	lr
 800a814:	b510      	push	{r4, lr}
 800a816:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a81a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a81e:	4291      	cmp	r1, r2
 800a820:	d1f9      	bne.n	800a816 <memcpy+0xe>
 800a822:	bd10      	pop	{r4, pc}

0800a824 <_Balloc>:
 800a824:	b570      	push	{r4, r5, r6, lr}
 800a826:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a828:	4604      	mov	r4, r0
 800a82a:	460d      	mov	r5, r1
 800a82c:	b976      	cbnz	r6, 800a84c <_Balloc+0x28>
 800a82e:	2010      	movs	r0, #16
 800a830:	f7ff ffe2 	bl	800a7f8 <malloc>
 800a834:	4602      	mov	r2, r0
 800a836:	6260      	str	r0, [r4, #36]	; 0x24
 800a838:	b920      	cbnz	r0, 800a844 <_Balloc+0x20>
 800a83a:	4b18      	ldr	r3, [pc, #96]	; (800a89c <_Balloc+0x78>)
 800a83c:	4818      	ldr	r0, [pc, #96]	; (800a8a0 <_Balloc+0x7c>)
 800a83e:	2166      	movs	r1, #102	; 0x66
 800a840:	f000 fc38 	bl	800b0b4 <__assert_func>
 800a844:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a848:	6006      	str	r6, [r0, #0]
 800a84a:	60c6      	str	r6, [r0, #12]
 800a84c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a84e:	68f3      	ldr	r3, [r6, #12]
 800a850:	b183      	cbz	r3, 800a874 <_Balloc+0x50>
 800a852:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a854:	68db      	ldr	r3, [r3, #12]
 800a856:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a85a:	b9b8      	cbnz	r0, 800a88c <_Balloc+0x68>
 800a85c:	2101      	movs	r1, #1
 800a85e:	fa01 f605 	lsl.w	r6, r1, r5
 800a862:	1d72      	adds	r2, r6, #5
 800a864:	0092      	lsls	r2, r2, #2
 800a866:	4620      	mov	r0, r4
 800a868:	f000 fb5a 	bl	800af20 <_calloc_r>
 800a86c:	b160      	cbz	r0, 800a888 <_Balloc+0x64>
 800a86e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a872:	e00e      	b.n	800a892 <_Balloc+0x6e>
 800a874:	2221      	movs	r2, #33	; 0x21
 800a876:	2104      	movs	r1, #4
 800a878:	4620      	mov	r0, r4
 800a87a:	f000 fb51 	bl	800af20 <_calloc_r>
 800a87e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a880:	60f0      	str	r0, [r6, #12]
 800a882:	68db      	ldr	r3, [r3, #12]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d1e4      	bne.n	800a852 <_Balloc+0x2e>
 800a888:	2000      	movs	r0, #0
 800a88a:	bd70      	pop	{r4, r5, r6, pc}
 800a88c:	6802      	ldr	r2, [r0, #0]
 800a88e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a892:	2300      	movs	r3, #0
 800a894:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a898:	e7f7      	b.n	800a88a <_Balloc+0x66>
 800a89a:	bf00      	nop
 800a89c:	0800ce79 	.word	0x0800ce79
 800a8a0:	0800cf00 	.word	0x0800cf00

0800a8a4 <_Bfree>:
 800a8a4:	b570      	push	{r4, r5, r6, lr}
 800a8a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a8a8:	4605      	mov	r5, r0
 800a8aa:	460c      	mov	r4, r1
 800a8ac:	b976      	cbnz	r6, 800a8cc <_Bfree+0x28>
 800a8ae:	2010      	movs	r0, #16
 800a8b0:	f7ff ffa2 	bl	800a7f8 <malloc>
 800a8b4:	4602      	mov	r2, r0
 800a8b6:	6268      	str	r0, [r5, #36]	; 0x24
 800a8b8:	b920      	cbnz	r0, 800a8c4 <_Bfree+0x20>
 800a8ba:	4b09      	ldr	r3, [pc, #36]	; (800a8e0 <_Bfree+0x3c>)
 800a8bc:	4809      	ldr	r0, [pc, #36]	; (800a8e4 <_Bfree+0x40>)
 800a8be:	218a      	movs	r1, #138	; 0x8a
 800a8c0:	f000 fbf8 	bl	800b0b4 <__assert_func>
 800a8c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a8c8:	6006      	str	r6, [r0, #0]
 800a8ca:	60c6      	str	r6, [r0, #12]
 800a8cc:	b13c      	cbz	r4, 800a8de <_Bfree+0x3a>
 800a8ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a8d0:	6862      	ldr	r2, [r4, #4]
 800a8d2:	68db      	ldr	r3, [r3, #12]
 800a8d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a8d8:	6021      	str	r1, [r4, #0]
 800a8da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a8de:	bd70      	pop	{r4, r5, r6, pc}
 800a8e0:	0800ce79 	.word	0x0800ce79
 800a8e4:	0800cf00 	.word	0x0800cf00

0800a8e8 <__multadd>:
 800a8e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8ec:	690e      	ldr	r6, [r1, #16]
 800a8ee:	4607      	mov	r7, r0
 800a8f0:	4698      	mov	r8, r3
 800a8f2:	460c      	mov	r4, r1
 800a8f4:	f101 0014 	add.w	r0, r1, #20
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	6805      	ldr	r5, [r0, #0]
 800a8fc:	b2a9      	uxth	r1, r5
 800a8fe:	fb02 8101 	mla	r1, r2, r1, r8
 800a902:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a906:	0c2d      	lsrs	r5, r5, #16
 800a908:	fb02 c505 	mla	r5, r2, r5, ip
 800a90c:	b289      	uxth	r1, r1
 800a90e:	3301      	adds	r3, #1
 800a910:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a914:	429e      	cmp	r6, r3
 800a916:	f840 1b04 	str.w	r1, [r0], #4
 800a91a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a91e:	dcec      	bgt.n	800a8fa <__multadd+0x12>
 800a920:	f1b8 0f00 	cmp.w	r8, #0
 800a924:	d022      	beq.n	800a96c <__multadd+0x84>
 800a926:	68a3      	ldr	r3, [r4, #8]
 800a928:	42b3      	cmp	r3, r6
 800a92a:	dc19      	bgt.n	800a960 <__multadd+0x78>
 800a92c:	6861      	ldr	r1, [r4, #4]
 800a92e:	4638      	mov	r0, r7
 800a930:	3101      	adds	r1, #1
 800a932:	f7ff ff77 	bl	800a824 <_Balloc>
 800a936:	4605      	mov	r5, r0
 800a938:	b928      	cbnz	r0, 800a946 <__multadd+0x5e>
 800a93a:	4602      	mov	r2, r0
 800a93c:	4b0d      	ldr	r3, [pc, #52]	; (800a974 <__multadd+0x8c>)
 800a93e:	480e      	ldr	r0, [pc, #56]	; (800a978 <__multadd+0x90>)
 800a940:	21b5      	movs	r1, #181	; 0xb5
 800a942:	f000 fbb7 	bl	800b0b4 <__assert_func>
 800a946:	6922      	ldr	r2, [r4, #16]
 800a948:	3202      	adds	r2, #2
 800a94a:	f104 010c 	add.w	r1, r4, #12
 800a94e:	0092      	lsls	r2, r2, #2
 800a950:	300c      	adds	r0, #12
 800a952:	f7ff ff59 	bl	800a808 <memcpy>
 800a956:	4621      	mov	r1, r4
 800a958:	4638      	mov	r0, r7
 800a95a:	f7ff ffa3 	bl	800a8a4 <_Bfree>
 800a95e:	462c      	mov	r4, r5
 800a960:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a964:	3601      	adds	r6, #1
 800a966:	f8c3 8014 	str.w	r8, [r3, #20]
 800a96a:	6126      	str	r6, [r4, #16]
 800a96c:	4620      	mov	r0, r4
 800a96e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a972:	bf00      	nop
 800a974:	0800ceef 	.word	0x0800ceef
 800a978:	0800cf00 	.word	0x0800cf00

0800a97c <__hi0bits>:
 800a97c:	0c03      	lsrs	r3, r0, #16
 800a97e:	041b      	lsls	r3, r3, #16
 800a980:	b9d3      	cbnz	r3, 800a9b8 <__hi0bits+0x3c>
 800a982:	0400      	lsls	r0, r0, #16
 800a984:	2310      	movs	r3, #16
 800a986:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a98a:	bf04      	itt	eq
 800a98c:	0200      	lsleq	r0, r0, #8
 800a98e:	3308      	addeq	r3, #8
 800a990:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a994:	bf04      	itt	eq
 800a996:	0100      	lsleq	r0, r0, #4
 800a998:	3304      	addeq	r3, #4
 800a99a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a99e:	bf04      	itt	eq
 800a9a0:	0080      	lsleq	r0, r0, #2
 800a9a2:	3302      	addeq	r3, #2
 800a9a4:	2800      	cmp	r0, #0
 800a9a6:	db05      	blt.n	800a9b4 <__hi0bits+0x38>
 800a9a8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a9ac:	f103 0301 	add.w	r3, r3, #1
 800a9b0:	bf08      	it	eq
 800a9b2:	2320      	moveq	r3, #32
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	4770      	bx	lr
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	e7e4      	b.n	800a986 <__hi0bits+0xa>

0800a9bc <__lo0bits>:
 800a9bc:	6803      	ldr	r3, [r0, #0]
 800a9be:	f013 0207 	ands.w	r2, r3, #7
 800a9c2:	4601      	mov	r1, r0
 800a9c4:	d00b      	beq.n	800a9de <__lo0bits+0x22>
 800a9c6:	07da      	lsls	r2, r3, #31
 800a9c8:	d424      	bmi.n	800aa14 <__lo0bits+0x58>
 800a9ca:	0798      	lsls	r0, r3, #30
 800a9cc:	bf49      	itett	mi
 800a9ce:	085b      	lsrmi	r3, r3, #1
 800a9d0:	089b      	lsrpl	r3, r3, #2
 800a9d2:	2001      	movmi	r0, #1
 800a9d4:	600b      	strmi	r3, [r1, #0]
 800a9d6:	bf5c      	itt	pl
 800a9d8:	600b      	strpl	r3, [r1, #0]
 800a9da:	2002      	movpl	r0, #2
 800a9dc:	4770      	bx	lr
 800a9de:	b298      	uxth	r0, r3
 800a9e0:	b9b0      	cbnz	r0, 800aa10 <__lo0bits+0x54>
 800a9e2:	0c1b      	lsrs	r3, r3, #16
 800a9e4:	2010      	movs	r0, #16
 800a9e6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a9ea:	bf04      	itt	eq
 800a9ec:	0a1b      	lsreq	r3, r3, #8
 800a9ee:	3008      	addeq	r0, #8
 800a9f0:	071a      	lsls	r2, r3, #28
 800a9f2:	bf04      	itt	eq
 800a9f4:	091b      	lsreq	r3, r3, #4
 800a9f6:	3004      	addeq	r0, #4
 800a9f8:	079a      	lsls	r2, r3, #30
 800a9fa:	bf04      	itt	eq
 800a9fc:	089b      	lsreq	r3, r3, #2
 800a9fe:	3002      	addeq	r0, #2
 800aa00:	07da      	lsls	r2, r3, #31
 800aa02:	d403      	bmi.n	800aa0c <__lo0bits+0x50>
 800aa04:	085b      	lsrs	r3, r3, #1
 800aa06:	f100 0001 	add.w	r0, r0, #1
 800aa0a:	d005      	beq.n	800aa18 <__lo0bits+0x5c>
 800aa0c:	600b      	str	r3, [r1, #0]
 800aa0e:	4770      	bx	lr
 800aa10:	4610      	mov	r0, r2
 800aa12:	e7e8      	b.n	800a9e6 <__lo0bits+0x2a>
 800aa14:	2000      	movs	r0, #0
 800aa16:	4770      	bx	lr
 800aa18:	2020      	movs	r0, #32
 800aa1a:	4770      	bx	lr

0800aa1c <__i2b>:
 800aa1c:	b510      	push	{r4, lr}
 800aa1e:	460c      	mov	r4, r1
 800aa20:	2101      	movs	r1, #1
 800aa22:	f7ff feff 	bl	800a824 <_Balloc>
 800aa26:	4602      	mov	r2, r0
 800aa28:	b928      	cbnz	r0, 800aa36 <__i2b+0x1a>
 800aa2a:	4b05      	ldr	r3, [pc, #20]	; (800aa40 <__i2b+0x24>)
 800aa2c:	4805      	ldr	r0, [pc, #20]	; (800aa44 <__i2b+0x28>)
 800aa2e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800aa32:	f000 fb3f 	bl	800b0b4 <__assert_func>
 800aa36:	2301      	movs	r3, #1
 800aa38:	6144      	str	r4, [r0, #20]
 800aa3a:	6103      	str	r3, [r0, #16]
 800aa3c:	bd10      	pop	{r4, pc}
 800aa3e:	bf00      	nop
 800aa40:	0800ceef 	.word	0x0800ceef
 800aa44:	0800cf00 	.word	0x0800cf00

0800aa48 <__multiply>:
 800aa48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa4c:	4614      	mov	r4, r2
 800aa4e:	690a      	ldr	r2, [r1, #16]
 800aa50:	6923      	ldr	r3, [r4, #16]
 800aa52:	429a      	cmp	r2, r3
 800aa54:	bfb8      	it	lt
 800aa56:	460b      	movlt	r3, r1
 800aa58:	460d      	mov	r5, r1
 800aa5a:	bfbc      	itt	lt
 800aa5c:	4625      	movlt	r5, r4
 800aa5e:	461c      	movlt	r4, r3
 800aa60:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800aa64:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800aa68:	68ab      	ldr	r3, [r5, #8]
 800aa6a:	6869      	ldr	r1, [r5, #4]
 800aa6c:	eb0a 0709 	add.w	r7, sl, r9
 800aa70:	42bb      	cmp	r3, r7
 800aa72:	b085      	sub	sp, #20
 800aa74:	bfb8      	it	lt
 800aa76:	3101      	addlt	r1, #1
 800aa78:	f7ff fed4 	bl	800a824 <_Balloc>
 800aa7c:	b930      	cbnz	r0, 800aa8c <__multiply+0x44>
 800aa7e:	4602      	mov	r2, r0
 800aa80:	4b42      	ldr	r3, [pc, #264]	; (800ab8c <__multiply+0x144>)
 800aa82:	4843      	ldr	r0, [pc, #268]	; (800ab90 <__multiply+0x148>)
 800aa84:	f240 115d 	movw	r1, #349	; 0x15d
 800aa88:	f000 fb14 	bl	800b0b4 <__assert_func>
 800aa8c:	f100 0614 	add.w	r6, r0, #20
 800aa90:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800aa94:	4633      	mov	r3, r6
 800aa96:	2200      	movs	r2, #0
 800aa98:	4543      	cmp	r3, r8
 800aa9a:	d31e      	bcc.n	800aada <__multiply+0x92>
 800aa9c:	f105 0c14 	add.w	ip, r5, #20
 800aaa0:	f104 0314 	add.w	r3, r4, #20
 800aaa4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800aaa8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800aaac:	9202      	str	r2, [sp, #8]
 800aaae:	ebac 0205 	sub.w	r2, ip, r5
 800aab2:	3a15      	subs	r2, #21
 800aab4:	f022 0203 	bic.w	r2, r2, #3
 800aab8:	3204      	adds	r2, #4
 800aaba:	f105 0115 	add.w	r1, r5, #21
 800aabe:	458c      	cmp	ip, r1
 800aac0:	bf38      	it	cc
 800aac2:	2204      	movcc	r2, #4
 800aac4:	9201      	str	r2, [sp, #4]
 800aac6:	9a02      	ldr	r2, [sp, #8]
 800aac8:	9303      	str	r3, [sp, #12]
 800aaca:	429a      	cmp	r2, r3
 800aacc:	d808      	bhi.n	800aae0 <__multiply+0x98>
 800aace:	2f00      	cmp	r7, #0
 800aad0:	dc55      	bgt.n	800ab7e <__multiply+0x136>
 800aad2:	6107      	str	r7, [r0, #16]
 800aad4:	b005      	add	sp, #20
 800aad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aada:	f843 2b04 	str.w	r2, [r3], #4
 800aade:	e7db      	b.n	800aa98 <__multiply+0x50>
 800aae0:	f8b3 a000 	ldrh.w	sl, [r3]
 800aae4:	f1ba 0f00 	cmp.w	sl, #0
 800aae8:	d020      	beq.n	800ab2c <__multiply+0xe4>
 800aaea:	f105 0e14 	add.w	lr, r5, #20
 800aaee:	46b1      	mov	r9, r6
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	f85e 4b04 	ldr.w	r4, [lr], #4
 800aaf6:	f8d9 b000 	ldr.w	fp, [r9]
 800aafa:	b2a1      	uxth	r1, r4
 800aafc:	fa1f fb8b 	uxth.w	fp, fp
 800ab00:	fb0a b101 	mla	r1, sl, r1, fp
 800ab04:	4411      	add	r1, r2
 800ab06:	f8d9 2000 	ldr.w	r2, [r9]
 800ab0a:	0c24      	lsrs	r4, r4, #16
 800ab0c:	0c12      	lsrs	r2, r2, #16
 800ab0e:	fb0a 2404 	mla	r4, sl, r4, r2
 800ab12:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800ab16:	b289      	uxth	r1, r1
 800ab18:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ab1c:	45f4      	cmp	ip, lr
 800ab1e:	f849 1b04 	str.w	r1, [r9], #4
 800ab22:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800ab26:	d8e4      	bhi.n	800aaf2 <__multiply+0xaa>
 800ab28:	9901      	ldr	r1, [sp, #4]
 800ab2a:	5072      	str	r2, [r6, r1]
 800ab2c:	9a03      	ldr	r2, [sp, #12]
 800ab2e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ab32:	3304      	adds	r3, #4
 800ab34:	f1b9 0f00 	cmp.w	r9, #0
 800ab38:	d01f      	beq.n	800ab7a <__multiply+0x132>
 800ab3a:	6834      	ldr	r4, [r6, #0]
 800ab3c:	f105 0114 	add.w	r1, r5, #20
 800ab40:	46b6      	mov	lr, r6
 800ab42:	f04f 0a00 	mov.w	sl, #0
 800ab46:	880a      	ldrh	r2, [r1, #0]
 800ab48:	f8be b002 	ldrh.w	fp, [lr, #2]
 800ab4c:	fb09 b202 	mla	r2, r9, r2, fp
 800ab50:	4492      	add	sl, r2
 800ab52:	b2a4      	uxth	r4, r4
 800ab54:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800ab58:	f84e 4b04 	str.w	r4, [lr], #4
 800ab5c:	f851 4b04 	ldr.w	r4, [r1], #4
 800ab60:	f8be 2000 	ldrh.w	r2, [lr]
 800ab64:	0c24      	lsrs	r4, r4, #16
 800ab66:	fb09 2404 	mla	r4, r9, r4, r2
 800ab6a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800ab6e:	458c      	cmp	ip, r1
 800ab70:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ab74:	d8e7      	bhi.n	800ab46 <__multiply+0xfe>
 800ab76:	9a01      	ldr	r2, [sp, #4]
 800ab78:	50b4      	str	r4, [r6, r2]
 800ab7a:	3604      	adds	r6, #4
 800ab7c:	e7a3      	b.n	800aac6 <__multiply+0x7e>
 800ab7e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d1a5      	bne.n	800aad2 <__multiply+0x8a>
 800ab86:	3f01      	subs	r7, #1
 800ab88:	e7a1      	b.n	800aace <__multiply+0x86>
 800ab8a:	bf00      	nop
 800ab8c:	0800ceef 	.word	0x0800ceef
 800ab90:	0800cf00 	.word	0x0800cf00

0800ab94 <__pow5mult>:
 800ab94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab98:	4615      	mov	r5, r2
 800ab9a:	f012 0203 	ands.w	r2, r2, #3
 800ab9e:	4606      	mov	r6, r0
 800aba0:	460f      	mov	r7, r1
 800aba2:	d007      	beq.n	800abb4 <__pow5mult+0x20>
 800aba4:	4c25      	ldr	r4, [pc, #148]	; (800ac3c <__pow5mult+0xa8>)
 800aba6:	3a01      	subs	r2, #1
 800aba8:	2300      	movs	r3, #0
 800abaa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800abae:	f7ff fe9b 	bl	800a8e8 <__multadd>
 800abb2:	4607      	mov	r7, r0
 800abb4:	10ad      	asrs	r5, r5, #2
 800abb6:	d03d      	beq.n	800ac34 <__pow5mult+0xa0>
 800abb8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800abba:	b97c      	cbnz	r4, 800abdc <__pow5mult+0x48>
 800abbc:	2010      	movs	r0, #16
 800abbe:	f7ff fe1b 	bl	800a7f8 <malloc>
 800abc2:	4602      	mov	r2, r0
 800abc4:	6270      	str	r0, [r6, #36]	; 0x24
 800abc6:	b928      	cbnz	r0, 800abd4 <__pow5mult+0x40>
 800abc8:	4b1d      	ldr	r3, [pc, #116]	; (800ac40 <__pow5mult+0xac>)
 800abca:	481e      	ldr	r0, [pc, #120]	; (800ac44 <__pow5mult+0xb0>)
 800abcc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800abd0:	f000 fa70 	bl	800b0b4 <__assert_func>
 800abd4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800abd8:	6004      	str	r4, [r0, #0]
 800abda:	60c4      	str	r4, [r0, #12]
 800abdc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800abe0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800abe4:	b94c      	cbnz	r4, 800abfa <__pow5mult+0x66>
 800abe6:	f240 2171 	movw	r1, #625	; 0x271
 800abea:	4630      	mov	r0, r6
 800abec:	f7ff ff16 	bl	800aa1c <__i2b>
 800abf0:	2300      	movs	r3, #0
 800abf2:	f8c8 0008 	str.w	r0, [r8, #8]
 800abf6:	4604      	mov	r4, r0
 800abf8:	6003      	str	r3, [r0, #0]
 800abfa:	f04f 0900 	mov.w	r9, #0
 800abfe:	07eb      	lsls	r3, r5, #31
 800ac00:	d50a      	bpl.n	800ac18 <__pow5mult+0x84>
 800ac02:	4639      	mov	r1, r7
 800ac04:	4622      	mov	r2, r4
 800ac06:	4630      	mov	r0, r6
 800ac08:	f7ff ff1e 	bl	800aa48 <__multiply>
 800ac0c:	4639      	mov	r1, r7
 800ac0e:	4680      	mov	r8, r0
 800ac10:	4630      	mov	r0, r6
 800ac12:	f7ff fe47 	bl	800a8a4 <_Bfree>
 800ac16:	4647      	mov	r7, r8
 800ac18:	106d      	asrs	r5, r5, #1
 800ac1a:	d00b      	beq.n	800ac34 <__pow5mult+0xa0>
 800ac1c:	6820      	ldr	r0, [r4, #0]
 800ac1e:	b938      	cbnz	r0, 800ac30 <__pow5mult+0x9c>
 800ac20:	4622      	mov	r2, r4
 800ac22:	4621      	mov	r1, r4
 800ac24:	4630      	mov	r0, r6
 800ac26:	f7ff ff0f 	bl	800aa48 <__multiply>
 800ac2a:	6020      	str	r0, [r4, #0]
 800ac2c:	f8c0 9000 	str.w	r9, [r0]
 800ac30:	4604      	mov	r4, r0
 800ac32:	e7e4      	b.n	800abfe <__pow5mult+0x6a>
 800ac34:	4638      	mov	r0, r7
 800ac36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac3a:	bf00      	nop
 800ac3c:	0800d050 	.word	0x0800d050
 800ac40:	0800ce79 	.word	0x0800ce79
 800ac44:	0800cf00 	.word	0x0800cf00

0800ac48 <__lshift>:
 800ac48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac4c:	460c      	mov	r4, r1
 800ac4e:	6849      	ldr	r1, [r1, #4]
 800ac50:	6923      	ldr	r3, [r4, #16]
 800ac52:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ac56:	68a3      	ldr	r3, [r4, #8]
 800ac58:	4607      	mov	r7, r0
 800ac5a:	4691      	mov	r9, r2
 800ac5c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ac60:	f108 0601 	add.w	r6, r8, #1
 800ac64:	42b3      	cmp	r3, r6
 800ac66:	db0b      	blt.n	800ac80 <__lshift+0x38>
 800ac68:	4638      	mov	r0, r7
 800ac6a:	f7ff fddb 	bl	800a824 <_Balloc>
 800ac6e:	4605      	mov	r5, r0
 800ac70:	b948      	cbnz	r0, 800ac86 <__lshift+0x3e>
 800ac72:	4602      	mov	r2, r0
 800ac74:	4b28      	ldr	r3, [pc, #160]	; (800ad18 <__lshift+0xd0>)
 800ac76:	4829      	ldr	r0, [pc, #164]	; (800ad1c <__lshift+0xd4>)
 800ac78:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ac7c:	f000 fa1a 	bl	800b0b4 <__assert_func>
 800ac80:	3101      	adds	r1, #1
 800ac82:	005b      	lsls	r3, r3, #1
 800ac84:	e7ee      	b.n	800ac64 <__lshift+0x1c>
 800ac86:	2300      	movs	r3, #0
 800ac88:	f100 0114 	add.w	r1, r0, #20
 800ac8c:	f100 0210 	add.w	r2, r0, #16
 800ac90:	4618      	mov	r0, r3
 800ac92:	4553      	cmp	r3, sl
 800ac94:	db33      	blt.n	800acfe <__lshift+0xb6>
 800ac96:	6920      	ldr	r0, [r4, #16]
 800ac98:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ac9c:	f104 0314 	add.w	r3, r4, #20
 800aca0:	f019 091f 	ands.w	r9, r9, #31
 800aca4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aca8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800acac:	d02b      	beq.n	800ad06 <__lshift+0xbe>
 800acae:	f1c9 0e20 	rsb	lr, r9, #32
 800acb2:	468a      	mov	sl, r1
 800acb4:	2200      	movs	r2, #0
 800acb6:	6818      	ldr	r0, [r3, #0]
 800acb8:	fa00 f009 	lsl.w	r0, r0, r9
 800acbc:	4302      	orrs	r2, r0
 800acbe:	f84a 2b04 	str.w	r2, [sl], #4
 800acc2:	f853 2b04 	ldr.w	r2, [r3], #4
 800acc6:	459c      	cmp	ip, r3
 800acc8:	fa22 f20e 	lsr.w	r2, r2, lr
 800accc:	d8f3      	bhi.n	800acb6 <__lshift+0x6e>
 800acce:	ebac 0304 	sub.w	r3, ip, r4
 800acd2:	3b15      	subs	r3, #21
 800acd4:	f023 0303 	bic.w	r3, r3, #3
 800acd8:	3304      	adds	r3, #4
 800acda:	f104 0015 	add.w	r0, r4, #21
 800acde:	4584      	cmp	ip, r0
 800ace0:	bf38      	it	cc
 800ace2:	2304      	movcc	r3, #4
 800ace4:	50ca      	str	r2, [r1, r3]
 800ace6:	b10a      	cbz	r2, 800acec <__lshift+0xa4>
 800ace8:	f108 0602 	add.w	r6, r8, #2
 800acec:	3e01      	subs	r6, #1
 800acee:	4638      	mov	r0, r7
 800acf0:	612e      	str	r6, [r5, #16]
 800acf2:	4621      	mov	r1, r4
 800acf4:	f7ff fdd6 	bl	800a8a4 <_Bfree>
 800acf8:	4628      	mov	r0, r5
 800acfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acfe:	f842 0f04 	str.w	r0, [r2, #4]!
 800ad02:	3301      	adds	r3, #1
 800ad04:	e7c5      	b.n	800ac92 <__lshift+0x4a>
 800ad06:	3904      	subs	r1, #4
 800ad08:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad0c:	f841 2f04 	str.w	r2, [r1, #4]!
 800ad10:	459c      	cmp	ip, r3
 800ad12:	d8f9      	bhi.n	800ad08 <__lshift+0xc0>
 800ad14:	e7ea      	b.n	800acec <__lshift+0xa4>
 800ad16:	bf00      	nop
 800ad18:	0800ceef 	.word	0x0800ceef
 800ad1c:	0800cf00 	.word	0x0800cf00

0800ad20 <__mcmp>:
 800ad20:	b530      	push	{r4, r5, lr}
 800ad22:	6902      	ldr	r2, [r0, #16]
 800ad24:	690c      	ldr	r4, [r1, #16]
 800ad26:	1b12      	subs	r2, r2, r4
 800ad28:	d10e      	bne.n	800ad48 <__mcmp+0x28>
 800ad2a:	f100 0314 	add.w	r3, r0, #20
 800ad2e:	3114      	adds	r1, #20
 800ad30:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ad34:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ad38:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ad3c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ad40:	42a5      	cmp	r5, r4
 800ad42:	d003      	beq.n	800ad4c <__mcmp+0x2c>
 800ad44:	d305      	bcc.n	800ad52 <__mcmp+0x32>
 800ad46:	2201      	movs	r2, #1
 800ad48:	4610      	mov	r0, r2
 800ad4a:	bd30      	pop	{r4, r5, pc}
 800ad4c:	4283      	cmp	r3, r0
 800ad4e:	d3f3      	bcc.n	800ad38 <__mcmp+0x18>
 800ad50:	e7fa      	b.n	800ad48 <__mcmp+0x28>
 800ad52:	f04f 32ff 	mov.w	r2, #4294967295
 800ad56:	e7f7      	b.n	800ad48 <__mcmp+0x28>

0800ad58 <__mdiff>:
 800ad58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad5c:	460c      	mov	r4, r1
 800ad5e:	4606      	mov	r6, r0
 800ad60:	4611      	mov	r1, r2
 800ad62:	4620      	mov	r0, r4
 800ad64:	4617      	mov	r7, r2
 800ad66:	f7ff ffdb 	bl	800ad20 <__mcmp>
 800ad6a:	1e05      	subs	r5, r0, #0
 800ad6c:	d110      	bne.n	800ad90 <__mdiff+0x38>
 800ad6e:	4629      	mov	r1, r5
 800ad70:	4630      	mov	r0, r6
 800ad72:	f7ff fd57 	bl	800a824 <_Balloc>
 800ad76:	b930      	cbnz	r0, 800ad86 <__mdiff+0x2e>
 800ad78:	4b39      	ldr	r3, [pc, #228]	; (800ae60 <__mdiff+0x108>)
 800ad7a:	4602      	mov	r2, r0
 800ad7c:	f240 2132 	movw	r1, #562	; 0x232
 800ad80:	4838      	ldr	r0, [pc, #224]	; (800ae64 <__mdiff+0x10c>)
 800ad82:	f000 f997 	bl	800b0b4 <__assert_func>
 800ad86:	2301      	movs	r3, #1
 800ad88:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ad8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad90:	bfa4      	itt	ge
 800ad92:	463b      	movge	r3, r7
 800ad94:	4627      	movge	r7, r4
 800ad96:	4630      	mov	r0, r6
 800ad98:	6879      	ldr	r1, [r7, #4]
 800ad9a:	bfa6      	itte	ge
 800ad9c:	461c      	movge	r4, r3
 800ad9e:	2500      	movge	r5, #0
 800ada0:	2501      	movlt	r5, #1
 800ada2:	f7ff fd3f 	bl	800a824 <_Balloc>
 800ada6:	b920      	cbnz	r0, 800adb2 <__mdiff+0x5a>
 800ada8:	4b2d      	ldr	r3, [pc, #180]	; (800ae60 <__mdiff+0x108>)
 800adaa:	4602      	mov	r2, r0
 800adac:	f44f 7110 	mov.w	r1, #576	; 0x240
 800adb0:	e7e6      	b.n	800ad80 <__mdiff+0x28>
 800adb2:	693e      	ldr	r6, [r7, #16]
 800adb4:	60c5      	str	r5, [r0, #12]
 800adb6:	6925      	ldr	r5, [r4, #16]
 800adb8:	f107 0114 	add.w	r1, r7, #20
 800adbc:	f104 0914 	add.w	r9, r4, #20
 800adc0:	f100 0e14 	add.w	lr, r0, #20
 800adc4:	f107 0210 	add.w	r2, r7, #16
 800adc8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800adcc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800add0:	46f2      	mov	sl, lr
 800add2:	2700      	movs	r7, #0
 800add4:	f859 3b04 	ldr.w	r3, [r9], #4
 800add8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800addc:	fa1f f883 	uxth.w	r8, r3
 800ade0:	fa17 f78b 	uxtah	r7, r7, fp
 800ade4:	0c1b      	lsrs	r3, r3, #16
 800ade6:	eba7 0808 	sub.w	r8, r7, r8
 800adea:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800adee:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800adf2:	fa1f f888 	uxth.w	r8, r8
 800adf6:	141f      	asrs	r7, r3, #16
 800adf8:	454d      	cmp	r5, r9
 800adfa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800adfe:	f84a 3b04 	str.w	r3, [sl], #4
 800ae02:	d8e7      	bhi.n	800add4 <__mdiff+0x7c>
 800ae04:	1b2b      	subs	r3, r5, r4
 800ae06:	3b15      	subs	r3, #21
 800ae08:	f023 0303 	bic.w	r3, r3, #3
 800ae0c:	3304      	adds	r3, #4
 800ae0e:	3415      	adds	r4, #21
 800ae10:	42a5      	cmp	r5, r4
 800ae12:	bf38      	it	cc
 800ae14:	2304      	movcc	r3, #4
 800ae16:	4419      	add	r1, r3
 800ae18:	4473      	add	r3, lr
 800ae1a:	469e      	mov	lr, r3
 800ae1c:	460d      	mov	r5, r1
 800ae1e:	4565      	cmp	r5, ip
 800ae20:	d30e      	bcc.n	800ae40 <__mdiff+0xe8>
 800ae22:	f10c 0203 	add.w	r2, ip, #3
 800ae26:	1a52      	subs	r2, r2, r1
 800ae28:	f022 0203 	bic.w	r2, r2, #3
 800ae2c:	3903      	subs	r1, #3
 800ae2e:	458c      	cmp	ip, r1
 800ae30:	bf38      	it	cc
 800ae32:	2200      	movcc	r2, #0
 800ae34:	441a      	add	r2, r3
 800ae36:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ae3a:	b17b      	cbz	r3, 800ae5c <__mdiff+0x104>
 800ae3c:	6106      	str	r6, [r0, #16]
 800ae3e:	e7a5      	b.n	800ad8c <__mdiff+0x34>
 800ae40:	f855 8b04 	ldr.w	r8, [r5], #4
 800ae44:	fa17 f488 	uxtah	r4, r7, r8
 800ae48:	1422      	asrs	r2, r4, #16
 800ae4a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800ae4e:	b2a4      	uxth	r4, r4
 800ae50:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800ae54:	f84e 4b04 	str.w	r4, [lr], #4
 800ae58:	1417      	asrs	r7, r2, #16
 800ae5a:	e7e0      	b.n	800ae1e <__mdiff+0xc6>
 800ae5c:	3e01      	subs	r6, #1
 800ae5e:	e7ea      	b.n	800ae36 <__mdiff+0xde>
 800ae60:	0800ceef 	.word	0x0800ceef
 800ae64:	0800cf00 	.word	0x0800cf00

0800ae68 <__d2b>:
 800ae68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ae6c:	4689      	mov	r9, r1
 800ae6e:	2101      	movs	r1, #1
 800ae70:	ec57 6b10 	vmov	r6, r7, d0
 800ae74:	4690      	mov	r8, r2
 800ae76:	f7ff fcd5 	bl	800a824 <_Balloc>
 800ae7a:	4604      	mov	r4, r0
 800ae7c:	b930      	cbnz	r0, 800ae8c <__d2b+0x24>
 800ae7e:	4602      	mov	r2, r0
 800ae80:	4b25      	ldr	r3, [pc, #148]	; (800af18 <__d2b+0xb0>)
 800ae82:	4826      	ldr	r0, [pc, #152]	; (800af1c <__d2b+0xb4>)
 800ae84:	f240 310a 	movw	r1, #778	; 0x30a
 800ae88:	f000 f914 	bl	800b0b4 <__assert_func>
 800ae8c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ae90:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ae94:	bb35      	cbnz	r5, 800aee4 <__d2b+0x7c>
 800ae96:	2e00      	cmp	r6, #0
 800ae98:	9301      	str	r3, [sp, #4]
 800ae9a:	d028      	beq.n	800aeee <__d2b+0x86>
 800ae9c:	4668      	mov	r0, sp
 800ae9e:	9600      	str	r6, [sp, #0]
 800aea0:	f7ff fd8c 	bl	800a9bc <__lo0bits>
 800aea4:	9900      	ldr	r1, [sp, #0]
 800aea6:	b300      	cbz	r0, 800aeea <__d2b+0x82>
 800aea8:	9a01      	ldr	r2, [sp, #4]
 800aeaa:	f1c0 0320 	rsb	r3, r0, #32
 800aeae:	fa02 f303 	lsl.w	r3, r2, r3
 800aeb2:	430b      	orrs	r3, r1
 800aeb4:	40c2      	lsrs	r2, r0
 800aeb6:	6163      	str	r3, [r4, #20]
 800aeb8:	9201      	str	r2, [sp, #4]
 800aeba:	9b01      	ldr	r3, [sp, #4]
 800aebc:	61a3      	str	r3, [r4, #24]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	bf14      	ite	ne
 800aec2:	2202      	movne	r2, #2
 800aec4:	2201      	moveq	r2, #1
 800aec6:	6122      	str	r2, [r4, #16]
 800aec8:	b1d5      	cbz	r5, 800af00 <__d2b+0x98>
 800aeca:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800aece:	4405      	add	r5, r0
 800aed0:	f8c9 5000 	str.w	r5, [r9]
 800aed4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800aed8:	f8c8 0000 	str.w	r0, [r8]
 800aedc:	4620      	mov	r0, r4
 800aede:	b003      	add	sp, #12
 800aee0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aee4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aee8:	e7d5      	b.n	800ae96 <__d2b+0x2e>
 800aeea:	6161      	str	r1, [r4, #20]
 800aeec:	e7e5      	b.n	800aeba <__d2b+0x52>
 800aeee:	a801      	add	r0, sp, #4
 800aef0:	f7ff fd64 	bl	800a9bc <__lo0bits>
 800aef4:	9b01      	ldr	r3, [sp, #4]
 800aef6:	6163      	str	r3, [r4, #20]
 800aef8:	2201      	movs	r2, #1
 800aefa:	6122      	str	r2, [r4, #16]
 800aefc:	3020      	adds	r0, #32
 800aefe:	e7e3      	b.n	800aec8 <__d2b+0x60>
 800af00:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800af04:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800af08:	f8c9 0000 	str.w	r0, [r9]
 800af0c:	6918      	ldr	r0, [r3, #16]
 800af0e:	f7ff fd35 	bl	800a97c <__hi0bits>
 800af12:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800af16:	e7df      	b.n	800aed8 <__d2b+0x70>
 800af18:	0800ceef 	.word	0x0800ceef
 800af1c:	0800cf00 	.word	0x0800cf00

0800af20 <_calloc_r>:
 800af20:	b513      	push	{r0, r1, r4, lr}
 800af22:	434a      	muls	r2, r1
 800af24:	4611      	mov	r1, r2
 800af26:	9201      	str	r2, [sp, #4]
 800af28:	f000 f85a 	bl	800afe0 <_malloc_r>
 800af2c:	4604      	mov	r4, r0
 800af2e:	b118      	cbz	r0, 800af38 <_calloc_r+0x18>
 800af30:	9a01      	ldr	r2, [sp, #4]
 800af32:	2100      	movs	r1, #0
 800af34:	f7fe f972 	bl	800921c <memset>
 800af38:	4620      	mov	r0, r4
 800af3a:	b002      	add	sp, #8
 800af3c:	bd10      	pop	{r4, pc}
	...

0800af40 <_free_r>:
 800af40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800af42:	2900      	cmp	r1, #0
 800af44:	d048      	beq.n	800afd8 <_free_r+0x98>
 800af46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af4a:	9001      	str	r0, [sp, #4]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	f1a1 0404 	sub.w	r4, r1, #4
 800af52:	bfb8      	it	lt
 800af54:	18e4      	addlt	r4, r4, r3
 800af56:	f000 f8ef 	bl	800b138 <__malloc_lock>
 800af5a:	4a20      	ldr	r2, [pc, #128]	; (800afdc <_free_r+0x9c>)
 800af5c:	9801      	ldr	r0, [sp, #4]
 800af5e:	6813      	ldr	r3, [r2, #0]
 800af60:	4615      	mov	r5, r2
 800af62:	b933      	cbnz	r3, 800af72 <_free_r+0x32>
 800af64:	6063      	str	r3, [r4, #4]
 800af66:	6014      	str	r4, [r2, #0]
 800af68:	b003      	add	sp, #12
 800af6a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800af6e:	f000 b8e9 	b.w	800b144 <__malloc_unlock>
 800af72:	42a3      	cmp	r3, r4
 800af74:	d90b      	bls.n	800af8e <_free_r+0x4e>
 800af76:	6821      	ldr	r1, [r4, #0]
 800af78:	1862      	adds	r2, r4, r1
 800af7a:	4293      	cmp	r3, r2
 800af7c:	bf04      	itt	eq
 800af7e:	681a      	ldreq	r2, [r3, #0]
 800af80:	685b      	ldreq	r3, [r3, #4]
 800af82:	6063      	str	r3, [r4, #4]
 800af84:	bf04      	itt	eq
 800af86:	1852      	addeq	r2, r2, r1
 800af88:	6022      	streq	r2, [r4, #0]
 800af8a:	602c      	str	r4, [r5, #0]
 800af8c:	e7ec      	b.n	800af68 <_free_r+0x28>
 800af8e:	461a      	mov	r2, r3
 800af90:	685b      	ldr	r3, [r3, #4]
 800af92:	b10b      	cbz	r3, 800af98 <_free_r+0x58>
 800af94:	42a3      	cmp	r3, r4
 800af96:	d9fa      	bls.n	800af8e <_free_r+0x4e>
 800af98:	6811      	ldr	r1, [r2, #0]
 800af9a:	1855      	adds	r5, r2, r1
 800af9c:	42a5      	cmp	r5, r4
 800af9e:	d10b      	bne.n	800afb8 <_free_r+0x78>
 800afa0:	6824      	ldr	r4, [r4, #0]
 800afa2:	4421      	add	r1, r4
 800afa4:	1854      	adds	r4, r2, r1
 800afa6:	42a3      	cmp	r3, r4
 800afa8:	6011      	str	r1, [r2, #0]
 800afaa:	d1dd      	bne.n	800af68 <_free_r+0x28>
 800afac:	681c      	ldr	r4, [r3, #0]
 800afae:	685b      	ldr	r3, [r3, #4]
 800afb0:	6053      	str	r3, [r2, #4]
 800afb2:	4421      	add	r1, r4
 800afb4:	6011      	str	r1, [r2, #0]
 800afb6:	e7d7      	b.n	800af68 <_free_r+0x28>
 800afb8:	d902      	bls.n	800afc0 <_free_r+0x80>
 800afba:	230c      	movs	r3, #12
 800afbc:	6003      	str	r3, [r0, #0]
 800afbe:	e7d3      	b.n	800af68 <_free_r+0x28>
 800afc0:	6825      	ldr	r5, [r4, #0]
 800afc2:	1961      	adds	r1, r4, r5
 800afc4:	428b      	cmp	r3, r1
 800afc6:	bf04      	itt	eq
 800afc8:	6819      	ldreq	r1, [r3, #0]
 800afca:	685b      	ldreq	r3, [r3, #4]
 800afcc:	6063      	str	r3, [r4, #4]
 800afce:	bf04      	itt	eq
 800afd0:	1949      	addeq	r1, r1, r5
 800afd2:	6021      	streq	r1, [r4, #0]
 800afd4:	6054      	str	r4, [r2, #4]
 800afd6:	e7c7      	b.n	800af68 <_free_r+0x28>
 800afd8:	b003      	add	sp, #12
 800afda:	bd30      	pop	{r4, r5, pc}
 800afdc:	20000220 	.word	0x20000220

0800afe0 <_malloc_r>:
 800afe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afe2:	1ccd      	adds	r5, r1, #3
 800afe4:	f025 0503 	bic.w	r5, r5, #3
 800afe8:	3508      	adds	r5, #8
 800afea:	2d0c      	cmp	r5, #12
 800afec:	bf38      	it	cc
 800afee:	250c      	movcc	r5, #12
 800aff0:	2d00      	cmp	r5, #0
 800aff2:	4606      	mov	r6, r0
 800aff4:	db01      	blt.n	800affa <_malloc_r+0x1a>
 800aff6:	42a9      	cmp	r1, r5
 800aff8:	d903      	bls.n	800b002 <_malloc_r+0x22>
 800affa:	230c      	movs	r3, #12
 800affc:	6033      	str	r3, [r6, #0]
 800affe:	2000      	movs	r0, #0
 800b000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b002:	f000 f899 	bl	800b138 <__malloc_lock>
 800b006:	4921      	ldr	r1, [pc, #132]	; (800b08c <_malloc_r+0xac>)
 800b008:	680a      	ldr	r2, [r1, #0]
 800b00a:	4614      	mov	r4, r2
 800b00c:	b99c      	cbnz	r4, 800b036 <_malloc_r+0x56>
 800b00e:	4f20      	ldr	r7, [pc, #128]	; (800b090 <_malloc_r+0xb0>)
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	b923      	cbnz	r3, 800b01e <_malloc_r+0x3e>
 800b014:	4621      	mov	r1, r4
 800b016:	4630      	mov	r0, r6
 800b018:	f000 f83c 	bl	800b094 <_sbrk_r>
 800b01c:	6038      	str	r0, [r7, #0]
 800b01e:	4629      	mov	r1, r5
 800b020:	4630      	mov	r0, r6
 800b022:	f000 f837 	bl	800b094 <_sbrk_r>
 800b026:	1c43      	adds	r3, r0, #1
 800b028:	d123      	bne.n	800b072 <_malloc_r+0x92>
 800b02a:	230c      	movs	r3, #12
 800b02c:	6033      	str	r3, [r6, #0]
 800b02e:	4630      	mov	r0, r6
 800b030:	f000 f888 	bl	800b144 <__malloc_unlock>
 800b034:	e7e3      	b.n	800affe <_malloc_r+0x1e>
 800b036:	6823      	ldr	r3, [r4, #0]
 800b038:	1b5b      	subs	r3, r3, r5
 800b03a:	d417      	bmi.n	800b06c <_malloc_r+0x8c>
 800b03c:	2b0b      	cmp	r3, #11
 800b03e:	d903      	bls.n	800b048 <_malloc_r+0x68>
 800b040:	6023      	str	r3, [r4, #0]
 800b042:	441c      	add	r4, r3
 800b044:	6025      	str	r5, [r4, #0]
 800b046:	e004      	b.n	800b052 <_malloc_r+0x72>
 800b048:	6863      	ldr	r3, [r4, #4]
 800b04a:	42a2      	cmp	r2, r4
 800b04c:	bf0c      	ite	eq
 800b04e:	600b      	streq	r3, [r1, #0]
 800b050:	6053      	strne	r3, [r2, #4]
 800b052:	4630      	mov	r0, r6
 800b054:	f000 f876 	bl	800b144 <__malloc_unlock>
 800b058:	f104 000b 	add.w	r0, r4, #11
 800b05c:	1d23      	adds	r3, r4, #4
 800b05e:	f020 0007 	bic.w	r0, r0, #7
 800b062:	1ac2      	subs	r2, r0, r3
 800b064:	d0cc      	beq.n	800b000 <_malloc_r+0x20>
 800b066:	1a1b      	subs	r3, r3, r0
 800b068:	50a3      	str	r3, [r4, r2]
 800b06a:	e7c9      	b.n	800b000 <_malloc_r+0x20>
 800b06c:	4622      	mov	r2, r4
 800b06e:	6864      	ldr	r4, [r4, #4]
 800b070:	e7cc      	b.n	800b00c <_malloc_r+0x2c>
 800b072:	1cc4      	adds	r4, r0, #3
 800b074:	f024 0403 	bic.w	r4, r4, #3
 800b078:	42a0      	cmp	r0, r4
 800b07a:	d0e3      	beq.n	800b044 <_malloc_r+0x64>
 800b07c:	1a21      	subs	r1, r4, r0
 800b07e:	4630      	mov	r0, r6
 800b080:	f000 f808 	bl	800b094 <_sbrk_r>
 800b084:	3001      	adds	r0, #1
 800b086:	d1dd      	bne.n	800b044 <_malloc_r+0x64>
 800b088:	e7cf      	b.n	800b02a <_malloc_r+0x4a>
 800b08a:	bf00      	nop
 800b08c:	20000220 	.word	0x20000220
 800b090:	20000224 	.word	0x20000224

0800b094 <_sbrk_r>:
 800b094:	b538      	push	{r3, r4, r5, lr}
 800b096:	4d06      	ldr	r5, [pc, #24]	; (800b0b0 <_sbrk_r+0x1c>)
 800b098:	2300      	movs	r3, #0
 800b09a:	4604      	mov	r4, r0
 800b09c:	4608      	mov	r0, r1
 800b09e:	602b      	str	r3, [r5, #0]
 800b0a0:	f7f7 f850 	bl	8002144 <_sbrk>
 800b0a4:	1c43      	adds	r3, r0, #1
 800b0a6:	d102      	bne.n	800b0ae <_sbrk_r+0x1a>
 800b0a8:	682b      	ldr	r3, [r5, #0]
 800b0aa:	b103      	cbz	r3, 800b0ae <_sbrk_r+0x1a>
 800b0ac:	6023      	str	r3, [r4, #0]
 800b0ae:	bd38      	pop	{r3, r4, r5, pc}
 800b0b0:	200003dc 	.word	0x200003dc

0800b0b4 <__assert_func>:
 800b0b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b0b6:	4614      	mov	r4, r2
 800b0b8:	461a      	mov	r2, r3
 800b0ba:	4b09      	ldr	r3, [pc, #36]	; (800b0e0 <__assert_func+0x2c>)
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	4605      	mov	r5, r0
 800b0c0:	68d8      	ldr	r0, [r3, #12]
 800b0c2:	b14c      	cbz	r4, 800b0d8 <__assert_func+0x24>
 800b0c4:	4b07      	ldr	r3, [pc, #28]	; (800b0e4 <__assert_func+0x30>)
 800b0c6:	9100      	str	r1, [sp, #0]
 800b0c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b0cc:	4906      	ldr	r1, [pc, #24]	; (800b0e8 <__assert_func+0x34>)
 800b0ce:	462b      	mov	r3, r5
 800b0d0:	f000 f80e 	bl	800b0f0 <fiprintf>
 800b0d4:	f000 fa64 	bl	800b5a0 <abort>
 800b0d8:	4b04      	ldr	r3, [pc, #16]	; (800b0ec <__assert_func+0x38>)
 800b0da:	461c      	mov	r4, r3
 800b0dc:	e7f3      	b.n	800b0c6 <__assert_func+0x12>
 800b0de:	bf00      	nop
 800b0e0:	20000024 	.word	0x20000024
 800b0e4:	0800d05c 	.word	0x0800d05c
 800b0e8:	0800d069 	.word	0x0800d069
 800b0ec:	0800d097 	.word	0x0800d097

0800b0f0 <fiprintf>:
 800b0f0:	b40e      	push	{r1, r2, r3}
 800b0f2:	b503      	push	{r0, r1, lr}
 800b0f4:	4601      	mov	r1, r0
 800b0f6:	ab03      	add	r3, sp, #12
 800b0f8:	4805      	ldr	r0, [pc, #20]	; (800b110 <fiprintf+0x20>)
 800b0fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0fe:	6800      	ldr	r0, [r0, #0]
 800b100:	9301      	str	r3, [sp, #4]
 800b102:	f000 f84f 	bl	800b1a4 <_vfiprintf_r>
 800b106:	b002      	add	sp, #8
 800b108:	f85d eb04 	ldr.w	lr, [sp], #4
 800b10c:	b003      	add	sp, #12
 800b10e:	4770      	bx	lr
 800b110:	20000024 	.word	0x20000024

0800b114 <__ascii_mbtowc>:
 800b114:	b082      	sub	sp, #8
 800b116:	b901      	cbnz	r1, 800b11a <__ascii_mbtowc+0x6>
 800b118:	a901      	add	r1, sp, #4
 800b11a:	b142      	cbz	r2, 800b12e <__ascii_mbtowc+0x1a>
 800b11c:	b14b      	cbz	r3, 800b132 <__ascii_mbtowc+0x1e>
 800b11e:	7813      	ldrb	r3, [r2, #0]
 800b120:	600b      	str	r3, [r1, #0]
 800b122:	7812      	ldrb	r2, [r2, #0]
 800b124:	1e10      	subs	r0, r2, #0
 800b126:	bf18      	it	ne
 800b128:	2001      	movne	r0, #1
 800b12a:	b002      	add	sp, #8
 800b12c:	4770      	bx	lr
 800b12e:	4610      	mov	r0, r2
 800b130:	e7fb      	b.n	800b12a <__ascii_mbtowc+0x16>
 800b132:	f06f 0001 	mvn.w	r0, #1
 800b136:	e7f8      	b.n	800b12a <__ascii_mbtowc+0x16>

0800b138 <__malloc_lock>:
 800b138:	4801      	ldr	r0, [pc, #4]	; (800b140 <__malloc_lock+0x8>)
 800b13a:	f000 bbf1 	b.w	800b920 <__retarget_lock_acquire_recursive>
 800b13e:	bf00      	nop
 800b140:	200003e4 	.word	0x200003e4

0800b144 <__malloc_unlock>:
 800b144:	4801      	ldr	r0, [pc, #4]	; (800b14c <__malloc_unlock+0x8>)
 800b146:	f000 bbec 	b.w	800b922 <__retarget_lock_release_recursive>
 800b14a:	bf00      	nop
 800b14c:	200003e4 	.word	0x200003e4

0800b150 <__sfputc_r>:
 800b150:	6893      	ldr	r3, [r2, #8]
 800b152:	3b01      	subs	r3, #1
 800b154:	2b00      	cmp	r3, #0
 800b156:	b410      	push	{r4}
 800b158:	6093      	str	r3, [r2, #8]
 800b15a:	da08      	bge.n	800b16e <__sfputc_r+0x1e>
 800b15c:	6994      	ldr	r4, [r2, #24]
 800b15e:	42a3      	cmp	r3, r4
 800b160:	db01      	blt.n	800b166 <__sfputc_r+0x16>
 800b162:	290a      	cmp	r1, #10
 800b164:	d103      	bne.n	800b16e <__sfputc_r+0x1e>
 800b166:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b16a:	f000 b94b 	b.w	800b404 <__swbuf_r>
 800b16e:	6813      	ldr	r3, [r2, #0]
 800b170:	1c58      	adds	r0, r3, #1
 800b172:	6010      	str	r0, [r2, #0]
 800b174:	7019      	strb	r1, [r3, #0]
 800b176:	4608      	mov	r0, r1
 800b178:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b17c:	4770      	bx	lr

0800b17e <__sfputs_r>:
 800b17e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b180:	4606      	mov	r6, r0
 800b182:	460f      	mov	r7, r1
 800b184:	4614      	mov	r4, r2
 800b186:	18d5      	adds	r5, r2, r3
 800b188:	42ac      	cmp	r4, r5
 800b18a:	d101      	bne.n	800b190 <__sfputs_r+0x12>
 800b18c:	2000      	movs	r0, #0
 800b18e:	e007      	b.n	800b1a0 <__sfputs_r+0x22>
 800b190:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b194:	463a      	mov	r2, r7
 800b196:	4630      	mov	r0, r6
 800b198:	f7ff ffda 	bl	800b150 <__sfputc_r>
 800b19c:	1c43      	adds	r3, r0, #1
 800b19e:	d1f3      	bne.n	800b188 <__sfputs_r+0xa>
 800b1a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b1a4 <_vfiprintf_r>:
 800b1a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1a8:	460d      	mov	r5, r1
 800b1aa:	b09d      	sub	sp, #116	; 0x74
 800b1ac:	4614      	mov	r4, r2
 800b1ae:	4698      	mov	r8, r3
 800b1b0:	4606      	mov	r6, r0
 800b1b2:	b118      	cbz	r0, 800b1bc <_vfiprintf_r+0x18>
 800b1b4:	6983      	ldr	r3, [r0, #24]
 800b1b6:	b90b      	cbnz	r3, 800b1bc <_vfiprintf_r+0x18>
 800b1b8:	f000 fb14 	bl	800b7e4 <__sinit>
 800b1bc:	4b89      	ldr	r3, [pc, #548]	; (800b3e4 <_vfiprintf_r+0x240>)
 800b1be:	429d      	cmp	r5, r3
 800b1c0:	d11b      	bne.n	800b1fa <_vfiprintf_r+0x56>
 800b1c2:	6875      	ldr	r5, [r6, #4]
 800b1c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b1c6:	07d9      	lsls	r1, r3, #31
 800b1c8:	d405      	bmi.n	800b1d6 <_vfiprintf_r+0x32>
 800b1ca:	89ab      	ldrh	r3, [r5, #12]
 800b1cc:	059a      	lsls	r2, r3, #22
 800b1ce:	d402      	bmi.n	800b1d6 <_vfiprintf_r+0x32>
 800b1d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b1d2:	f000 fba5 	bl	800b920 <__retarget_lock_acquire_recursive>
 800b1d6:	89ab      	ldrh	r3, [r5, #12]
 800b1d8:	071b      	lsls	r3, r3, #28
 800b1da:	d501      	bpl.n	800b1e0 <_vfiprintf_r+0x3c>
 800b1dc:	692b      	ldr	r3, [r5, #16]
 800b1de:	b9eb      	cbnz	r3, 800b21c <_vfiprintf_r+0x78>
 800b1e0:	4629      	mov	r1, r5
 800b1e2:	4630      	mov	r0, r6
 800b1e4:	f000 f96e 	bl	800b4c4 <__swsetup_r>
 800b1e8:	b1c0      	cbz	r0, 800b21c <_vfiprintf_r+0x78>
 800b1ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b1ec:	07dc      	lsls	r4, r3, #31
 800b1ee:	d50e      	bpl.n	800b20e <_vfiprintf_r+0x6a>
 800b1f0:	f04f 30ff 	mov.w	r0, #4294967295
 800b1f4:	b01d      	add	sp, #116	; 0x74
 800b1f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1fa:	4b7b      	ldr	r3, [pc, #492]	; (800b3e8 <_vfiprintf_r+0x244>)
 800b1fc:	429d      	cmp	r5, r3
 800b1fe:	d101      	bne.n	800b204 <_vfiprintf_r+0x60>
 800b200:	68b5      	ldr	r5, [r6, #8]
 800b202:	e7df      	b.n	800b1c4 <_vfiprintf_r+0x20>
 800b204:	4b79      	ldr	r3, [pc, #484]	; (800b3ec <_vfiprintf_r+0x248>)
 800b206:	429d      	cmp	r5, r3
 800b208:	bf08      	it	eq
 800b20a:	68f5      	ldreq	r5, [r6, #12]
 800b20c:	e7da      	b.n	800b1c4 <_vfiprintf_r+0x20>
 800b20e:	89ab      	ldrh	r3, [r5, #12]
 800b210:	0598      	lsls	r0, r3, #22
 800b212:	d4ed      	bmi.n	800b1f0 <_vfiprintf_r+0x4c>
 800b214:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b216:	f000 fb84 	bl	800b922 <__retarget_lock_release_recursive>
 800b21a:	e7e9      	b.n	800b1f0 <_vfiprintf_r+0x4c>
 800b21c:	2300      	movs	r3, #0
 800b21e:	9309      	str	r3, [sp, #36]	; 0x24
 800b220:	2320      	movs	r3, #32
 800b222:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b226:	f8cd 800c 	str.w	r8, [sp, #12]
 800b22a:	2330      	movs	r3, #48	; 0x30
 800b22c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b3f0 <_vfiprintf_r+0x24c>
 800b230:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b234:	f04f 0901 	mov.w	r9, #1
 800b238:	4623      	mov	r3, r4
 800b23a:	469a      	mov	sl, r3
 800b23c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b240:	b10a      	cbz	r2, 800b246 <_vfiprintf_r+0xa2>
 800b242:	2a25      	cmp	r2, #37	; 0x25
 800b244:	d1f9      	bne.n	800b23a <_vfiprintf_r+0x96>
 800b246:	ebba 0b04 	subs.w	fp, sl, r4
 800b24a:	d00b      	beq.n	800b264 <_vfiprintf_r+0xc0>
 800b24c:	465b      	mov	r3, fp
 800b24e:	4622      	mov	r2, r4
 800b250:	4629      	mov	r1, r5
 800b252:	4630      	mov	r0, r6
 800b254:	f7ff ff93 	bl	800b17e <__sfputs_r>
 800b258:	3001      	adds	r0, #1
 800b25a:	f000 80aa 	beq.w	800b3b2 <_vfiprintf_r+0x20e>
 800b25e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b260:	445a      	add	r2, fp
 800b262:	9209      	str	r2, [sp, #36]	; 0x24
 800b264:	f89a 3000 	ldrb.w	r3, [sl]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	f000 80a2 	beq.w	800b3b2 <_vfiprintf_r+0x20e>
 800b26e:	2300      	movs	r3, #0
 800b270:	f04f 32ff 	mov.w	r2, #4294967295
 800b274:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b278:	f10a 0a01 	add.w	sl, sl, #1
 800b27c:	9304      	str	r3, [sp, #16]
 800b27e:	9307      	str	r3, [sp, #28]
 800b280:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b284:	931a      	str	r3, [sp, #104]	; 0x68
 800b286:	4654      	mov	r4, sl
 800b288:	2205      	movs	r2, #5
 800b28a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b28e:	4858      	ldr	r0, [pc, #352]	; (800b3f0 <_vfiprintf_r+0x24c>)
 800b290:	f7f4 ffc6 	bl	8000220 <memchr>
 800b294:	9a04      	ldr	r2, [sp, #16]
 800b296:	b9d8      	cbnz	r0, 800b2d0 <_vfiprintf_r+0x12c>
 800b298:	06d1      	lsls	r1, r2, #27
 800b29a:	bf44      	itt	mi
 800b29c:	2320      	movmi	r3, #32
 800b29e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b2a2:	0713      	lsls	r3, r2, #28
 800b2a4:	bf44      	itt	mi
 800b2a6:	232b      	movmi	r3, #43	; 0x2b
 800b2a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b2ac:	f89a 3000 	ldrb.w	r3, [sl]
 800b2b0:	2b2a      	cmp	r3, #42	; 0x2a
 800b2b2:	d015      	beq.n	800b2e0 <_vfiprintf_r+0x13c>
 800b2b4:	9a07      	ldr	r2, [sp, #28]
 800b2b6:	4654      	mov	r4, sl
 800b2b8:	2000      	movs	r0, #0
 800b2ba:	f04f 0c0a 	mov.w	ip, #10
 800b2be:	4621      	mov	r1, r4
 800b2c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b2c4:	3b30      	subs	r3, #48	; 0x30
 800b2c6:	2b09      	cmp	r3, #9
 800b2c8:	d94e      	bls.n	800b368 <_vfiprintf_r+0x1c4>
 800b2ca:	b1b0      	cbz	r0, 800b2fa <_vfiprintf_r+0x156>
 800b2cc:	9207      	str	r2, [sp, #28]
 800b2ce:	e014      	b.n	800b2fa <_vfiprintf_r+0x156>
 800b2d0:	eba0 0308 	sub.w	r3, r0, r8
 800b2d4:	fa09 f303 	lsl.w	r3, r9, r3
 800b2d8:	4313      	orrs	r3, r2
 800b2da:	9304      	str	r3, [sp, #16]
 800b2dc:	46a2      	mov	sl, r4
 800b2de:	e7d2      	b.n	800b286 <_vfiprintf_r+0xe2>
 800b2e0:	9b03      	ldr	r3, [sp, #12]
 800b2e2:	1d19      	adds	r1, r3, #4
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	9103      	str	r1, [sp, #12]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	bfbb      	ittet	lt
 800b2ec:	425b      	neglt	r3, r3
 800b2ee:	f042 0202 	orrlt.w	r2, r2, #2
 800b2f2:	9307      	strge	r3, [sp, #28]
 800b2f4:	9307      	strlt	r3, [sp, #28]
 800b2f6:	bfb8      	it	lt
 800b2f8:	9204      	strlt	r2, [sp, #16]
 800b2fa:	7823      	ldrb	r3, [r4, #0]
 800b2fc:	2b2e      	cmp	r3, #46	; 0x2e
 800b2fe:	d10c      	bne.n	800b31a <_vfiprintf_r+0x176>
 800b300:	7863      	ldrb	r3, [r4, #1]
 800b302:	2b2a      	cmp	r3, #42	; 0x2a
 800b304:	d135      	bne.n	800b372 <_vfiprintf_r+0x1ce>
 800b306:	9b03      	ldr	r3, [sp, #12]
 800b308:	1d1a      	adds	r2, r3, #4
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	9203      	str	r2, [sp, #12]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	bfb8      	it	lt
 800b312:	f04f 33ff 	movlt.w	r3, #4294967295
 800b316:	3402      	adds	r4, #2
 800b318:	9305      	str	r3, [sp, #20]
 800b31a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b400 <_vfiprintf_r+0x25c>
 800b31e:	7821      	ldrb	r1, [r4, #0]
 800b320:	2203      	movs	r2, #3
 800b322:	4650      	mov	r0, sl
 800b324:	f7f4 ff7c 	bl	8000220 <memchr>
 800b328:	b140      	cbz	r0, 800b33c <_vfiprintf_r+0x198>
 800b32a:	2340      	movs	r3, #64	; 0x40
 800b32c:	eba0 000a 	sub.w	r0, r0, sl
 800b330:	fa03 f000 	lsl.w	r0, r3, r0
 800b334:	9b04      	ldr	r3, [sp, #16]
 800b336:	4303      	orrs	r3, r0
 800b338:	3401      	adds	r4, #1
 800b33a:	9304      	str	r3, [sp, #16]
 800b33c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b340:	482c      	ldr	r0, [pc, #176]	; (800b3f4 <_vfiprintf_r+0x250>)
 800b342:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b346:	2206      	movs	r2, #6
 800b348:	f7f4 ff6a 	bl	8000220 <memchr>
 800b34c:	2800      	cmp	r0, #0
 800b34e:	d03f      	beq.n	800b3d0 <_vfiprintf_r+0x22c>
 800b350:	4b29      	ldr	r3, [pc, #164]	; (800b3f8 <_vfiprintf_r+0x254>)
 800b352:	bb1b      	cbnz	r3, 800b39c <_vfiprintf_r+0x1f8>
 800b354:	9b03      	ldr	r3, [sp, #12]
 800b356:	3307      	adds	r3, #7
 800b358:	f023 0307 	bic.w	r3, r3, #7
 800b35c:	3308      	adds	r3, #8
 800b35e:	9303      	str	r3, [sp, #12]
 800b360:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b362:	443b      	add	r3, r7
 800b364:	9309      	str	r3, [sp, #36]	; 0x24
 800b366:	e767      	b.n	800b238 <_vfiprintf_r+0x94>
 800b368:	fb0c 3202 	mla	r2, ip, r2, r3
 800b36c:	460c      	mov	r4, r1
 800b36e:	2001      	movs	r0, #1
 800b370:	e7a5      	b.n	800b2be <_vfiprintf_r+0x11a>
 800b372:	2300      	movs	r3, #0
 800b374:	3401      	adds	r4, #1
 800b376:	9305      	str	r3, [sp, #20]
 800b378:	4619      	mov	r1, r3
 800b37a:	f04f 0c0a 	mov.w	ip, #10
 800b37e:	4620      	mov	r0, r4
 800b380:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b384:	3a30      	subs	r2, #48	; 0x30
 800b386:	2a09      	cmp	r2, #9
 800b388:	d903      	bls.n	800b392 <_vfiprintf_r+0x1ee>
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d0c5      	beq.n	800b31a <_vfiprintf_r+0x176>
 800b38e:	9105      	str	r1, [sp, #20]
 800b390:	e7c3      	b.n	800b31a <_vfiprintf_r+0x176>
 800b392:	fb0c 2101 	mla	r1, ip, r1, r2
 800b396:	4604      	mov	r4, r0
 800b398:	2301      	movs	r3, #1
 800b39a:	e7f0      	b.n	800b37e <_vfiprintf_r+0x1da>
 800b39c:	ab03      	add	r3, sp, #12
 800b39e:	9300      	str	r3, [sp, #0]
 800b3a0:	462a      	mov	r2, r5
 800b3a2:	4b16      	ldr	r3, [pc, #88]	; (800b3fc <_vfiprintf_r+0x258>)
 800b3a4:	a904      	add	r1, sp, #16
 800b3a6:	4630      	mov	r0, r6
 800b3a8:	f7fd ffe0 	bl	800936c <_printf_float>
 800b3ac:	4607      	mov	r7, r0
 800b3ae:	1c78      	adds	r0, r7, #1
 800b3b0:	d1d6      	bne.n	800b360 <_vfiprintf_r+0x1bc>
 800b3b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b3b4:	07d9      	lsls	r1, r3, #31
 800b3b6:	d405      	bmi.n	800b3c4 <_vfiprintf_r+0x220>
 800b3b8:	89ab      	ldrh	r3, [r5, #12]
 800b3ba:	059a      	lsls	r2, r3, #22
 800b3bc:	d402      	bmi.n	800b3c4 <_vfiprintf_r+0x220>
 800b3be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b3c0:	f000 faaf 	bl	800b922 <__retarget_lock_release_recursive>
 800b3c4:	89ab      	ldrh	r3, [r5, #12]
 800b3c6:	065b      	lsls	r3, r3, #25
 800b3c8:	f53f af12 	bmi.w	800b1f0 <_vfiprintf_r+0x4c>
 800b3cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b3ce:	e711      	b.n	800b1f4 <_vfiprintf_r+0x50>
 800b3d0:	ab03      	add	r3, sp, #12
 800b3d2:	9300      	str	r3, [sp, #0]
 800b3d4:	462a      	mov	r2, r5
 800b3d6:	4b09      	ldr	r3, [pc, #36]	; (800b3fc <_vfiprintf_r+0x258>)
 800b3d8:	a904      	add	r1, sp, #16
 800b3da:	4630      	mov	r0, r6
 800b3dc:	f7fe fa6a 	bl	80098b4 <_printf_i>
 800b3e0:	e7e4      	b.n	800b3ac <_vfiprintf_r+0x208>
 800b3e2:	bf00      	nop
 800b3e4:	0800d1d4 	.word	0x0800d1d4
 800b3e8:	0800d1f4 	.word	0x0800d1f4
 800b3ec:	0800d1b4 	.word	0x0800d1b4
 800b3f0:	0800d0a2 	.word	0x0800d0a2
 800b3f4:	0800d0ac 	.word	0x0800d0ac
 800b3f8:	0800936d 	.word	0x0800936d
 800b3fc:	0800b17f 	.word	0x0800b17f
 800b400:	0800d0a8 	.word	0x0800d0a8

0800b404 <__swbuf_r>:
 800b404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b406:	460e      	mov	r6, r1
 800b408:	4614      	mov	r4, r2
 800b40a:	4605      	mov	r5, r0
 800b40c:	b118      	cbz	r0, 800b416 <__swbuf_r+0x12>
 800b40e:	6983      	ldr	r3, [r0, #24]
 800b410:	b90b      	cbnz	r3, 800b416 <__swbuf_r+0x12>
 800b412:	f000 f9e7 	bl	800b7e4 <__sinit>
 800b416:	4b21      	ldr	r3, [pc, #132]	; (800b49c <__swbuf_r+0x98>)
 800b418:	429c      	cmp	r4, r3
 800b41a:	d12b      	bne.n	800b474 <__swbuf_r+0x70>
 800b41c:	686c      	ldr	r4, [r5, #4]
 800b41e:	69a3      	ldr	r3, [r4, #24]
 800b420:	60a3      	str	r3, [r4, #8]
 800b422:	89a3      	ldrh	r3, [r4, #12]
 800b424:	071a      	lsls	r2, r3, #28
 800b426:	d52f      	bpl.n	800b488 <__swbuf_r+0x84>
 800b428:	6923      	ldr	r3, [r4, #16]
 800b42a:	b36b      	cbz	r3, 800b488 <__swbuf_r+0x84>
 800b42c:	6923      	ldr	r3, [r4, #16]
 800b42e:	6820      	ldr	r0, [r4, #0]
 800b430:	1ac0      	subs	r0, r0, r3
 800b432:	6963      	ldr	r3, [r4, #20]
 800b434:	b2f6      	uxtb	r6, r6
 800b436:	4283      	cmp	r3, r0
 800b438:	4637      	mov	r7, r6
 800b43a:	dc04      	bgt.n	800b446 <__swbuf_r+0x42>
 800b43c:	4621      	mov	r1, r4
 800b43e:	4628      	mov	r0, r5
 800b440:	f000 f93c 	bl	800b6bc <_fflush_r>
 800b444:	bb30      	cbnz	r0, 800b494 <__swbuf_r+0x90>
 800b446:	68a3      	ldr	r3, [r4, #8]
 800b448:	3b01      	subs	r3, #1
 800b44a:	60a3      	str	r3, [r4, #8]
 800b44c:	6823      	ldr	r3, [r4, #0]
 800b44e:	1c5a      	adds	r2, r3, #1
 800b450:	6022      	str	r2, [r4, #0]
 800b452:	701e      	strb	r6, [r3, #0]
 800b454:	6963      	ldr	r3, [r4, #20]
 800b456:	3001      	adds	r0, #1
 800b458:	4283      	cmp	r3, r0
 800b45a:	d004      	beq.n	800b466 <__swbuf_r+0x62>
 800b45c:	89a3      	ldrh	r3, [r4, #12]
 800b45e:	07db      	lsls	r3, r3, #31
 800b460:	d506      	bpl.n	800b470 <__swbuf_r+0x6c>
 800b462:	2e0a      	cmp	r6, #10
 800b464:	d104      	bne.n	800b470 <__swbuf_r+0x6c>
 800b466:	4621      	mov	r1, r4
 800b468:	4628      	mov	r0, r5
 800b46a:	f000 f927 	bl	800b6bc <_fflush_r>
 800b46e:	b988      	cbnz	r0, 800b494 <__swbuf_r+0x90>
 800b470:	4638      	mov	r0, r7
 800b472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b474:	4b0a      	ldr	r3, [pc, #40]	; (800b4a0 <__swbuf_r+0x9c>)
 800b476:	429c      	cmp	r4, r3
 800b478:	d101      	bne.n	800b47e <__swbuf_r+0x7a>
 800b47a:	68ac      	ldr	r4, [r5, #8]
 800b47c:	e7cf      	b.n	800b41e <__swbuf_r+0x1a>
 800b47e:	4b09      	ldr	r3, [pc, #36]	; (800b4a4 <__swbuf_r+0xa0>)
 800b480:	429c      	cmp	r4, r3
 800b482:	bf08      	it	eq
 800b484:	68ec      	ldreq	r4, [r5, #12]
 800b486:	e7ca      	b.n	800b41e <__swbuf_r+0x1a>
 800b488:	4621      	mov	r1, r4
 800b48a:	4628      	mov	r0, r5
 800b48c:	f000 f81a 	bl	800b4c4 <__swsetup_r>
 800b490:	2800      	cmp	r0, #0
 800b492:	d0cb      	beq.n	800b42c <__swbuf_r+0x28>
 800b494:	f04f 37ff 	mov.w	r7, #4294967295
 800b498:	e7ea      	b.n	800b470 <__swbuf_r+0x6c>
 800b49a:	bf00      	nop
 800b49c:	0800d1d4 	.word	0x0800d1d4
 800b4a0:	0800d1f4 	.word	0x0800d1f4
 800b4a4:	0800d1b4 	.word	0x0800d1b4

0800b4a8 <__ascii_wctomb>:
 800b4a8:	b149      	cbz	r1, 800b4be <__ascii_wctomb+0x16>
 800b4aa:	2aff      	cmp	r2, #255	; 0xff
 800b4ac:	bf85      	ittet	hi
 800b4ae:	238a      	movhi	r3, #138	; 0x8a
 800b4b0:	6003      	strhi	r3, [r0, #0]
 800b4b2:	700a      	strbls	r2, [r1, #0]
 800b4b4:	f04f 30ff 	movhi.w	r0, #4294967295
 800b4b8:	bf98      	it	ls
 800b4ba:	2001      	movls	r0, #1
 800b4bc:	4770      	bx	lr
 800b4be:	4608      	mov	r0, r1
 800b4c0:	4770      	bx	lr
	...

0800b4c4 <__swsetup_r>:
 800b4c4:	4b32      	ldr	r3, [pc, #200]	; (800b590 <__swsetup_r+0xcc>)
 800b4c6:	b570      	push	{r4, r5, r6, lr}
 800b4c8:	681d      	ldr	r5, [r3, #0]
 800b4ca:	4606      	mov	r6, r0
 800b4cc:	460c      	mov	r4, r1
 800b4ce:	b125      	cbz	r5, 800b4da <__swsetup_r+0x16>
 800b4d0:	69ab      	ldr	r3, [r5, #24]
 800b4d2:	b913      	cbnz	r3, 800b4da <__swsetup_r+0x16>
 800b4d4:	4628      	mov	r0, r5
 800b4d6:	f000 f985 	bl	800b7e4 <__sinit>
 800b4da:	4b2e      	ldr	r3, [pc, #184]	; (800b594 <__swsetup_r+0xd0>)
 800b4dc:	429c      	cmp	r4, r3
 800b4de:	d10f      	bne.n	800b500 <__swsetup_r+0x3c>
 800b4e0:	686c      	ldr	r4, [r5, #4]
 800b4e2:	89a3      	ldrh	r3, [r4, #12]
 800b4e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b4e8:	0719      	lsls	r1, r3, #28
 800b4ea:	d42c      	bmi.n	800b546 <__swsetup_r+0x82>
 800b4ec:	06dd      	lsls	r5, r3, #27
 800b4ee:	d411      	bmi.n	800b514 <__swsetup_r+0x50>
 800b4f0:	2309      	movs	r3, #9
 800b4f2:	6033      	str	r3, [r6, #0]
 800b4f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b4f8:	81a3      	strh	r3, [r4, #12]
 800b4fa:	f04f 30ff 	mov.w	r0, #4294967295
 800b4fe:	e03e      	b.n	800b57e <__swsetup_r+0xba>
 800b500:	4b25      	ldr	r3, [pc, #148]	; (800b598 <__swsetup_r+0xd4>)
 800b502:	429c      	cmp	r4, r3
 800b504:	d101      	bne.n	800b50a <__swsetup_r+0x46>
 800b506:	68ac      	ldr	r4, [r5, #8]
 800b508:	e7eb      	b.n	800b4e2 <__swsetup_r+0x1e>
 800b50a:	4b24      	ldr	r3, [pc, #144]	; (800b59c <__swsetup_r+0xd8>)
 800b50c:	429c      	cmp	r4, r3
 800b50e:	bf08      	it	eq
 800b510:	68ec      	ldreq	r4, [r5, #12]
 800b512:	e7e6      	b.n	800b4e2 <__swsetup_r+0x1e>
 800b514:	0758      	lsls	r0, r3, #29
 800b516:	d512      	bpl.n	800b53e <__swsetup_r+0x7a>
 800b518:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b51a:	b141      	cbz	r1, 800b52e <__swsetup_r+0x6a>
 800b51c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b520:	4299      	cmp	r1, r3
 800b522:	d002      	beq.n	800b52a <__swsetup_r+0x66>
 800b524:	4630      	mov	r0, r6
 800b526:	f7ff fd0b 	bl	800af40 <_free_r>
 800b52a:	2300      	movs	r3, #0
 800b52c:	6363      	str	r3, [r4, #52]	; 0x34
 800b52e:	89a3      	ldrh	r3, [r4, #12]
 800b530:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b534:	81a3      	strh	r3, [r4, #12]
 800b536:	2300      	movs	r3, #0
 800b538:	6063      	str	r3, [r4, #4]
 800b53a:	6923      	ldr	r3, [r4, #16]
 800b53c:	6023      	str	r3, [r4, #0]
 800b53e:	89a3      	ldrh	r3, [r4, #12]
 800b540:	f043 0308 	orr.w	r3, r3, #8
 800b544:	81a3      	strh	r3, [r4, #12]
 800b546:	6923      	ldr	r3, [r4, #16]
 800b548:	b94b      	cbnz	r3, 800b55e <__swsetup_r+0x9a>
 800b54a:	89a3      	ldrh	r3, [r4, #12]
 800b54c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b550:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b554:	d003      	beq.n	800b55e <__swsetup_r+0x9a>
 800b556:	4621      	mov	r1, r4
 800b558:	4630      	mov	r0, r6
 800b55a:	f000 fa07 	bl	800b96c <__smakebuf_r>
 800b55e:	89a0      	ldrh	r0, [r4, #12]
 800b560:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b564:	f010 0301 	ands.w	r3, r0, #1
 800b568:	d00a      	beq.n	800b580 <__swsetup_r+0xbc>
 800b56a:	2300      	movs	r3, #0
 800b56c:	60a3      	str	r3, [r4, #8]
 800b56e:	6963      	ldr	r3, [r4, #20]
 800b570:	425b      	negs	r3, r3
 800b572:	61a3      	str	r3, [r4, #24]
 800b574:	6923      	ldr	r3, [r4, #16]
 800b576:	b943      	cbnz	r3, 800b58a <__swsetup_r+0xc6>
 800b578:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b57c:	d1ba      	bne.n	800b4f4 <__swsetup_r+0x30>
 800b57e:	bd70      	pop	{r4, r5, r6, pc}
 800b580:	0781      	lsls	r1, r0, #30
 800b582:	bf58      	it	pl
 800b584:	6963      	ldrpl	r3, [r4, #20]
 800b586:	60a3      	str	r3, [r4, #8]
 800b588:	e7f4      	b.n	800b574 <__swsetup_r+0xb0>
 800b58a:	2000      	movs	r0, #0
 800b58c:	e7f7      	b.n	800b57e <__swsetup_r+0xba>
 800b58e:	bf00      	nop
 800b590:	20000024 	.word	0x20000024
 800b594:	0800d1d4 	.word	0x0800d1d4
 800b598:	0800d1f4 	.word	0x0800d1f4
 800b59c:	0800d1b4 	.word	0x0800d1b4

0800b5a0 <abort>:
 800b5a0:	b508      	push	{r3, lr}
 800b5a2:	2006      	movs	r0, #6
 800b5a4:	f000 fa4a 	bl	800ba3c <raise>
 800b5a8:	2001      	movs	r0, #1
 800b5aa:	f7f6 fd53 	bl	8002054 <_exit>
	...

0800b5b0 <__sflush_r>:
 800b5b0:	898a      	ldrh	r2, [r1, #12]
 800b5b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5b6:	4605      	mov	r5, r0
 800b5b8:	0710      	lsls	r0, r2, #28
 800b5ba:	460c      	mov	r4, r1
 800b5bc:	d458      	bmi.n	800b670 <__sflush_r+0xc0>
 800b5be:	684b      	ldr	r3, [r1, #4]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	dc05      	bgt.n	800b5d0 <__sflush_r+0x20>
 800b5c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	dc02      	bgt.n	800b5d0 <__sflush_r+0x20>
 800b5ca:	2000      	movs	r0, #0
 800b5cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b5d2:	2e00      	cmp	r6, #0
 800b5d4:	d0f9      	beq.n	800b5ca <__sflush_r+0x1a>
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b5dc:	682f      	ldr	r7, [r5, #0]
 800b5de:	602b      	str	r3, [r5, #0]
 800b5e0:	d032      	beq.n	800b648 <__sflush_r+0x98>
 800b5e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b5e4:	89a3      	ldrh	r3, [r4, #12]
 800b5e6:	075a      	lsls	r2, r3, #29
 800b5e8:	d505      	bpl.n	800b5f6 <__sflush_r+0x46>
 800b5ea:	6863      	ldr	r3, [r4, #4]
 800b5ec:	1ac0      	subs	r0, r0, r3
 800b5ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b5f0:	b10b      	cbz	r3, 800b5f6 <__sflush_r+0x46>
 800b5f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b5f4:	1ac0      	subs	r0, r0, r3
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	4602      	mov	r2, r0
 800b5fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b5fc:	6a21      	ldr	r1, [r4, #32]
 800b5fe:	4628      	mov	r0, r5
 800b600:	47b0      	blx	r6
 800b602:	1c43      	adds	r3, r0, #1
 800b604:	89a3      	ldrh	r3, [r4, #12]
 800b606:	d106      	bne.n	800b616 <__sflush_r+0x66>
 800b608:	6829      	ldr	r1, [r5, #0]
 800b60a:	291d      	cmp	r1, #29
 800b60c:	d82c      	bhi.n	800b668 <__sflush_r+0xb8>
 800b60e:	4a2a      	ldr	r2, [pc, #168]	; (800b6b8 <__sflush_r+0x108>)
 800b610:	40ca      	lsrs	r2, r1
 800b612:	07d6      	lsls	r6, r2, #31
 800b614:	d528      	bpl.n	800b668 <__sflush_r+0xb8>
 800b616:	2200      	movs	r2, #0
 800b618:	6062      	str	r2, [r4, #4]
 800b61a:	04d9      	lsls	r1, r3, #19
 800b61c:	6922      	ldr	r2, [r4, #16]
 800b61e:	6022      	str	r2, [r4, #0]
 800b620:	d504      	bpl.n	800b62c <__sflush_r+0x7c>
 800b622:	1c42      	adds	r2, r0, #1
 800b624:	d101      	bne.n	800b62a <__sflush_r+0x7a>
 800b626:	682b      	ldr	r3, [r5, #0]
 800b628:	b903      	cbnz	r3, 800b62c <__sflush_r+0x7c>
 800b62a:	6560      	str	r0, [r4, #84]	; 0x54
 800b62c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b62e:	602f      	str	r7, [r5, #0]
 800b630:	2900      	cmp	r1, #0
 800b632:	d0ca      	beq.n	800b5ca <__sflush_r+0x1a>
 800b634:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b638:	4299      	cmp	r1, r3
 800b63a:	d002      	beq.n	800b642 <__sflush_r+0x92>
 800b63c:	4628      	mov	r0, r5
 800b63e:	f7ff fc7f 	bl	800af40 <_free_r>
 800b642:	2000      	movs	r0, #0
 800b644:	6360      	str	r0, [r4, #52]	; 0x34
 800b646:	e7c1      	b.n	800b5cc <__sflush_r+0x1c>
 800b648:	6a21      	ldr	r1, [r4, #32]
 800b64a:	2301      	movs	r3, #1
 800b64c:	4628      	mov	r0, r5
 800b64e:	47b0      	blx	r6
 800b650:	1c41      	adds	r1, r0, #1
 800b652:	d1c7      	bne.n	800b5e4 <__sflush_r+0x34>
 800b654:	682b      	ldr	r3, [r5, #0]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d0c4      	beq.n	800b5e4 <__sflush_r+0x34>
 800b65a:	2b1d      	cmp	r3, #29
 800b65c:	d001      	beq.n	800b662 <__sflush_r+0xb2>
 800b65e:	2b16      	cmp	r3, #22
 800b660:	d101      	bne.n	800b666 <__sflush_r+0xb6>
 800b662:	602f      	str	r7, [r5, #0]
 800b664:	e7b1      	b.n	800b5ca <__sflush_r+0x1a>
 800b666:	89a3      	ldrh	r3, [r4, #12]
 800b668:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b66c:	81a3      	strh	r3, [r4, #12]
 800b66e:	e7ad      	b.n	800b5cc <__sflush_r+0x1c>
 800b670:	690f      	ldr	r7, [r1, #16]
 800b672:	2f00      	cmp	r7, #0
 800b674:	d0a9      	beq.n	800b5ca <__sflush_r+0x1a>
 800b676:	0793      	lsls	r3, r2, #30
 800b678:	680e      	ldr	r6, [r1, #0]
 800b67a:	bf08      	it	eq
 800b67c:	694b      	ldreq	r3, [r1, #20]
 800b67e:	600f      	str	r7, [r1, #0]
 800b680:	bf18      	it	ne
 800b682:	2300      	movne	r3, #0
 800b684:	eba6 0807 	sub.w	r8, r6, r7
 800b688:	608b      	str	r3, [r1, #8]
 800b68a:	f1b8 0f00 	cmp.w	r8, #0
 800b68e:	dd9c      	ble.n	800b5ca <__sflush_r+0x1a>
 800b690:	6a21      	ldr	r1, [r4, #32]
 800b692:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b694:	4643      	mov	r3, r8
 800b696:	463a      	mov	r2, r7
 800b698:	4628      	mov	r0, r5
 800b69a:	47b0      	blx	r6
 800b69c:	2800      	cmp	r0, #0
 800b69e:	dc06      	bgt.n	800b6ae <__sflush_r+0xfe>
 800b6a0:	89a3      	ldrh	r3, [r4, #12]
 800b6a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6a6:	81a3      	strh	r3, [r4, #12]
 800b6a8:	f04f 30ff 	mov.w	r0, #4294967295
 800b6ac:	e78e      	b.n	800b5cc <__sflush_r+0x1c>
 800b6ae:	4407      	add	r7, r0
 800b6b0:	eba8 0800 	sub.w	r8, r8, r0
 800b6b4:	e7e9      	b.n	800b68a <__sflush_r+0xda>
 800b6b6:	bf00      	nop
 800b6b8:	20400001 	.word	0x20400001

0800b6bc <_fflush_r>:
 800b6bc:	b538      	push	{r3, r4, r5, lr}
 800b6be:	690b      	ldr	r3, [r1, #16]
 800b6c0:	4605      	mov	r5, r0
 800b6c2:	460c      	mov	r4, r1
 800b6c4:	b913      	cbnz	r3, 800b6cc <_fflush_r+0x10>
 800b6c6:	2500      	movs	r5, #0
 800b6c8:	4628      	mov	r0, r5
 800b6ca:	bd38      	pop	{r3, r4, r5, pc}
 800b6cc:	b118      	cbz	r0, 800b6d6 <_fflush_r+0x1a>
 800b6ce:	6983      	ldr	r3, [r0, #24]
 800b6d0:	b90b      	cbnz	r3, 800b6d6 <_fflush_r+0x1a>
 800b6d2:	f000 f887 	bl	800b7e4 <__sinit>
 800b6d6:	4b14      	ldr	r3, [pc, #80]	; (800b728 <_fflush_r+0x6c>)
 800b6d8:	429c      	cmp	r4, r3
 800b6da:	d11b      	bne.n	800b714 <_fflush_r+0x58>
 800b6dc:	686c      	ldr	r4, [r5, #4]
 800b6de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d0ef      	beq.n	800b6c6 <_fflush_r+0xa>
 800b6e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b6e8:	07d0      	lsls	r0, r2, #31
 800b6ea:	d404      	bmi.n	800b6f6 <_fflush_r+0x3a>
 800b6ec:	0599      	lsls	r1, r3, #22
 800b6ee:	d402      	bmi.n	800b6f6 <_fflush_r+0x3a>
 800b6f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b6f2:	f000 f915 	bl	800b920 <__retarget_lock_acquire_recursive>
 800b6f6:	4628      	mov	r0, r5
 800b6f8:	4621      	mov	r1, r4
 800b6fa:	f7ff ff59 	bl	800b5b0 <__sflush_r>
 800b6fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b700:	07da      	lsls	r2, r3, #31
 800b702:	4605      	mov	r5, r0
 800b704:	d4e0      	bmi.n	800b6c8 <_fflush_r+0xc>
 800b706:	89a3      	ldrh	r3, [r4, #12]
 800b708:	059b      	lsls	r3, r3, #22
 800b70a:	d4dd      	bmi.n	800b6c8 <_fflush_r+0xc>
 800b70c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b70e:	f000 f908 	bl	800b922 <__retarget_lock_release_recursive>
 800b712:	e7d9      	b.n	800b6c8 <_fflush_r+0xc>
 800b714:	4b05      	ldr	r3, [pc, #20]	; (800b72c <_fflush_r+0x70>)
 800b716:	429c      	cmp	r4, r3
 800b718:	d101      	bne.n	800b71e <_fflush_r+0x62>
 800b71a:	68ac      	ldr	r4, [r5, #8]
 800b71c:	e7df      	b.n	800b6de <_fflush_r+0x22>
 800b71e:	4b04      	ldr	r3, [pc, #16]	; (800b730 <_fflush_r+0x74>)
 800b720:	429c      	cmp	r4, r3
 800b722:	bf08      	it	eq
 800b724:	68ec      	ldreq	r4, [r5, #12]
 800b726:	e7da      	b.n	800b6de <_fflush_r+0x22>
 800b728:	0800d1d4 	.word	0x0800d1d4
 800b72c:	0800d1f4 	.word	0x0800d1f4
 800b730:	0800d1b4 	.word	0x0800d1b4

0800b734 <std>:
 800b734:	2300      	movs	r3, #0
 800b736:	b510      	push	{r4, lr}
 800b738:	4604      	mov	r4, r0
 800b73a:	e9c0 3300 	strd	r3, r3, [r0]
 800b73e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b742:	6083      	str	r3, [r0, #8]
 800b744:	8181      	strh	r1, [r0, #12]
 800b746:	6643      	str	r3, [r0, #100]	; 0x64
 800b748:	81c2      	strh	r2, [r0, #14]
 800b74a:	6183      	str	r3, [r0, #24]
 800b74c:	4619      	mov	r1, r3
 800b74e:	2208      	movs	r2, #8
 800b750:	305c      	adds	r0, #92	; 0x5c
 800b752:	f7fd fd63 	bl	800921c <memset>
 800b756:	4b05      	ldr	r3, [pc, #20]	; (800b76c <std+0x38>)
 800b758:	6263      	str	r3, [r4, #36]	; 0x24
 800b75a:	4b05      	ldr	r3, [pc, #20]	; (800b770 <std+0x3c>)
 800b75c:	62a3      	str	r3, [r4, #40]	; 0x28
 800b75e:	4b05      	ldr	r3, [pc, #20]	; (800b774 <std+0x40>)
 800b760:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b762:	4b05      	ldr	r3, [pc, #20]	; (800b778 <std+0x44>)
 800b764:	6224      	str	r4, [r4, #32]
 800b766:	6323      	str	r3, [r4, #48]	; 0x30
 800b768:	bd10      	pop	{r4, pc}
 800b76a:	bf00      	nop
 800b76c:	0800ba75 	.word	0x0800ba75
 800b770:	0800ba97 	.word	0x0800ba97
 800b774:	0800bacf 	.word	0x0800bacf
 800b778:	0800baf3 	.word	0x0800baf3

0800b77c <_cleanup_r>:
 800b77c:	4901      	ldr	r1, [pc, #4]	; (800b784 <_cleanup_r+0x8>)
 800b77e:	f000 b8af 	b.w	800b8e0 <_fwalk_reent>
 800b782:	bf00      	nop
 800b784:	0800b6bd 	.word	0x0800b6bd

0800b788 <__sfmoreglue>:
 800b788:	b570      	push	{r4, r5, r6, lr}
 800b78a:	1e4a      	subs	r2, r1, #1
 800b78c:	2568      	movs	r5, #104	; 0x68
 800b78e:	4355      	muls	r5, r2
 800b790:	460e      	mov	r6, r1
 800b792:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b796:	f7ff fc23 	bl	800afe0 <_malloc_r>
 800b79a:	4604      	mov	r4, r0
 800b79c:	b140      	cbz	r0, 800b7b0 <__sfmoreglue+0x28>
 800b79e:	2100      	movs	r1, #0
 800b7a0:	e9c0 1600 	strd	r1, r6, [r0]
 800b7a4:	300c      	adds	r0, #12
 800b7a6:	60a0      	str	r0, [r4, #8]
 800b7a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b7ac:	f7fd fd36 	bl	800921c <memset>
 800b7b0:	4620      	mov	r0, r4
 800b7b2:	bd70      	pop	{r4, r5, r6, pc}

0800b7b4 <__sfp_lock_acquire>:
 800b7b4:	4801      	ldr	r0, [pc, #4]	; (800b7bc <__sfp_lock_acquire+0x8>)
 800b7b6:	f000 b8b3 	b.w	800b920 <__retarget_lock_acquire_recursive>
 800b7ba:	bf00      	nop
 800b7bc:	200003e8 	.word	0x200003e8

0800b7c0 <__sfp_lock_release>:
 800b7c0:	4801      	ldr	r0, [pc, #4]	; (800b7c8 <__sfp_lock_release+0x8>)
 800b7c2:	f000 b8ae 	b.w	800b922 <__retarget_lock_release_recursive>
 800b7c6:	bf00      	nop
 800b7c8:	200003e8 	.word	0x200003e8

0800b7cc <__sinit_lock_acquire>:
 800b7cc:	4801      	ldr	r0, [pc, #4]	; (800b7d4 <__sinit_lock_acquire+0x8>)
 800b7ce:	f000 b8a7 	b.w	800b920 <__retarget_lock_acquire_recursive>
 800b7d2:	bf00      	nop
 800b7d4:	200003e3 	.word	0x200003e3

0800b7d8 <__sinit_lock_release>:
 800b7d8:	4801      	ldr	r0, [pc, #4]	; (800b7e0 <__sinit_lock_release+0x8>)
 800b7da:	f000 b8a2 	b.w	800b922 <__retarget_lock_release_recursive>
 800b7de:	bf00      	nop
 800b7e0:	200003e3 	.word	0x200003e3

0800b7e4 <__sinit>:
 800b7e4:	b510      	push	{r4, lr}
 800b7e6:	4604      	mov	r4, r0
 800b7e8:	f7ff fff0 	bl	800b7cc <__sinit_lock_acquire>
 800b7ec:	69a3      	ldr	r3, [r4, #24]
 800b7ee:	b11b      	cbz	r3, 800b7f8 <__sinit+0x14>
 800b7f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b7f4:	f7ff bff0 	b.w	800b7d8 <__sinit_lock_release>
 800b7f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b7fc:	6523      	str	r3, [r4, #80]	; 0x50
 800b7fe:	4b13      	ldr	r3, [pc, #76]	; (800b84c <__sinit+0x68>)
 800b800:	4a13      	ldr	r2, [pc, #76]	; (800b850 <__sinit+0x6c>)
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	62a2      	str	r2, [r4, #40]	; 0x28
 800b806:	42a3      	cmp	r3, r4
 800b808:	bf04      	itt	eq
 800b80a:	2301      	moveq	r3, #1
 800b80c:	61a3      	streq	r3, [r4, #24]
 800b80e:	4620      	mov	r0, r4
 800b810:	f000 f820 	bl	800b854 <__sfp>
 800b814:	6060      	str	r0, [r4, #4]
 800b816:	4620      	mov	r0, r4
 800b818:	f000 f81c 	bl	800b854 <__sfp>
 800b81c:	60a0      	str	r0, [r4, #8]
 800b81e:	4620      	mov	r0, r4
 800b820:	f000 f818 	bl	800b854 <__sfp>
 800b824:	2200      	movs	r2, #0
 800b826:	60e0      	str	r0, [r4, #12]
 800b828:	2104      	movs	r1, #4
 800b82a:	6860      	ldr	r0, [r4, #4]
 800b82c:	f7ff ff82 	bl	800b734 <std>
 800b830:	68a0      	ldr	r0, [r4, #8]
 800b832:	2201      	movs	r2, #1
 800b834:	2109      	movs	r1, #9
 800b836:	f7ff ff7d 	bl	800b734 <std>
 800b83a:	68e0      	ldr	r0, [r4, #12]
 800b83c:	2202      	movs	r2, #2
 800b83e:	2112      	movs	r1, #18
 800b840:	f7ff ff78 	bl	800b734 <std>
 800b844:	2301      	movs	r3, #1
 800b846:	61a3      	str	r3, [r4, #24]
 800b848:	e7d2      	b.n	800b7f0 <__sinit+0xc>
 800b84a:	bf00      	nop
 800b84c:	0800ce34 	.word	0x0800ce34
 800b850:	0800b77d 	.word	0x0800b77d

0800b854 <__sfp>:
 800b854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b856:	4607      	mov	r7, r0
 800b858:	f7ff ffac 	bl	800b7b4 <__sfp_lock_acquire>
 800b85c:	4b1e      	ldr	r3, [pc, #120]	; (800b8d8 <__sfp+0x84>)
 800b85e:	681e      	ldr	r6, [r3, #0]
 800b860:	69b3      	ldr	r3, [r6, #24]
 800b862:	b913      	cbnz	r3, 800b86a <__sfp+0x16>
 800b864:	4630      	mov	r0, r6
 800b866:	f7ff ffbd 	bl	800b7e4 <__sinit>
 800b86a:	3648      	adds	r6, #72	; 0x48
 800b86c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b870:	3b01      	subs	r3, #1
 800b872:	d503      	bpl.n	800b87c <__sfp+0x28>
 800b874:	6833      	ldr	r3, [r6, #0]
 800b876:	b30b      	cbz	r3, 800b8bc <__sfp+0x68>
 800b878:	6836      	ldr	r6, [r6, #0]
 800b87a:	e7f7      	b.n	800b86c <__sfp+0x18>
 800b87c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b880:	b9d5      	cbnz	r5, 800b8b8 <__sfp+0x64>
 800b882:	4b16      	ldr	r3, [pc, #88]	; (800b8dc <__sfp+0x88>)
 800b884:	60e3      	str	r3, [r4, #12]
 800b886:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b88a:	6665      	str	r5, [r4, #100]	; 0x64
 800b88c:	f000 f847 	bl	800b91e <__retarget_lock_init_recursive>
 800b890:	f7ff ff96 	bl	800b7c0 <__sfp_lock_release>
 800b894:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b898:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b89c:	6025      	str	r5, [r4, #0]
 800b89e:	61a5      	str	r5, [r4, #24]
 800b8a0:	2208      	movs	r2, #8
 800b8a2:	4629      	mov	r1, r5
 800b8a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b8a8:	f7fd fcb8 	bl	800921c <memset>
 800b8ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b8b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b8b4:	4620      	mov	r0, r4
 800b8b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8b8:	3468      	adds	r4, #104	; 0x68
 800b8ba:	e7d9      	b.n	800b870 <__sfp+0x1c>
 800b8bc:	2104      	movs	r1, #4
 800b8be:	4638      	mov	r0, r7
 800b8c0:	f7ff ff62 	bl	800b788 <__sfmoreglue>
 800b8c4:	4604      	mov	r4, r0
 800b8c6:	6030      	str	r0, [r6, #0]
 800b8c8:	2800      	cmp	r0, #0
 800b8ca:	d1d5      	bne.n	800b878 <__sfp+0x24>
 800b8cc:	f7ff ff78 	bl	800b7c0 <__sfp_lock_release>
 800b8d0:	230c      	movs	r3, #12
 800b8d2:	603b      	str	r3, [r7, #0]
 800b8d4:	e7ee      	b.n	800b8b4 <__sfp+0x60>
 800b8d6:	bf00      	nop
 800b8d8:	0800ce34 	.word	0x0800ce34
 800b8dc:	ffff0001 	.word	0xffff0001

0800b8e0 <_fwalk_reent>:
 800b8e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8e4:	4606      	mov	r6, r0
 800b8e6:	4688      	mov	r8, r1
 800b8e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b8ec:	2700      	movs	r7, #0
 800b8ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b8f2:	f1b9 0901 	subs.w	r9, r9, #1
 800b8f6:	d505      	bpl.n	800b904 <_fwalk_reent+0x24>
 800b8f8:	6824      	ldr	r4, [r4, #0]
 800b8fa:	2c00      	cmp	r4, #0
 800b8fc:	d1f7      	bne.n	800b8ee <_fwalk_reent+0xe>
 800b8fe:	4638      	mov	r0, r7
 800b900:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b904:	89ab      	ldrh	r3, [r5, #12]
 800b906:	2b01      	cmp	r3, #1
 800b908:	d907      	bls.n	800b91a <_fwalk_reent+0x3a>
 800b90a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b90e:	3301      	adds	r3, #1
 800b910:	d003      	beq.n	800b91a <_fwalk_reent+0x3a>
 800b912:	4629      	mov	r1, r5
 800b914:	4630      	mov	r0, r6
 800b916:	47c0      	blx	r8
 800b918:	4307      	orrs	r7, r0
 800b91a:	3568      	adds	r5, #104	; 0x68
 800b91c:	e7e9      	b.n	800b8f2 <_fwalk_reent+0x12>

0800b91e <__retarget_lock_init_recursive>:
 800b91e:	4770      	bx	lr

0800b920 <__retarget_lock_acquire_recursive>:
 800b920:	4770      	bx	lr

0800b922 <__retarget_lock_release_recursive>:
 800b922:	4770      	bx	lr

0800b924 <__swhatbuf_r>:
 800b924:	b570      	push	{r4, r5, r6, lr}
 800b926:	460e      	mov	r6, r1
 800b928:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b92c:	2900      	cmp	r1, #0
 800b92e:	b096      	sub	sp, #88	; 0x58
 800b930:	4614      	mov	r4, r2
 800b932:	461d      	mov	r5, r3
 800b934:	da07      	bge.n	800b946 <__swhatbuf_r+0x22>
 800b936:	2300      	movs	r3, #0
 800b938:	602b      	str	r3, [r5, #0]
 800b93a:	89b3      	ldrh	r3, [r6, #12]
 800b93c:	061a      	lsls	r2, r3, #24
 800b93e:	d410      	bmi.n	800b962 <__swhatbuf_r+0x3e>
 800b940:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b944:	e00e      	b.n	800b964 <__swhatbuf_r+0x40>
 800b946:	466a      	mov	r2, sp
 800b948:	f000 f8fa 	bl	800bb40 <_fstat_r>
 800b94c:	2800      	cmp	r0, #0
 800b94e:	dbf2      	blt.n	800b936 <__swhatbuf_r+0x12>
 800b950:	9a01      	ldr	r2, [sp, #4]
 800b952:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b956:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b95a:	425a      	negs	r2, r3
 800b95c:	415a      	adcs	r2, r3
 800b95e:	602a      	str	r2, [r5, #0]
 800b960:	e7ee      	b.n	800b940 <__swhatbuf_r+0x1c>
 800b962:	2340      	movs	r3, #64	; 0x40
 800b964:	2000      	movs	r0, #0
 800b966:	6023      	str	r3, [r4, #0]
 800b968:	b016      	add	sp, #88	; 0x58
 800b96a:	bd70      	pop	{r4, r5, r6, pc}

0800b96c <__smakebuf_r>:
 800b96c:	898b      	ldrh	r3, [r1, #12]
 800b96e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b970:	079d      	lsls	r5, r3, #30
 800b972:	4606      	mov	r6, r0
 800b974:	460c      	mov	r4, r1
 800b976:	d507      	bpl.n	800b988 <__smakebuf_r+0x1c>
 800b978:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b97c:	6023      	str	r3, [r4, #0]
 800b97e:	6123      	str	r3, [r4, #16]
 800b980:	2301      	movs	r3, #1
 800b982:	6163      	str	r3, [r4, #20]
 800b984:	b002      	add	sp, #8
 800b986:	bd70      	pop	{r4, r5, r6, pc}
 800b988:	ab01      	add	r3, sp, #4
 800b98a:	466a      	mov	r2, sp
 800b98c:	f7ff ffca 	bl	800b924 <__swhatbuf_r>
 800b990:	9900      	ldr	r1, [sp, #0]
 800b992:	4605      	mov	r5, r0
 800b994:	4630      	mov	r0, r6
 800b996:	f7ff fb23 	bl	800afe0 <_malloc_r>
 800b99a:	b948      	cbnz	r0, 800b9b0 <__smakebuf_r+0x44>
 800b99c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9a0:	059a      	lsls	r2, r3, #22
 800b9a2:	d4ef      	bmi.n	800b984 <__smakebuf_r+0x18>
 800b9a4:	f023 0303 	bic.w	r3, r3, #3
 800b9a8:	f043 0302 	orr.w	r3, r3, #2
 800b9ac:	81a3      	strh	r3, [r4, #12]
 800b9ae:	e7e3      	b.n	800b978 <__smakebuf_r+0xc>
 800b9b0:	4b0d      	ldr	r3, [pc, #52]	; (800b9e8 <__smakebuf_r+0x7c>)
 800b9b2:	62b3      	str	r3, [r6, #40]	; 0x28
 800b9b4:	89a3      	ldrh	r3, [r4, #12]
 800b9b6:	6020      	str	r0, [r4, #0]
 800b9b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9bc:	81a3      	strh	r3, [r4, #12]
 800b9be:	9b00      	ldr	r3, [sp, #0]
 800b9c0:	6163      	str	r3, [r4, #20]
 800b9c2:	9b01      	ldr	r3, [sp, #4]
 800b9c4:	6120      	str	r0, [r4, #16]
 800b9c6:	b15b      	cbz	r3, 800b9e0 <__smakebuf_r+0x74>
 800b9c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b9cc:	4630      	mov	r0, r6
 800b9ce:	f000 f8c9 	bl	800bb64 <_isatty_r>
 800b9d2:	b128      	cbz	r0, 800b9e0 <__smakebuf_r+0x74>
 800b9d4:	89a3      	ldrh	r3, [r4, #12]
 800b9d6:	f023 0303 	bic.w	r3, r3, #3
 800b9da:	f043 0301 	orr.w	r3, r3, #1
 800b9de:	81a3      	strh	r3, [r4, #12]
 800b9e0:	89a0      	ldrh	r0, [r4, #12]
 800b9e2:	4305      	orrs	r5, r0
 800b9e4:	81a5      	strh	r5, [r4, #12]
 800b9e6:	e7cd      	b.n	800b984 <__smakebuf_r+0x18>
 800b9e8:	0800b77d 	.word	0x0800b77d

0800b9ec <_raise_r>:
 800b9ec:	291f      	cmp	r1, #31
 800b9ee:	b538      	push	{r3, r4, r5, lr}
 800b9f0:	4604      	mov	r4, r0
 800b9f2:	460d      	mov	r5, r1
 800b9f4:	d904      	bls.n	800ba00 <_raise_r+0x14>
 800b9f6:	2316      	movs	r3, #22
 800b9f8:	6003      	str	r3, [r0, #0]
 800b9fa:	f04f 30ff 	mov.w	r0, #4294967295
 800b9fe:	bd38      	pop	{r3, r4, r5, pc}
 800ba00:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ba02:	b112      	cbz	r2, 800ba0a <_raise_r+0x1e>
 800ba04:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ba08:	b94b      	cbnz	r3, 800ba1e <_raise_r+0x32>
 800ba0a:	4620      	mov	r0, r4
 800ba0c:	f000 f830 	bl	800ba70 <_getpid_r>
 800ba10:	462a      	mov	r2, r5
 800ba12:	4601      	mov	r1, r0
 800ba14:	4620      	mov	r0, r4
 800ba16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba1a:	f000 b817 	b.w	800ba4c <_kill_r>
 800ba1e:	2b01      	cmp	r3, #1
 800ba20:	d00a      	beq.n	800ba38 <_raise_r+0x4c>
 800ba22:	1c59      	adds	r1, r3, #1
 800ba24:	d103      	bne.n	800ba2e <_raise_r+0x42>
 800ba26:	2316      	movs	r3, #22
 800ba28:	6003      	str	r3, [r0, #0]
 800ba2a:	2001      	movs	r0, #1
 800ba2c:	e7e7      	b.n	800b9fe <_raise_r+0x12>
 800ba2e:	2400      	movs	r4, #0
 800ba30:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ba34:	4628      	mov	r0, r5
 800ba36:	4798      	blx	r3
 800ba38:	2000      	movs	r0, #0
 800ba3a:	e7e0      	b.n	800b9fe <_raise_r+0x12>

0800ba3c <raise>:
 800ba3c:	4b02      	ldr	r3, [pc, #8]	; (800ba48 <raise+0xc>)
 800ba3e:	4601      	mov	r1, r0
 800ba40:	6818      	ldr	r0, [r3, #0]
 800ba42:	f7ff bfd3 	b.w	800b9ec <_raise_r>
 800ba46:	bf00      	nop
 800ba48:	20000024 	.word	0x20000024

0800ba4c <_kill_r>:
 800ba4c:	b538      	push	{r3, r4, r5, lr}
 800ba4e:	4d07      	ldr	r5, [pc, #28]	; (800ba6c <_kill_r+0x20>)
 800ba50:	2300      	movs	r3, #0
 800ba52:	4604      	mov	r4, r0
 800ba54:	4608      	mov	r0, r1
 800ba56:	4611      	mov	r1, r2
 800ba58:	602b      	str	r3, [r5, #0]
 800ba5a:	f7f6 faeb 	bl	8002034 <_kill>
 800ba5e:	1c43      	adds	r3, r0, #1
 800ba60:	d102      	bne.n	800ba68 <_kill_r+0x1c>
 800ba62:	682b      	ldr	r3, [r5, #0]
 800ba64:	b103      	cbz	r3, 800ba68 <_kill_r+0x1c>
 800ba66:	6023      	str	r3, [r4, #0]
 800ba68:	bd38      	pop	{r3, r4, r5, pc}
 800ba6a:	bf00      	nop
 800ba6c:	200003dc 	.word	0x200003dc

0800ba70 <_getpid_r>:
 800ba70:	f7f6 bad8 	b.w	8002024 <_getpid>

0800ba74 <__sread>:
 800ba74:	b510      	push	{r4, lr}
 800ba76:	460c      	mov	r4, r1
 800ba78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba7c:	f000 f894 	bl	800bba8 <_read_r>
 800ba80:	2800      	cmp	r0, #0
 800ba82:	bfab      	itete	ge
 800ba84:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ba86:	89a3      	ldrhlt	r3, [r4, #12]
 800ba88:	181b      	addge	r3, r3, r0
 800ba8a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ba8e:	bfac      	ite	ge
 800ba90:	6563      	strge	r3, [r4, #84]	; 0x54
 800ba92:	81a3      	strhlt	r3, [r4, #12]
 800ba94:	bd10      	pop	{r4, pc}

0800ba96 <__swrite>:
 800ba96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba9a:	461f      	mov	r7, r3
 800ba9c:	898b      	ldrh	r3, [r1, #12]
 800ba9e:	05db      	lsls	r3, r3, #23
 800baa0:	4605      	mov	r5, r0
 800baa2:	460c      	mov	r4, r1
 800baa4:	4616      	mov	r6, r2
 800baa6:	d505      	bpl.n	800bab4 <__swrite+0x1e>
 800baa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800baac:	2302      	movs	r3, #2
 800baae:	2200      	movs	r2, #0
 800bab0:	f000 f868 	bl	800bb84 <_lseek_r>
 800bab4:	89a3      	ldrh	r3, [r4, #12]
 800bab6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800baba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800babe:	81a3      	strh	r3, [r4, #12]
 800bac0:	4632      	mov	r2, r6
 800bac2:	463b      	mov	r3, r7
 800bac4:	4628      	mov	r0, r5
 800bac6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800baca:	f000 b817 	b.w	800bafc <_write_r>

0800bace <__sseek>:
 800bace:	b510      	push	{r4, lr}
 800bad0:	460c      	mov	r4, r1
 800bad2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bad6:	f000 f855 	bl	800bb84 <_lseek_r>
 800bada:	1c43      	adds	r3, r0, #1
 800badc:	89a3      	ldrh	r3, [r4, #12]
 800bade:	bf15      	itete	ne
 800bae0:	6560      	strne	r0, [r4, #84]	; 0x54
 800bae2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bae6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800baea:	81a3      	strheq	r3, [r4, #12]
 800baec:	bf18      	it	ne
 800baee:	81a3      	strhne	r3, [r4, #12]
 800baf0:	bd10      	pop	{r4, pc}

0800baf2 <__sclose>:
 800baf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800baf6:	f000 b813 	b.w	800bb20 <_close_r>
	...

0800bafc <_write_r>:
 800bafc:	b538      	push	{r3, r4, r5, lr}
 800bafe:	4d07      	ldr	r5, [pc, #28]	; (800bb1c <_write_r+0x20>)
 800bb00:	4604      	mov	r4, r0
 800bb02:	4608      	mov	r0, r1
 800bb04:	4611      	mov	r1, r2
 800bb06:	2200      	movs	r2, #0
 800bb08:	602a      	str	r2, [r5, #0]
 800bb0a:	461a      	mov	r2, r3
 800bb0c:	f7f6 fac9 	bl	80020a2 <_write>
 800bb10:	1c43      	adds	r3, r0, #1
 800bb12:	d102      	bne.n	800bb1a <_write_r+0x1e>
 800bb14:	682b      	ldr	r3, [r5, #0]
 800bb16:	b103      	cbz	r3, 800bb1a <_write_r+0x1e>
 800bb18:	6023      	str	r3, [r4, #0]
 800bb1a:	bd38      	pop	{r3, r4, r5, pc}
 800bb1c:	200003dc 	.word	0x200003dc

0800bb20 <_close_r>:
 800bb20:	b538      	push	{r3, r4, r5, lr}
 800bb22:	4d06      	ldr	r5, [pc, #24]	; (800bb3c <_close_r+0x1c>)
 800bb24:	2300      	movs	r3, #0
 800bb26:	4604      	mov	r4, r0
 800bb28:	4608      	mov	r0, r1
 800bb2a:	602b      	str	r3, [r5, #0]
 800bb2c:	f7f6 fad5 	bl	80020da <_close>
 800bb30:	1c43      	adds	r3, r0, #1
 800bb32:	d102      	bne.n	800bb3a <_close_r+0x1a>
 800bb34:	682b      	ldr	r3, [r5, #0]
 800bb36:	b103      	cbz	r3, 800bb3a <_close_r+0x1a>
 800bb38:	6023      	str	r3, [r4, #0]
 800bb3a:	bd38      	pop	{r3, r4, r5, pc}
 800bb3c:	200003dc 	.word	0x200003dc

0800bb40 <_fstat_r>:
 800bb40:	b538      	push	{r3, r4, r5, lr}
 800bb42:	4d07      	ldr	r5, [pc, #28]	; (800bb60 <_fstat_r+0x20>)
 800bb44:	2300      	movs	r3, #0
 800bb46:	4604      	mov	r4, r0
 800bb48:	4608      	mov	r0, r1
 800bb4a:	4611      	mov	r1, r2
 800bb4c:	602b      	str	r3, [r5, #0]
 800bb4e:	f7f6 fad0 	bl	80020f2 <_fstat>
 800bb52:	1c43      	adds	r3, r0, #1
 800bb54:	d102      	bne.n	800bb5c <_fstat_r+0x1c>
 800bb56:	682b      	ldr	r3, [r5, #0]
 800bb58:	b103      	cbz	r3, 800bb5c <_fstat_r+0x1c>
 800bb5a:	6023      	str	r3, [r4, #0]
 800bb5c:	bd38      	pop	{r3, r4, r5, pc}
 800bb5e:	bf00      	nop
 800bb60:	200003dc 	.word	0x200003dc

0800bb64 <_isatty_r>:
 800bb64:	b538      	push	{r3, r4, r5, lr}
 800bb66:	4d06      	ldr	r5, [pc, #24]	; (800bb80 <_isatty_r+0x1c>)
 800bb68:	2300      	movs	r3, #0
 800bb6a:	4604      	mov	r4, r0
 800bb6c:	4608      	mov	r0, r1
 800bb6e:	602b      	str	r3, [r5, #0]
 800bb70:	f7f6 facf 	bl	8002112 <_isatty>
 800bb74:	1c43      	adds	r3, r0, #1
 800bb76:	d102      	bne.n	800bb7e <_isatty_r+0x1a>
 800bb78:	682b      	ldr	r3, [r5, #0]
 800bb7a:	b103      	cbz	r3, 800bb7e <_isatty_r+0x1a>
 800bb7c:	6023      	str	r3, [r4, #0]
 800bb7e:	bd38      	pop	{r3, r4, r5, pc}
 800bb80:	200003dc 	.word	0x200003dc

0800bb84 <_lseek_r>:
 800bb84:	b538      	push	{r3, r4, r5, lr}
 800bb86:	4d07      	ldr	r5, [pc, #28]	; (800bba4 <_lseek_r+0x20>)
 800bb88:	4604      	mov	r4, r0
 800bb8a:	4608      	mov	r0, r1
 800bb8c:	4611      	mov	r1, r2
 800bb8e:	2200      	movs	r2, #0
 800bb90:	602a      	str	r2, [r5, #0]
 800bb92:	461a      	mov	r2, r3
 800bb94:	f7f6 fac8 	bl	8002128 <_lseek>
 800bb98:	1c43      	adds	r3, r0, #1
 800bb9a:	d102      	bne.n	800bba2 <_lseek_r+0x1e>
 800bb9c:	682b      	ldr	r3, [r5, #0]
 800bb9e:	b103      	cbz	r3, 800bba2 <_lseek_r+0x1e>
 800bba0:	6023      	str	r3, [r4, #0]
 800bba2:	bd38      	pop	{r3, r4, r5, pc}
 800bba4:	200003dc 	.word	0x200003dc

0800bba8 <_read_r>:
 800bba8:	b538      	push	{r3, r4, r5, lr}
 800bbaa:	4d07      	ldr	r5, [pc, #28]	; (800bbc8 <_read_r+0x20>)
 800bbac:	4604      	mov	r4, r0
 800bbae:	4608      	mov	r0, r1
 800bbb0:	4611      	mov	r1, r2
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	602a      	str	r2, [r5, #0]
 800bbb6:	461a      	mov	r2, r3
 800bbb8:	f7f6 fa56 	bl	8002068 <_read>
 800bbbc:	1c43      	adds	r3, r0, #1
 800bbbe:	d102      	bne.n	800bbc6 <_read_r+0x1e>
 800bbc0:	682b      	ldr	r3, [r5, #0]
 800bbc2:	b103      	cbz	r3, 800bbc6 <_read_r+0x1e>
 800bbc4:	6023      	str	r3, [r4, #0]
 800bbc6:	bd38      	pop	{r3, r4, r5, pc}
 800bbc8:	200003dc 	.word	0x200003dc

0800bbcc <atan2>:
 800bbcc:	f000 b834 	b.w	800bc38 <__ieee754_atan2>

0800bbd0 <sqrt>:
 800bbd0:	b538      	push	{r3, r4, r5, lr}
 800bbd2:	ed2d 8b02 	vpush	{d8}
 800bbd6:	ec55 4b10 	vmov	r4, r5, d0
 800bbda:	f000 f8f7 	bl	800bdcc <__ieee754_sqrt>
 800bbde:	4b15      	ldr	r3, [pc, #84]	; (800bc34 <sqrt+0x64>)
 800bbe0:	eeb0 8a40 	vmov.f32	s16, s0
 800bbe4:	eef0 8a60 	vmov.f32	s17, s1
 800bbe8:	f993 3000 	ldrsb.w	r3, [r3]
 800bbec:	3301      	adds	r3, #1
 800bbee:	d019      	beq.n	800bc24 <sqrt+0x54>
 800bbf0:	4622      	mov	r2, r4
 800bbf2:	462b      	mov	r3, r5
 800bbf4:	4620      	mov	r0, r4
 800bbf6:	4629      	mov	r1, r5
 800bbf8:	f7f4 ffb8 	bl	8000b6c <__aeabi_dcmpun>
 800bbfc:	b990      	cbnz	r0, 800bc24 <sqrt+0x54>
 800bbfe:	2200      	movs	r2, #0
 800bc00:	2300      	movs	r3, #0
 800bc02:	4620      	mov	r0, r4
 800bc04:	4629      	mov	r1, r5
 800bc06:	f7f4 ff89 	bl	8000b1c <__aeabi_dcmplt>
 800bc0a:	b158      	cbz	r0, 800bc24 <sqrt+0x54>
 800bc0c:	f7fd fadc 	bl	80091c8 <__errno>
 800bc10:	2321      	movs	r3, #33	; 0x21
 800bc12:	6003      	str	r3, [r0, #0]
 800bc14:	2200      	movs	r2, #0
 800bc16:	2300      	movs	r3, #0
 800bc18:	4610      	mov	r0, r2
 800bc1a:	4619      	mov	r1, r3
 800bc1c:	f7f4 fe36 	bl	800088c <__aeabi_ddiv>
 800bc20:	ec41 0b18 	vmov	d8, r0, r1
 800bc24:	eeb0 0a48 	vmov.f32	s0, s16
 800bc28:	eef0 0a68 	vmov.f32	s1, s17
 800bc2c:	ecbd 8b02 	vpop	{d8}
 800bc30:	bd38      	pop	{r3, r4, r5, pc}
 800bc32:	bf00      	nop
 800bc34:	200001f4 	.word	0x200001f4

0800bc38 <__ieee754_atan2>:
 800bc38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc3c:	ec57 6b11 	vmov	r6, r7, d1
 800bc40:	4273      	negs	r3, r6
 800bc42:	f8df e184 	ldr.w	lr, [pc, #388]	; 800bdc8 <__ieee754_atan2+0x190>
 800bc46:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800bc4a:	4333      	orrs	r3, r6
 800bc4c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800bc50:	4573      	cmp	r3, lr
 800bc52:	ec51 0b10 	vmov	r0, r1, d0
 800bc56:	ee11 8a10 	vmov	r8, s2
 800bc5a:	d80a      	bhi.n	800bc72 <__ieee754_atan2+0x3a>
 800bc5c:	4244      	negs	r4, r0
 800bc5e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bc62:	4304      	orrs	r4, r0
 800bc64:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800bc68:	4574      	cmp	r4, lr
 800bc6a:	ee10 9a10 	vmov	r9, s0
 800bc6e:	468c      	mov	ip, r1
 800bc70:	d907      	bls.n	800bc82 <__ieee754_atan2+0x4a>
 800bc72:	4632      	mov	r2, r6
 800bc74:	463b      	mov	r3, r7
 800bc76:	f7f4 fb29 	bl	80002cc <__adddf3>
 800bc7a:	ec41 0b10 	vmov	d0, r0, r1
 800bc7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc82:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800bc86:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800bc8a:	4334      	orrs	r4, r6
 800bc8c:	d103      	bne.n	800bc96 <__ieee754_atan2+0x5e>
 800bc8e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc92:	f000 b951 	b.w	800bf38 <atan>
 800bc96:	17bc      	asrs	r4, r7, #30
 800bc98:	f004 0402 	and.w	r4, r4, #2
 800bc9c:	ea53 0909 	orrs.w	r9, r3, r9
 800bca0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800bca4:	d107      	bne.n	800bcb6 <__ieee754_atan2+0x7e>
 800bca6:	2c02      	cmp	r4, #2
 800bca8:	d060      	beq.n	800bd6c <__ieee754_atan2+0x134>
 800bcaa:	2c03      	cmp	r4, #3
 800bcac:	d1e5      	bne.n	800bc7a <__ieee754_atan2+0x42>
 800bcae:	a142      	add	r1, pc, #264	; (adr r1, 800bdb8 <__ieee754_atan2+0x180>)
 800bcb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bcb4:	e7e1      	b.n	800bc7a <__ieee754_atan2+0x42>
 800bcb6:	ea52 0808 	orrs.w	r8, r2, r8
 800bcba:	d106      	bne.n	800bcca <__ieee754_atan2+0x92>
 800bcbc:	f1bc 0f00 	cmp.w	ip, #0
 800bcc0:	da5f      	bge.n	800bd82 <__ieee754_atan2+0x14a>
 800bcc2:	a13f      	add	r1, pc, #252	; (adr r1, 800bdc0 <__ieee754_atan2+0x188>)
 800bcc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bcc8:	e7d7      	b.n	800bc7a <__ieee754_atan2+0x42>
 800bcca:	4572      	cmp	r2, lr
 800bccc:	d10f      	bne.n	800bcee <__ieee754_atan2+0xb6>
 800bcce:	4293      	cmp	r3, r2
 800bcd0:	f104 34ff 	add.w	r4, r4, #4294967295
 800bcd4:	d107      	bne.n	800bce6 <__ieee754_atan2+0xae>
 800bcd6:	2c02      	cmp	r4, #2
 800bcd8:	d84c      	bhi.n	800bd74 <__ieee754_atan2+0x13c>
 800bcda:	4b35      	ldr	r3, [pc, #212]	; (800bdb0 <__ieee754_atan2+0x178>)
 800bcdc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800bce0:	e9d4 0100 	ldrd	r0, r1, [r4]
 800bce4:	e7c9      	b.n	800bc7a <__ieee754_atan2+0x42>
 800bce6:	2c02      	cmp	r4, #2
 800bce8:	d848      	bhi.n	800bd7c <__ieee754_atan2+0x144>
 800bcea:	4b32      	ldr	r3, [pc, #200]	; (800bdb4 <__ieee754_atan2+0x17c>)
 800bcec:	e7f6      	b.n	800bcdc <__ieee754_atan2+0xa4>
 800bcee:	4573      	cmp	r3, lr
 800bcf0:	d0e4      	beq.n	800bcbc <__ieee754_atan2+0x84>
 800bcf2:	1a9b      	subs	r3, r3, r2
 800bcf4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800bcf8:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bcfc:	da1e      	bge.n	800bd3c <__ieee754_atan2+0x104>
 800bcfe:	2f00      	cmp	r7, #0
 800bd00:	da01      	bge.n	800bd06 <__ieee754_atan2+0xce>
 800bd02:	323c      	adds	r2, #60	; 0x3c
 800bd04:	db1e      	blt.n	800bd44 <__ieee754_atan2+0x10c>
 800bd06:	4632      	mov	r2, r6
 800bd08:	463b      	mov	r3, r7
 800bd0a:	f7f4 fdbf 	bl	800088c <__aeabi_ddiv>
 800bd0e:	ec41 0b10 	vmov	d0, r0, r1
 800bd12:	f000 fab1 	bl	800c278 <fabs>
 800bd16:	f000 f90f 	bl	800bf38 <atan>
 800bd1a:	ec51 0b10 	vmov	r0, r1, d0
 800bd1e:	2c01      	cmp	r4, #1
 800bd20:	d013      	beq.n	800bd4a <__ieee754_atan2+0x112>
 800bd22:	2c02      	cmp	r4, #2
 800bd24:	d015      	beq.n	800bd52 <__ieee754_atan2+0x11a>
 800bd26:	2c00      	cmp	r4, #0
 800bd28:	d0a7      	beq.n	800bc7a <__ieee754_atan2+0x42>
 800bd2a:	a319      	add	r3, pc, #100	; (adr r3, 800bd90 <__ieee754_atan2+0x158>)
 800bd2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd30:	f7f4 faca 	bl	80002c8 <__aeabi_dsub>
 800bd34:	a318      	add	r3, pc, #96	; (adr r3, 800bd98 <__ieee754_atan2+0x160>)
 800bd36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd3a:	e014      	b.n	800bd66 <__ieee754_atan2+0x12e>
 800bd3c:	a118      	add	r1, pc, #96	; (adr r1, 800bda0 <__ieee754_atan2+0x168>)
 800bd3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd42:	e7ec      	b.n	800bd1e <__ieee754_atan2+0xe6>
 800bd44:	2000      	movs	r0, #0
 800bd46:	2100      	movs	r1, #0
 800bd48:	e7e9      	b.n	800bd1e <__ieee754_atan2+0xe6>
 800bd4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bd4e:	4619      	mov	r1, r3
 800bd50:	e793      	b.n	800bc7a <__ieee754_atan2+0x42>
 800bd52:	a30f      	add	r3, pc, #60	; (adr r3, 800bd90 <__ieee754_atan2+0x158>)
 800bd54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd58:	f7f4 fab6 	bl	80002c8 <__aeabi_dsub>
 800bd5c:	4602      	mov	r2, r0
 800bd5e:	460b      	mov	r3, r1
 800bd60:	a10d      	add	r1, pc, #52	; (adr r1, 800bd98 <__ieee754_atan2+0x160>)
 800bd62:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd66:	f7f4 faaf 	bl	80002c8 <__aeabi_dsub>
 800bd6a:	e786      	b.n	800bc7a <__ieee754_atan2+0x42>
 800bd6c:	a10a      	add	r1, pc, #40	; (adr r1, 800bd98 <__ieee754_atan2+0x160>)
 800bd6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd72:	e782      	b.n	800bc7a <__ieee754_atan2+0x42>
 800bd74:	a10c      	add	r1, pc, #48	; (adr r1, 800bda8 <__ieee754_atan2+0x170>)
 800bd76:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd7a:	e77e      	b.n	800bc7a <__ieee754_atan2+0x42>
 800bd7c:	2000      	movs	r0, #0
 800bd7e:	2100      	movs	r1, #0
 800bd80:	e77b      	b.n	800bc7a <__ieee754_atan2+0x42>
 800bd82:	a107      	add	r1, pc, #28	; (adr r1, 800bda0 <__ieee754_atan2+0x168>)
 800bd84:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd88:	e777      	b.n	800bc7a <__ieee754_atan2+0x42>
 800bd8a:	bf00      	nop
 800bd8c:	f3af 8000 	nop.w
 800bd90:	33145c07 	.word	0x33145c07
 800bd94:	3ca1a626 	.word	0x3ca1a626
 800bd98:	54442d18 	.word	0x54442d18
 800bd9c:	400921fb 	.word	0x400921fb
 800bda0:	54442d18 	.word	0x54442d18
 800bda4:	3ff921fb 	.word	0x3ff921fb
 800bda8:	54442d18 	.word	0x54442d18
 800bdac:	3fe921fb 	.word	0x3fe921fb
 800bdb0:	0800d218 	.word	0x0800d218
 800bdb4:	0800d230 	.word	0x0800d230
 800bdb8:	54442d18 	.word	0x54442d18
 800bdbc:	c00921fb 	.word	0xc00921fb
 800bdc0:	54442d18 	.word	0x54442d18
 800bdc4:	bff921fb 	.word	0xbff921fb
 800bdc8:	7ff00000 	.word	0x7ff00000

0800bdcc <__ieee754_sqrt>:
 800bdcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdd0:	ec55 4b10 	vmov	r4, r5, d0
 800bdd4:	4e56      	ldr	r6, [pc, #344]	; (800bf30 <__ieee754_sqrt+0x164>)
 800bdd6:	43ae      	bics	r6, r5
 800bdd8:	ee10 0a10 	vmov	r0, s0
 800bddc:	ee10 3a10 	vmov	r3, s0
 800bde0:	4629      	mov	r1, r5
 800bde2:	462a      	mov	r2, r5
 800bde4:	d110      	bne.n	800be08 <__ieee754_sqrt+0x3c>
 800bde6:	ee10 2a10 	vmov	r2, s0
 800bdea:	462b      	mov	r3, r5
 800bdec:	f7f4 fc24 	bl	8000638 <__aeabi_dmul>
 800bdf0:	4602      	mov	r2, r0
 800bdf2:	460b      	mov	r3, r1
 800bdf4:	4620      	mov	r0, r4
 800bdf6:	4629      	mov	r1, r5
 800bdf8:	f7f4 fa68 	bl	80002cc <__adddf3>
 800bdfc:	4604      	mov	r4, r0
 800bdfe:	460d      	mov	r5, r1
 800be00:	ec45 4b10 	vmov	d0, r4, r5
 800be04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be08:	2d00      	cmp	r5, #0
 800be0a:	dc10      	bgt.n	800be2e <__ieee754_sqrt+0x62>
 800be0c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800be10:	4330      	orrs	r0, r6
 800be12:	d0f5      	beq.n	800be00 <__ieee754_sqrt+0x34>
 800be14:	b15d      	cbz	r5, 800be2e <__ieee754_sqrt+0x62>
 800be16:	ee10 2a10 	vmov	r2, s0
 800be1a:	462b      	mov	r3, r5
 800be1c:	ee10 0a10 	vmov	r0, s0
 800be20:	f7f4 fa52 	bl	80002c8 <__aeabi_dsub>
 800be24:	4602      	mov	r2, r0
 800be26:	460b      	mov	r3, r1
 800be28:	f7f4 fd30 	bl	800088c <__aeabi_ddiv>
 800be2c:	e7e6      	b.n	800bdfc <__ieee754_sqrt+0x30>
 800be2e:	1509      	asrs	r1, r1, #20
 800be30:	d076      	beq.n	800bf20 <__ieee754_sqrt+0x154>
 800be32:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800be36:	07ce      	lsls	r6, r1, #31
 800be38:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800be3c:	bf5e      	ittt	pl
 800be3e:	0fda      	lsrpl	r2, r3, #31
 800be40:	005b      	lslpl	r3, r3, #1
 800be42:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800be46:	0fda      	lsrs	r2, r3, #31
 800be48:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800be4c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800be50:	2000      	movs	r0, #0
 800be52:	106d      	asrs	r5, r5, #1
 800be54:	005b      	lsls	r3, r3, #1
 800be56:	f04f 0e16 	mov.w	lr, #22
 800be5a:	4684      	mov	ip, r0
 800be5c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800be60:	eb0c 0401 	add.w	r4, ip, r1
 800be64:	4294      	cmp	r4, r2
 800be66:	bfde      	ittt	le
 800be68:	1b12      	suble	r2, r2, r4
 800be6a:	eb04 0c01 	addle.w	ip, r4, r1
 800be6e:	1840      	addle	r0, r0, r1
 800be70:	0052      	lsls	r2, r2, #1
 800be72:	f1be 0e01 	subs.w	lr, lr, #1
 800be76:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800be7a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800be7e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800be82:	d1ed      	bne.n	800be60 <__ieee754_sqrt+0x94>
 800be84:	4671      	mov	r1, lr
 800be86:	2720      	movs	r7, #32
 800be88:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800be8c:	4562      	cmp	r2, ip
 800be8e:	eb04 060e 	add.w	r6, r4, lr
 800be92:	dc02      	bgt.n	800be9a <__ieee754_sqrt+0xce>
 800be94:	d113      	bne.n	800bebe <__ieee754_sqrt+0xf2>
 800be96:	429e      	cmp	r6, r3
 800be98:	d811      	bhi.n	800bebe <__ieee754_sqrt+0xf2>
 800be9a:	2e00      	cmp	r6, #0
 800be9c:	eb06 0e04 	add.w	lr, r6, r4
 800bea0:	da43      	bge.n	800bf2a <__ieee754_sqrt+0x15e>
 800bea2:	f1be 0f00 	cmp.w	lr, #0
 800bea6:	db40      	blt.n	800bf2a <__ieee754_sqrt+0x15e>
 800bea8:	f10c 0801 	add.w	r8, ip, #1
 800beac:	eba2 020c 	sub.w	r2, r2, ip
 800beb0:	429e      	cmp	r6, r3
 800beb2:	bf88      	it	hi
 800beb4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800beb8:	1b9b      	subs	r3, r3, r6
 800beba:	4421      	add	r1, r4
 800bebc:	46c4      	mov	ip, r8
 800bebe:	0052      	lsls	r2, r2, #1
 800bec0:	3f01      	subs	r7, #1
 800bec2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800bec6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800beca:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bece:	d1dd      	bne.n	800be8c <__ieee754_sqrt+0xc0>
 800bed0:	4313      	orrs	r3, r2
 800bed2:	d006      	beq.n	800bee2 <__ieee754_sqrt+0x116>
 800bed4:	1c4c      	adds	r4, r1, #1
 800bed6:	bf13      	iteet	ne
 800bed8:	3101      	addne	r1, #1
 800beda:	3001      	addeq	r0, #1
 800bedc:	4639      	moveq	r1, r7
 800bede:	f021 0101 	bicne.w	r1, r1, #1
 800bee2:	1043      	asrs	r3, r0, #1
 800bee4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800bee8:	0849      	lsrs	r1, r1, #1
 800beea:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800beee:	07c2      	lsls	r2, r0, #31
 800bef0:	bf48      	it	mi
 800bef2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800bef6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800befa:	460c      	mov	r4, r1
 800befc:	463d      	mov	r5, r7
 800befe:	e77f      	b.n	800be00 <__ieee754_sqrt+0x34>
 800bf00:	0ada      	lsrs	r2, r3, #11
 800bf02:	3815      	subs	r0, #21
 800bf04:	055b      	lsls	r3, r3, #21
 800bf06:	2a00      	cmp	r2, #0
 800bf08:	d0fa      	beq.n	800bf00 <__ieee754_sqrt+0x134>
 800bf0a:	02d7      	lsls	r7, r2, #11
 800bf0c:	d50a      	bpl.n	800bf24 <__ieee754_sqrt+0x158>
 800bf0e:	f1c1 0420 	rsb	r4, r1, #32
 800bf12:	fa23 f404 	lsr.w	r4, r3, r4
 800bf16:	1e4d      	subs	r5, r1, #1
 800bf18:	408b      	lsls	r3, r1
 800bf1a:	4322      	orrs	r2, r4
 800bf1c:	1b41      	subs	r1, r0, r5
 800bf1e:	e788      	b.n	800be32 <__ieee754_sqrt+0x66>
 800bf20:	4608      	mov	r0, r1
 800bf22:	e7f0      	b.n	800bf06 <__ieee754_sqrt+0x13a>
 800bf24:	0052      	lsls	r2, r2, #1
 800bf26:	3101      	adds	r1, #1
 800bf28:	e7ef      	b.n	800bf0a <__ieee754_sqrt+0x13e>
 800bf2a:	46e0      	mov	r8, ip
 800bf2c:	e7be      	b.n	800beac <__ieee754_sqrt+0xe0>
 800bf2e:	bf00      	nop
 800bf30:	7ff00000 	.word	0x7ff00000
 800bf34:	00000000 	.word	0x00000000

0800bf38 <atan>:
 800bf38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf3c:	ec55 4b10 	vmov	r4, r5, d0
 800bf40:	4bc3      	ldr	r3, [pc, #780]	; (800c250 <atan+0x318>)
 800bf42:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bf46:	429e      	cmp	r6, r3
 800bf48:	46ab      	mov	fp, r5
 800bf4a:	dd18      	ble.n	800bf7e <atan+0x46>
 800bf4c:	4bc1      	ldr	r3, [pc, #772]	; (800c254 <atan+0x31c>)
 800bf4e:	429e      	cmp	r6, r3
 800bf50:	dc01      	bgt.n	800bf56 <atan+0x1e>
 800bf52:	d109      	bne.n	800bf68 <atan+0x30>
 800bf54:	b144      	cbz	r4, 800bf68 <atan+0x30>
 800bf56:	4622      	mov	r2, r4
 800bf58:	462b      	mov	r3, r5
 800bf5a:	4620      	mov	r0, r4
 800bf5c:	4629      	mov	r1, r5
 800bf5e:	f7f4 f9b5 	bl	80002cc <__adddf3>
 800bf62:	4604      	mov	r4, r0
 800bf64:	460d      	mov	r5, r1
 800bf66:	e006      	b.n	800bf76 <atan+0x3e>
 800bf68:	f1bb 0f00 	cmp.w	fp, #0
 800bf6c:	f300 8131 	bgt.w	800c1d2 <atan+0x29a>
 800bf70:	a59b      	add	r5, pc, #620	; (adr r5, 800c1e0 <atan+0x2a8>)
 800bf72:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bf76:	ec45 4b10 	vmov	d0, r4, r5
 800bf7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf7e:	4bb6      	ldr	r3, [pc, #728]	; (800c258 <atan+0x320>)
 800bf80:	429e      	cmp	r6, r3
 800bf82:	dc14      	bgt.n	800bfae <atan+0x76>
 800bf84:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800bf88:	429e      	cmp	r6, r3
 800bf8a:	dc0d      	bgt.n	800bfa8 <atan+0x70>
 800bf8c:	a396      	add	r3, pc, #600	; (adr r3, 800c1e8 <atan+0x2b0>)
 800bf8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf92:	ee10 0a10 	vmov	r0, s0
 800bf96:	4629      	mov	r1, r5
 800bf98:	f7f4 f998 	bl	80002cc <__adddf3>
 800bf9c:	4baf      	ldr	r3, [pc, #700]	; (800c25c <atan+0x324>)
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	f7f4 fdda 	bl	8000b58 <__aeabi_dcmpgt>
 800bfa4:	2800      	cmp	r0, #0
 800bfa6:	d1e6      	bne.n	800bf76 <atan+0x3e>
 800bfa8:	f04f 3aff 	mov.w	sl, #4294967295
 800bfac:	e02b      	b.n	800c006 <atan+0xce>
 800bfae:	f000 f963 	bl	800c278 <fabs>
 800bfb2:	4bab      	ldr	r3, [pc, #684]	; (800c260 <atan+0x328>)
 800bfb4:	429e      	cmp	r6, r3
 800bfb6:	ec55 4b10 	vmov	r4, r5, d0
 800bfba:	f300 80bf 	bgt.w	800c13c <atan+0x204>
 800bfbe:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800bfc2:	429e      	cmp	r6, r3
 800bfc4:	f300 80a0 	bgt.w	800c108 <atan+0x1d0>
 800bfc8:	ee10 2a10 	vmov	r2, s0
 800bfcc:	ee10 0a10 	vmov	r0, s0
 800bfd0:	462b      	mov	r3, r5
 800bfd2:	4629      	mov	r1, r5
 800bfd4:	f7f4 f97a 	bl	80002cc <__adddf3>
 800bfd8:	4ba0      	ldr	r3, [pc, #640]	; (800c25c <atan+0x324>)
 800bfda:	2200      	movs	r2, #0
 800bfdc:	f7f4 f974 	bl	80002c8 <__aeabi_dsub>
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	4606      	mov	r6, r0
 800bfe4:	460f      	mov	r7, r1
 800bfe6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bfea:	4620      	mov	r0, r4
 800bfec:	4629      	mov	r1, r5
 800bfee:	f7f4 f96d 	bl	80002cc <__adddf3>
 800bff2:	4602      	mov	r2, r0
 800bff4:	460b      	mov	r3, r1
 800bff6:	4630      	mov	r0, r6
 800bff8:	4639      	mov	r1, r7
 800bffa:	f7f4 fc47 	bl	800088c <__aeabi_ddiv>
 800bffe:	f04f 0a00 	mov.w	sl, #0
 800c002:	4604      	mov	r4, r0
 800c004:	460d      	mov	r5, r1
 800c006:	4622      	mov	r2, r4
 800c008:	462b      	mov	r3, r5
 800c00a:	4620      	mov	r0, r4
 800c00c:	4629      	mov	r1, r5
 800c00e:	f7f4 fb13 	bl	8000638 <__aeabi_dmul>
 800c012:	4602      	mov	r2, r0
 800c014:	460b      	mov	r3, r1
 800c016:	4680      	mov	r8, r0
 800c018:	4689      	mov	r9, r1
 800c01a:	f7f4 fb0d 	bl	8000638 <__aeabi_dmul>
 800c01e:	a374      	add	r3, pc, #464	; (adr r3, 800c1f0 <atan+0x2b8>)
 800c020:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c024:	4606      	mov	r6, r0
 800c026:	460f      	mov	r7, r1
 800c028:	f7f4 fb06 	bl	8000638 <__aeabi_dmul>
 800c02c:	a372      	add	r3, pc, #456	; (adr r3, 800c1f8 <atan+0x2c0>)
 800c02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c032:	f7f4 f94b 	bl	80002cc <__adddf3>
 800c036:	4632      	mov	r2, r6
 800c038:	463b      	mov	r3, r7
 800c03a:	f7f4 fafd 	bl	8000638 <__aeabi_dmul>
 800c03e:	a370      	add	r3, pc, #448	; (adr r3, 800c200 <atan+0x2c8>)
 800c040:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c044:	f7f4 f942 	bl	80002cc <__adddf3>
 800c048:	4632      	mov	r2, r6
 800c04a:	463b      	mov	r3, r7
 800c04c:	f7f4 faf4 	bl	8000638 <__aeabi_dmul>
 800c050:	a36d      	add	r3, pc, #436	; (adr r3, 800c208 <atan+0x2d0>)
 800c052:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c056:	f7f4 f939 	bl	80002cc <__adddf3>
 800c05a:	4632      	mov	r2, r6
 800c05c:	463b      	mov	r3, r7
 800c05e:	f7f4 faeb 	bl	8000638 <__aeabi_dmul>
 800c062:	a36b      	add	r3, pc, #428	; (adr r3, 800c210 <atan+0x2d8>)
 800c064:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c068:	f7f4 f930 	bl	80002cc <__adddf3>
 800c06c:	4632      	mov	r2, r6
 800c06e:	463b      	mov	r3, r7
 800c070:	f7f4 fae2 	bl	8000638 <__aeabi_dmul>
 800c074:	a368      	add	r3, pc, #416	; (adr r3, 800c218 <atan+0x2e0>)
 800c076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c07a:	f7f4 f927 	bl	80002cc <__adddf3>
 800c07e:	4642      	mov	r2, r8
 800c080:	464b      	mov	r3, r9
 800c082:	f7f4 fad9 	bl	8000638 <__aeabi_dmul>
 800c086:	a366      	add	r3, pc, #408	; (adr r3, 800c220 <atan+0x2e8>)
 800c088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c08c:	4680      	mov	r8, r0
 800c08e:	4689      	mov	r9, r1
 800c090:	4630      	mov	r0, r6
 800c092:	4639      	mov	r1, r7
 800c094:	f7f4 fad0 	bl	8000638 <__aeabi_dmul>
 800c098:	a363      	add	r3, pc, #396	; (adr r3, 800c228 <atan+0x2f0>)
 800c09a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c09e:	f7f4 f913 	bl	80002c8 <__aeabi_dsub>
 800c0a2:	4632      	mov	r2, r6
 800c0a4:	463b      	mov	r3, r7
 800c0a6:	f7f4 fac7 	bl	8000638 <__aeabi_dmul>
 800c0aa:	a361      	add	r3, pc, #388	; (adr r3, 800c230 <atan+0x2f8>)
 800c0ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0b0:	f7f4 f90a 	bl	80002c8 <__aeabi_dsub>
 800c0b4:	4632      	mov	r2, r6
 800c0b6:	463b      	mov	r3, r7
 800c0b8:	f7f4 fabe 	bl	8000638 <__aeabi_dmul>
 800c0bc:	a35e      	add	r3, pc, #376	; (adr r3, 800c238 <atan+0x300>)
 800c0be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0c2:	f7f4 f901 	bl	80002c8 <__aeabi_dsub>
 800c0c6:	4632      	mov	r2, r6
 800c0c8:	463b      	mov	r3, r7
 800c0ca:	f7f4 fab5 	bl	8000638 <__aeabi_dmul>
 800c0ce:	a35c      	add	r3, pc, #368	; (adr r3, 800c240 <atan+0x308>)
 800c0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0d4:	f7f4 f8f8 	bl	80002c8 <__aeabi_dsub>
 800c0d8:	4632      	mov	r2, r6
 800c0da:	463b      	mov	r3, r7
 800c0dc:	f7f4 faac 	bl	8000638 <__aeabi_dmul>
 800c0e0:	4602      	mov	r2, r0
 800c0e2:	460b      	mov	r3, r1
 800c0e4:	4640      	mov	r0, r8
 800c0e6:	4649      	mov	r1, r9
 800c0e8:	f7f4 f8f0 	bl	80002cc <__adddf3>
 800c0ec:	4622      	mov	r2, r4
 800c0ee:	462b      	mov	r3, r5
 800c0f0:	f7f4 faa2 	bl	8000638 <__aeabi_dmul>
 800c0f4:	f1ba 3fff 	cmp.w	sl, #4294967295
 800c0f8:	4602      	mov	r2, r0
 800c0fa:	460b      	mov	r3, r1
 800c0fc:	d14b      	bne.n	800c196 <atan+0x25e>
 800c0fe:	4620      	mov	r0, r4
 800c100:	4629      	mov	r1, r5
 800c102:	f7f4 f8e1 	bl	80002c8 <__aeabi_dsub>
 800c106:	e72c      	b.n	800bf62 <atan+0x2a>
 800c108:	ee10 0a10 	vmov	r0, s0
 800c10c:	4b53      	ldr	r3, [pc, #332]	; (800c25c <atan+0x324>)
 800c10e:	2200      	movs	r2, #0
 800c110:	4629      	mov	r1, r5
 800c112:	f7f4 f8d9 	bl	80002c8 <__aeabi_dsub>
 800c116:	4b51      	ldr	r3, [pc, #324]	; (800c25c <atan+0x324>)
 800c118:	4606      	mov	r6, r0
 800c11a:	460f      	mov	r7, r1
 800c11c:	2200      	movs	r2, #0
 800c11e:	4620      	mov	r0, r4
 800c120:	4629      	mov	r1, r5
 800c122:	f7f4 f8d3 	bl	80002cc <__adddf3>
 800c126:	4602      	mov	r2, r0
 800c128:	460b      	mov	r3, r1
 800c12a:	4630      	mov	r0, r6
 800c12c:	4639      	mov	r1, r7
 800c12e:	f7f4 fbad 	bl	800088c <__aeabi_ddiv>
 800c132:	f04f 0a01 	mov.w	sl, #1
 800c136:	4604      	mov	r4, r0
 800c138:	460d      	mov	r5, r1
 800c13a:	e764      	b.n	800c006 <atan+0xce>
 800c13c:	4b49      	ldr	r3, [pc, #292]	; (800c264 <atan+0x32c>)
 800c13e:	429e      	cmp	r6, r3
 800c140:	da1d      	bge.n	800c17e <atan+0x246>
 800c142:	ee10 0a10 	vmov	r0, s0
 800c146:	4b48      	ldr	r3, [pc, #288]	; (800c268 <atan+0x330>)
 800c148:	2200      	movs	r2, #0
 800c14a:	4629      	mov	r1, r5
 800c14c:	f7f4 f8bc 	bl	80002c8 <__aeabi_dsub>
 800c150:	4b45      	ldr	r3, [pc, #276]	; (800c268 <atan+0x330>)
 800c152:	4606      	mov	r6, r0
 800c154:	460f      	mov	r7, r1
 800c156:	2200      	movs	r2, #0
 800c158:	4620      	mov	r0, r4
 800c15a:	4629      	mov	r1, r5
 800c15c:	f7f4 fa6c 	bl	8000638 <__aeabi_dmul>
 800c160:	4b3e      	ldr	r3, [pc, #248]	; (800c25c <atan+0x324>)
 800c162:	2200      	movs	r2, #0
 800c164:	f7f4 f8b2 	bl	80002cc <__adddf3>
 800c168:	4602      	mov	r2, r0
 800c16a:	460b      	mov	r3, r1
 800c16c:	4630      	mov	r0, r6
 800c16e:	4639      	mov	r1, r7
 800c170:	f7f4 fb8c 	bl	800088c <__aeabi_ddiv>
 800c174:	f04f 0a02 	mov.w	sl, #2
 800c178:	4604      	mov	r4, r0
 800c17a:	460d      	mov	r5, r1
 800c17c:	e743      	b.n	800c006 <atan+0xce>
 800c17e:	462b      	mov	r3, r5
 800c180:	ee10 2a10 	vmov	r2, s0
 800c184:	4939      	ldr	r1, [pc, #228]	; (800c26c <atan+0x334>)
 800c186:	2000      	movs	r0, #0
 800c188:	f7f4 fb80 	bl	800088c <__aeabi_ddiv>
 800c18c:	f04f 0a03 	mov.w	sl, #3
 800c190:	4604      	mov	r4, r0
 800c192:	460d      	mov	r5, r1
 800c194:	e737      	b.n	800c006 <atan+0xce>
 800c196:	4b36      	ldr	r3, [pc, #216]	; (800c270 <atan+0x338>)
 800c198:	4e36      	ldr	r6, [pc, #216]	; (800c274 <atan+0x33c>)
 800c19a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800c19e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800c1a2:	e9da 2300 	ldrd	r2, r3, [sl]
 800c1a6:	f7f4 f88f 	bl	80002c8 <__aeabi_dsub>
 800c1aa:	4622      	mov	r2, r4
 800c1ac:	462b      	mov	r3, r5
 800c1ae:	f7f4 f88b 	bl	80002c8 <__aeabi_dsub>
 800c1b2:	4602      	mov	r2, r0
 800c1b4:	460b      	mov	r3, r1
 800c1b6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c1ba:	f7f4 f885 	bl	80002c8 <__aeabi_dsub>
 800c1be:	f1bb 0f00 	cmp.w	fp, #0
 800c1c2:	4604      	mov	r4, r0
 800c1c4:	460d      	mov	r5, r1
 800c1c6:	f6bf aed6 	bge.w	800bf76 <atan+0x3e>
 800c1ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c1ce:	461d      	mov	r5, r3
 800c1d0:	e6d1      	b.n	800bf76 <atan+0x3e>
 800c1d2:	a51d      	add	r5, pc, #116	; (adr r5, 800c248 <atan+0x310>)
 800c1d4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c1d8:	e6cd      	b.n	800bf76 <atan+0x3e>
 800c1da:	bf00      	nop
 800c1dc:	f3af 8000 	nop.w
 800c1e0:	54442d18 	.word	0x54442d18
 800c1e4:	bff921fb 	.word	0xbff921fb
 800c1e8:	8800759c 	.word	0x8800759c
 800c1ec:	7e37e43c 	.word	0x7e37e43c
 800c1f0:	e322da11 	.word	0xe322da11
 800c1f4:	3f90ad3a 	.word	0x3f90ad3a
 800c1f8:	24760deb 	.word	0x24760deb
 800c1fc:	3fa97b4b 	.word	0x3fa97b4b
 800c200:	a0d03d51 	.word	0xa0d03d51
 800c204:	3fb10d66 	.word	0x3fb10d66
 800c208:	c54c206e 	.word	0xc54c206e
 800c20c:	3fb745cd 	.word	0x3fb745cd
 800c210:	920083ff 	.word	0x920083ff
 800c214:	3fc24924 	.word	0x3fc24924
 800c218:	5555550d 	.word	0x5555550d
 800c21c:	3fd55555 	.word	0x3fd55555
 800c220:	2c6a6c2f 	.word	0x2c6a6c2f
 800c224:	bfa2b444 	.word	0xbfa2b444
 800c228:	52defd9a 	.word	0x52defd9a
 800c22c:	3fadde2d 	.word	0x3fadde2d
 800c230:	af749a6d 	.word	0xaf749a6d
 800c234:	3fb3b0f2 	.word	0x3fb3b0f2
 800c238:	fe231671 	.word	0xfe231671
 800c23c:	3fbc71c6 	.word	0x3fbc71c6
 800c240:	9998ebc4 	.word	0x9998ebc4
 800c244:	3fc99999 	.word	0x3fc99999
 800c248:	54442d18 	.word	0x54442d18
 800c24c:	3ff921fb 	.word	0x3ff921fb
 800c250:	440fffff 	.word	0x440fffff
 800c254:	7ff00000 	.word	0x7ff00000
 800c258:	3fdbffff 	.word	0x3fdbffff
 800c25c:	3ff00000 	.word	0x3ff00000
 800c260:	3ff2ffff 	.word	0x3ff2ffff
 800c264:	40038000 	.word	0x40038000
 800c268:	3ff80000 	.word	0x3ff80000
 800c26c:	bff00000 	.word	0xbff00000
 800c270:	0800d268 	.word	0x0800d268
 800c274:	0800d248 	.word	0x0800d248

0800c278 <fabs>:
 800c278:	ec51 0b10 	vmov	r0, r1, d0
 800c27c:	ee10 2a10 	vmov	r2, s0
 800c280:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c284:	ec43 2b10 	vmov	d0, r2, r3
 800c288:	4770      	bx	lr
	...

0800c28c <_init>:
 800c28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c28e:	bf00      	nop
 800c290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c292:	bc08      	pop	{r3}
 800c294:	469e      	mov	lr, r3
 800c296:	4770      	bx	lr

0800c298 <_fini>:
 800c298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c29a:	bf00      	nop
 800c29c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c29e:	bc08      	pop	{r3}
 800c2a0:	469e      	mov	lr, r3
 800c2a2:	4770      	bx	lr
